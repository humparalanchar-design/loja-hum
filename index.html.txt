<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Doce Encanto - Confeitaria</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #8B7355 0%, #A0845C 100%);
        }
        .card-hover {
            transition: all 0.3s ease;
        }
        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        .floating-cart {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
        }
        .admin-panel {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
        }
        .tab-active {
            background: linear-gradient(135deg, #8B7355 0%, #A0845C 100%);
            color: white;
        }
        .status-badge {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }
        .payment-method {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .payment-method:hover {
            transform: scale(1.02);
        }
        .payment-method.selected {
            border-color: #10b981;
            background-color: #f0fdf4;
        }
        .product-type-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 10;
        }
        .delivery-info {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border: 2px solid #f59e0b;
        }
        .order-type-card {
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }
        .order-type-card.selected {
            border-color: #10b981;
            background-color: #f0fdf4;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-amber-50 to-orange-100 min-h-screen">
    <!-- Store Header -->
    <header class="gradient-bg shadow-2xl" id="store-header">
        <div class="container mx-auto px-6 py-6">
            <div class="flex justify-between items-center">
                <div class="flex items-center space-x-4">
                    <div class="bg-white/20 backdrop-blur-sm p-4 rounded-2xl" id="store-logo-container">
                        <img id="store-logo" src="" alt="Logo" class="w-8 h-8 object-contain hidden" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                        <i class="fas fa-birthday-cake text-white text-2xl" id="store-default-icon"></i>
                    </div>
                    <div>
                        <h1 class="text-3xl font-bold text-white" id="store-name">Doce Encanto</h1>
                        <p class="text-white/80 text-sm">Confeitaria Artesanal</p>
                    </div>
                </div>
                <div class="flex items-center space-x-6">
                    <div class="text-right text-white/90">
                        <p class="text-sm">üì± <span id="store-phone">(11) 99999-9999</span></p>
                        <p class="text-sm">‚úâÔ∏è <span id="store-email">contato@doceencanto.com</span></p>
                    </div>
                    <button onclick="showAdminLogin()" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white px-6 py-3 rounded-xl transition-all duration-300 border border-white/20 font-medium shadow-lg">
                        <i class="fas fa-cog mr-2"></i>Painel Admin
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Store Navigation -->
    <nav class="bg-white/95 backdrop-blur-sm shadow-lg sticky top-0 z-40" id="store-nav">
        <div class="container mx-auto px-6">
            <div class="flex space-x-2" id="store-nav-buttons">
                <button onclick="showStoreSection('all')" class="store-nav-btn active bg-gradient-to-r from-amber-600 to-orange-700 text-white px-6 py-4 rounded-t-xl transition-all duration-300 font-medium">
                    <i class="fas fa-home mr-2"></i>Todos
                </button>
                <!-- Category buttons will be loaded dynamically -->
            </div>
        </div>
    </nav>

    <!-- Store Content -->
    <main class="container mx-auto px-6 py-8" id="store-content">
        <!-- Promotional Carousel -->
        <section class="mb-8">
            <div class="relative bg-white rounded-2xl shadow-xl overflow-hidden">
                <div class="carousel-container relative h-64 md:h-80">
                    <!-- Carousel slides -->
                    <div class="carousel-slide active absolute inset-0 transition-opacity duration-500" id="slide-0">
                        <img src="" alt="Promo√ß√£o 1" class="w-full h-full object-cover hidden" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" id="carousel-img-0">
                        <div class="w-full h-full bg-gradient-to-r from-pink-400 to-purple-600 flex items-center justify-center" id="carousel-placeholder-0">
                            <div class="text-center text-white">
                                <i class="fas fa-image text-6xl mb-4 opacity-50"></i>
                                <h3 class="text-2xl font-bold mb-2">Promo√ß√£o Especial</h3>
                                <p class="text-lg">Configure suas imagens promocionais no painel admin</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="carousel-slide absolute inset-0 transition-opacity duration-500 opacity-0" id="slide-1">
                        <img src="" alt="Promo√ß√£o 2" class="w-full h-full object-cover hidden" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" id="carousel-img-1">
                        <div class="w-full h-full bg-gradient-to-r from-blue-400 to-indigo-600 flex items-center justify-center" id="carousel-placeholder-1">
                            <div class="text-center text-white">
                                <i class="fas fa-birthday-cake text-6xl mb-4 opacity-50"></i>
                                <h3 class="text-2xl font-bold mb-2">Bolos Especiais</h3>
                                <p class="text-lg">Encomende seu bolo personalizado</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="carousel-slide absolute inset-0 transition-opacity duration-500 opacity-0" id="slide-2">
                        <img src="" alt="Promo√ß√£o 3" class="w-full h-full object-cover hidden" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" id="carousel-img-2">
                        <div class="w-full h-full bg-gradient-to-r from-green-400 to-teal-600 flex items-center justify-center" id="carousel-placeholder-2">
                            <div class="text-center text-white">
                                <i class="fas fa-truck text-6xl mb-4 opacity-50"></i>
                                <h3 class="text-2xl font-bold mb-2">Entrega Gr√°tis</h3>
                                <p class="text-lg">Em pedidos acima de R$ 100,00</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="carousel-slide absolute inset-0 transition-opacity duration-500 opacity-0" id="slide-3">
                        <img src="" alt="Promo√ß√£o 4" class="w-full h-full object-cover hidden" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" id="carousel-img-3">
                        <div class="w-full h-full bg-gradient-to-r from-orange-400 to-red-600 flex items-center justify-center" id="carousel-placeholder-3">
                            <div class="text-center text-white">
                                <i class="fas fa-percent text-6xl mb-4 opacity-50"></i>
                                <h3 class="text-2xl font-bold mb-2">Desconto PIX</h3>
                                <p class="text-lg">5% de desconto pagando via PIX</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Navigation arrows -->
                    <button onclick="previousSlide()" class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white p-3 rounded-full transition-all duration-300 backdrop-blur-sm">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button onclick="nextSlide()" class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white p-3 rounded-full transition-all duration-300 backdrop-blur-sm">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                    
                    <!-- Dots indicator -->
                    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
                        <button onclick="goToSlide(0)" class="carousel-dot active w-3 h-3 rounded-full bg-white/80 hover:bg-white transition-all duration-300"></button>
                        <button onclick="goToSlide(1)" class="carousel-dot w-3 h-3 rounded-full bg-white/50 hover:bg-white transition-all duration-300"></button>
                        <button onclick="goToSlide(2)" class="carousel-dot w-3 h-3 rounded-full bg-white/50 hover:bg-white transition-all duration-300"></button>
                        <button onclick="goToSlide(3)" class="carousel-dot w-3 h-3 rounded-full bg-white/50 hover:bg-white transition-all duration-300"></button>
                    </div>
                </div>
            </div>
        </section>

        <!-- Hero Section -->
        <section class="bg-white rounded-2xl shadow-xl p-8 mb-8 text-center">
            <h2 class="text-4xl font-bold text-amber-800 mb-4">Bem-vindos √† Doce Encanto!</h2>
            <p class="text-xl text-gray-600 mb-6">Deliciosos doces artesanais feitos com amor e carinho</p>
            
            <!-- Important Notice -->
            <div class="delivery-info rounded-xl p-6 mb-6 text-left">
                <h3 class="text-lg font-bold text-amber-800 mb-3">
                    <i class="fas fa-info-circle mr-2"></i>Informa√ß√µes Importantes
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-amber-700">
                    <div class="flex items-start space-x-2">
                        <i class="fas fa-clock text-amber-600 mt-1"></i>
                        <div>
                            <strong>Produtos por Encomenda:</strong><br>
                            Devem ser pedidos com <strong>3 dias de anteced√™ncia m√≠nima</strong>
                        </div>
                    </div>
                    <div class="flex items-start space-x-2">
                        <i class="fas fa-truck text-amber-600 mt-1"></i>
                        <div>
                            <strong>Entrega:</strong><br>
                            Taxa calculada automaticamente pelo CEP
                        </div>
                    </div>
                    <div class="flex items-start space-x-2">
                        <i class="fas fa-credit-card text-amber-600 mt-1"></i>
                        <div>
                            <strong>Encomendas:</strong><br>
                            50% antecipado + 50% na entrega
                        </div>
                    </div>
                    <div class="flex items-start space-x-2">
                        <i class="fas fa-check-circle text-amber-600 mt-1"></i>
                        <div>
                            <strong>Pronta Entrega:</strong><br>
                            Dispon√≠vel imediatamente
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex justify-center space-x-4">
                <div class="bg-amber-100 p-4 rounded-lg">
                    <i class="fas fa-heart text-amber-600 text-2xl mb-2"></i>
                    <p class="text-sm font-medium">Feito com Amor</p>
                </div>
                <div class="bg-orange-100 p-4 rounded-lg">
                    <i class="fas fa-leaf text-orange-600 text-2xl mb-2"></i>
                    <p class="text-sm font-medium">Ingredientes Naturais</p>
                </div>
                <div class="bg-yellow-100 p-4 rounded-lg">
                    <i class="fas fa-truck text-yellow-600 text-2xl mb-2"></i>
                    <p class="text-sm font-medium">Entrega R√°pida</p>
                </div>
            </div>
        </section>

        <!-- Products Grid -->
        <section id="products-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            <!-- Products will be loaded here -->
        </section>
    </main>

    <!-- Floating Cart -->
    <div class="floating-cart">
        <button onclick="toggleCart()" class="bg-gradient-to-r from-amber-600 to-orange-700 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 relative">
            <i class="fas fa-shopping-cart text-xl"></i>
            <span id="cart-count" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center">0</span>
        </button>
    </div>

    <!-- Product Details Modal -->
    <div id="product-details-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-screen overflow-y-auto">
                <div class="relative">
                    <button onclick="closeProductDetails()" class="absolute top-4 right-4 z-10 bg-white/80 hover:bg-white text-gray-600 hover:text-gray-800 w-8 h-8 rounded-full flex items-center justify-center">
                        <i class="fas fa-times"></i>
                    </button>
                    <div id="product-details-content">
                        <!-- Product details will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cart Modal -->
    <div id="cart-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-screen overflow-y-auto">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold text-gray-800">
                            <i class="fas fa-shopping-cart text-pink-500 mr-2"></i>Finalizar Pedido
                        </h3>
                        <button onclick="toggleCart()" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>
                    
                    <!-- Order Type Selection -->
                    <div class="mb-6">
                        <h4 class="text-lg font-semibold text-gray-800 mb-4">Tipo do Pedido</h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="order-type-card bg-green-50 border rounded-lg p-4 cursor-pointer" onclick="selectOrderType('pronta_entrega')">
                                <div class="flex items-center mb-2">
                                    <input type="radio" name="order-type" value="pronta_entrega" class="mr-3">
                                    <i class="fas fa-clock text-green-500 mr-2"></i>
                                    <span class="font-semibold text-green-700">Pronta Entrega</span>
                                </div>
                                <p class="text-sm text-green-600">Produtos dispon√≠veis imediatamente</p>
                            </div>
                            <div class="order-type-card bg-blue-50 border rounded-lg p-4 cursor-pointer" onclick="selectOrderType('encomenda')">
                                <div class="flex items-center mb-2">
                                    <input type="radio" name="order-type" value="encomenda" class="mr-3">
                                    <i class="fas fa-calendar-alt text-blue-500 mr-2"></i>
                                    <span class="font-semibold text-blue-700">Encomenda</span>
                                </div>
                                <p class="text-sm text-blue-600">M√≠nimo 3 dias de anteced√™ncia</p>
                            </div>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <!-- Left Column: Cart Items -->
                        <div>
                            <h4 class="text-lg font-semibold text-gray-800 mb-4">Itens do Pedido</h4>
                            <div id="cart-items" class="space-y-4 mb-6 max-h-60 overflow-y-auto">
                                <!-- Cart items will be loaded here -->
                            </div>
                            
                            <!-- Order Summary -->
                            <div class="bg-gray-50 rounded-lg p-4">
                                <div class="space-y-2 text-sm">
                                    <div class="flex justify-between">
                                        <span>Subtotal:</span>
                                        <span id="cart-subtotal">R$ 0,00</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span>Taxa de Entrega:</span>
                                        <span id="delivery-fee">R$ 0,00</span>
                                    </div>
                                    <div class="border-t pt-2 flex justify-between font-bold text-lg">
                                        <span>Total:</span>
                                        <span id="cart-total">R$ 0,00</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Right Column: Customer and Order Data -->
                        <div>
                            <!-- 1. DADOS DO CLIENTE -->
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                                <div class="flex justify-between items-center mb-4">
                                    <h4 class="text-lg font-semibold text-blue-800">
                                        <i class="fas fa-user text-blue-600 mr-2"></i>1. Dados do Cliente
                                    </h4>
                                    <div class="flex space-x-2">
                                        <button onclick="loadSavedCustomerData()" class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm transition-colors relative" title="Carregar dados salvos" id="load-data-btn">
                                            <i class="fas fa-download mr-1"></i>Carregar Dados
                                            <span id="saved-data-indicator" class="absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full hidden"></span>
                                        </button>
                                        <button onclick="clearCustomerForm()" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded text-sm transition-colors" title="Limpar formul√°rio">
                                            <i class="fas fa-eraser mr-1"></i>Limpar
                                        </button>
                                    </div>
                                </div>
                                <div class="space-y-4">
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-blue-700 mb-1">Nome Completo *</label>
                                            <input type="text" id="customer-name" placeholder="Digite seu nome completo" class="w-full px-3 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-blue-700 mb-1">Telefone *</label>
                                            <input type="tel" id="customer-phone" placeholder="(11) 99999-9999" class="w-full px-3 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        </div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-blue-700 mb-1">Email *</label>
                                        <input type="email" id="customer-email" placeholder="seu@email.com" class="w-full px-3 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-blue-700 mb-1">CPF</label>
                                        <input type="text" id="customer-cpf" placeholder="000.000.000-00" maxlength="14" class="w-full px-3 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    </div>
                                </div>
                            </div>

                            <!-- 2. DADOS DA ENCOMENDA -->
                            <div class="bg-purple-50 border border-purple-200 rounded-lg p-4 mb-6" id="order-data-section">
                                <h4 class="text-lg font-semibold text-purple-800 mb-4">
                                    <i class="fas fa-calendar-alt text-purple-600 mr-2"></i>2. Dados da Encomenda
                                </h4>
                                <div class="space-y-4">
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-purple-700 mb-1">Data de Entrega *</label>
                                            <input type="date" id="delivery-date" class="w-full px-3 py-2 border border-purple-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                                            <p class="text-xs text-purple-600 mt-1">M√≠nimo 3 dias de anteced√™ncia</p>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-purple-700 mb-1">Hor√°rio Preferido</label>
                                            <select id="delivery-time" class="w-full px-3 py-2 border border-purple-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                                                <option value="">Selecione o hor√°rio</option>
                                                <option value="08:00-12:00">Manh√£ (08:00-12:00)</option>
                                                <option value="12:00-18:00">Tarde (12:00-18:00)</option>
                                                <option value="18:00-22:00">Noite (18:00-22:00)</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-purple-700 mb-1">Observa√ß√µes Especiais</label>
                                        <textarea id="order-observations" placeholder="Descreva detalhes sobre sabores, decora√ß√£o, tamanho, cores, tema da festa, etc." rows="4" class="w-full px-3 py-2 border border-purple-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"></textarea>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-purple-700 mb-1">Evento/Ocasi√£o</label>
                                        <select id="event-type" class="w-full px-3 py-2 border border-purple-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                                            <option value="">Selecione a ocasi√£o</option>
                                            <option value="aniversario">Anivers√°rio</option>
                                            <option value="casamento">Casamento</option>
                                            <option value="batizado">Batizado</option>
                                            <option value="formatura">Formatura</option>
                                            <option value="corporativo">Evento Corporativo</option>
                                            <option value="outros">Outros</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <!-- 3. DADOS DA ENTREGA -->
                            <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                                <h4 class="text-lg font-semibold text-green-800 mb-4">
                                    <i class="fas fa-truck text-green-600 mr-2"></i>3. Dados da Entrega
                                </h4>
                                <div class="space-y-4">
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-green-700 mb-1">CEP *</label>
                                            <input type="text" id="delivery-cep" placeholder="00000-000" maxlength="9" class="w-full px-3 py-2 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500" onblur="calculateDeliveryFee()">
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-green-700 mb-1">Cidade</label>
                                            <input type="text" id="delivery-city" placeholder="Cidade" class="w-full px-3 py-2 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                        </div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-green-700 mb-1">Endere√ßo Completo *</label>
                                        <input type="text" id="delivery-address" placeholder="Rua, Avenida, etc." class="w-full px-3 py-2 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                    </div>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-green-700 mb-1">N√∫mero *</label>
                                            <input type="text" id="delivery-number" placeholder="123" class="w-full px-3 py-2 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-green-700 mb-1">Complemento</label>
                                            <input type="text" id="delivery-complement" placeholder="Apto, Bloco..." class="w-full px-3 py-2 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-green-700 mb-1">Bairro</label>
                                            <input type="text" id="delivery-neighborhood" placeholder="Bairro" class="w-full px-3 py-2 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                        </div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-green-700 mb-1">Ponto de Refer√™ncia</label>
                                        <input type="text" id="delivery-reference" placeholder="Pr√≥ximo ao mercado, em frente √† escola..." class="w-full px-3 py-2 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                    </div>
                                </div>
                            </div>

                            <!-- 4. FORMA DE PAGAMENTO -->
                            <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
                                <h4 class="text-lg font-semibold text-orange-800 mb-4">
                                    <i class="fas fa-credit-card text-orange-600 mr-2"></i>4. Forma de Pagamento
                                </h4>
                                <div class="space-y-3" id="payment-methods-container">
                                    <!-- Payment methods will be loaded dynamically -->
                                </div>
                            </div>
                            
                            <button onclick="finalizeOrder()" class="w-full bg-gradient-to-r from-green-500 to-green-600 text-white py-4 px-6 rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-300 text-lg font-semibold shadow-lg">
                                <i class="fas fa-check mr-2"></i>Finalizar Pedido
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Payment Modal -->
    <div id="payment-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
                <div class="text-center mb-6">
                    <div class="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-clock text-orange-500 text-2xl"></i>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Pedido Criado!</h3>
                    <p class="text-gray-600">Pedido #<span id="order-number"></span></p>
                    <p class="text-sm text-orange-600 font-medium">Aguardando Pagamento</p>
                </div>
                
                <div id="payment-content" class="space-y-4">
                    <!-- Payment content will be loaded here -->
                </div>
                
                <div class="mt-6 pt-4 border-t">
                    <button onclick="closePaymentModal()" class="w-full bg-gray-500 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-times mr-2"></i>Fechar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Admin Panel -->
    <div id="admin-panel" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="admin-panel rounded-xl shadow-2xl max-w-6xl w-full max-h-screen overflow-y-auto">
                <!-- Admin Header -->
                <div class="gradient-bg p-6 rounded-t-xl">
                    <div class="flex justify-between items-center">
                        <h2 class="text-2xl font-bold text-white">
                            <i class="fas fa-cog mr-3"></i>Painel Administrativo
                        </h2>
                        <div class="flex space-x-2">
                            <button onclick="logoutAdmin()" class="bg-red-500/80 hover:bg-red-600/80 backdrop-blur-sm text-white px-4 py-2 rounded-xl transition-all duration-300 border border-red-300/20">
                                <i class="fas fa-sign-out-alt mr-2"></i>Sair
                            </button>
                            <button onclick="toggleAdminPanel()" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white px-4 py-2 rounded-xl transition-all duration-300 border border-white/20">
                                <i class="fas fa-times mr-2"></i>Fechar
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Admin Navigation -->
                <nav class="bg-white/95 backdrop-blur-sm border-b">
                    <div class="flex space-x-2 p-4">
                        <button onclick="showAdminTab('categories')" class="admin-tab-btn active tab-active px-6 py-3 rounded-lg transition-all duration-300 font-medium">
                            <i class="fas fa-tags mr-2"></i>Categorias
                        </button>
                        <button onclick="showAdminTab('products')" class="admin-tab-btn px-6 py-3 text-gray-600 hover:text-amber-700 hover:bg-amber-50 rounded-lg transition-all duration-300 font-medium">
                            <i class="fas fa-birthday-cake mr-2"></i>Produtos
                        </button>
                        <button onclick="showAdminTab('orders')" class="admin-tab-btn px-6 py-3 text-gray-600 hover:text-amber-700 hover:bg-amber-50 rounded-lg transition-all duration-300 font-medium">
                            <i class="fas fa-shopping-cart mr-2"></i>Pedidos
                        </button>
                        <button onclick="showAdminTab('stock')" class="admin-tab-btn px-6 py-3 text-gray-600 hover:text-amber-700 hover:bg-amber-50 rounded-lg transition-all duration-300 font-medium">
                            <i class="fas fa-boxes mr-2"></i>Estoque
                        </button>
                        <button onclick="showAdminTab('customers')" class="admin-tab-btn px-6 py-3 text-gray-600 hover:text-amber-700 hover:bg-amber-50 rounded-lg transition-all duration-300 font-medium">
                            <i class="fas fa-users mr-2"></i>Clientes
                        </button>
                        <button onclick="showAdminTab('settings')" class="admin-tab-btn px-6 py-3 text-gray-600 hover:text-amber-700 hover:bg-amber-50 rounded-lg transition-all duration-300 font-medium">
                            <i class="fas fa-cog mr-2"></i>Configura√ß√µes
                        </button>
                    </div>
                </nav>

                <!-- Admin Content -->
                <div class="p-6">
                    <!-- Categories Tab -->
                    <div id="admin-categories-tab" class="admin-tab-content">
                        <div class="flex justify-between items-center mb-6">
                            <h3 class="text-xl font-bold text-gray-800">Gest√£o de Categorias</h3>
                            <button onclick="showAddCategoryModal()" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-colors">
                                <i class="fas fa-plus mr-2"></i>Nova Categoria
                            </button>
                        </div>
                        
                        <!-- Categories Summary -->
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                            <div class="bg-gradient-to-r from-purple-400 to-purple-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-purple-100">Total Categorias</p>
                                        <p class="text-2xl font-bold" id="totalCategories">0</p>
                                    </div>
                                    <i class="fas fa-tags text-3xl text-purple-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-blue-400 to-blue-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-blue-100">Com Produtos</p>
                                        <p class="text-2xl font-bold" id="categoriesWithProducts">0</p>
                                    </div>
                                    <i class="fas fa-box text-3xl text-blue-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-green-400 to-green-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-green-100">Ativas</p>
                                        <p class="text-2xl font-bold" id="activeCategories">0</p>
                                    </div>
                                    <i class="fas fa-check-circle text-3xl text-green-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-orange-400 to-orange-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-orange-100">Vazias</p>
                                        <p class="text-2xl font-bold" id="emptyCategories">0</p>
                                    </div>
                                    <i class="fas fa-exclamation-triangle text-3xl text-orange-200"></i>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Categories List -->
                        <div id="admin-categories-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"></div>
                    </div>

                    <!-- Products Tab -->
                    <div id="admin-products-tab" class="admin-tab-content hidden">
                        <div class="flex justify-between items-center mb-6">
                            <h3 class="text-xl font-bold text-gray-800">Gest√£o de Produtos</h3>
                            <button onclick="showAddProductModal()" class="bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded-lg transition-colors">
                                <i class="fas fa-plus mr-2"></i>Novo Produto
                            </button>
                        </div>
                        <div id="admin-products-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"></div>
                    </div>

                    <!-- Orders Tab -->
                    <div id="admin-orders-tab" class="admin-tab-content hidden">
                        <div class="flex justify-between items-center mb-6">
                            <h3 class="text-xl font-bold text-gray-800">Gest√£o de Pedidos</h3>
                            <div class="flex space-x-2">
                                <button onclick="generateFakeOrder()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-plus mr-2"></i>Gerar Pedido Teste
                                </button>
                                <select id="order-filter" onchange="filterOrders()" class="px-3 py-2 border border-gray-300 rounded-lg">
                                    <option value="all">Todos os Status</option>
                                    <option value="aguardando_pagamento">Aguardando Pagamento</option>
                                    <option value="pendente">Pendente</option>
                                    <option value="confirmado">Confirmado</option>
                                    <option value="em_producao">Em Produ√ß√£o</option>
                                    <option value="pronto">Pronto</option>
                                    <option value="entregue">Entregue</option>
                                    <option value="cancelado">Cancelado</option>
                                </select>
                            </div>
                        </div>
                        <div id="admin-orders-list" class="space-y-4"></div>
                    </div>

                    <!-- Stock Tab -->
                    <div id="admin-stock-tab" class="admin-tab-content hidden">
                        <div class="flex justify-between items-center mb-6">
                            <h3 class="text-xl font-bold text-gray-800">Controle de Estoque</h3>
                            <div class="flex space-x-3">
                                <button onclick="showLowStockAlert()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-exclamation-triangle mr-2"></i>Estoque Baixo
                                </button>
                                <button onclick="showStockMovementModal()" class="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-exchange-alt mr-2"></i>Movimenta√ß√£o
                                </button>
                                <button onclick="printStock()" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-print mr-2"></i>Imprimir
                                </button>
                            </div>
                        </div>
                        
                        <!-- Stock Summary Cards -->
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                            <div class="bg-gradient-to-r from-green-400 to-green-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-green-100">Total Produtos</p>
                                        <p class="text-2xl font-bold" id="totalProducts">0</p>
                                    </div>
                                    <i class="fas fa-cubes text-3xl text-green-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-blue-400 to-blue-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-blue-100">Em Estoque</p>
                                        <p class="text-2xl font-bold" id="inStockProducts">0</p>
                                    </div>
                                    <i class="fas fa-check-circle text-3xl text-blue-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-yellow-400 to-yellow-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-yellow-100">Estoque Baixo</p>
                                        <p class="text-2xl font-bold" id="lowStockProducts">0</p>
                                    </div>
                                    <i class="fas fa-exclamation-triangle text-3xl text-yellow-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-red-400 to-red-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-red-100">Sem Estoque</p>
                                        <p class="text-2xl font-bold" id="outOfStockProducts">0</p>
                                    </div>
                                    <i class="fas fa-times-circle text-3xl text-red-200"></i>
                                </div>
                            </div>
                        </div>

                        <!-- Stock Table -->
                        <div class="bg-white rounded-lg shadow overflow-hidden">
                            <table class="w-full">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Produto</th>
                                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Categoria</th>
                                        <th class="px-4 py-3 text-center text-sm font-medium text-gray-700">Tipo</th>
                                        <th class="px-4 py-3 text-center text-sm font-medium text-gray-700">Estoque Atual</th>
                                        <th class="px-4 py-3 text-center text-sm font-medium text-gray-700">Estoque M√≠nimo</th>
                                        <th class="px-4 py-3 text-center text-sm font-medium text-gray-700">Status</th>
                                        <th class="px-4 py-3 text-center text-sm font-medium text-gray-700">A√ß√µes</th>
                                    </tr>
                                </thead>
                                <tbody id="stock-table-body" class="divide-y divide-gray-200">
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Customers Tab -->
                    <div id="admin-customers-tab" class="admin-tab-content hidden">
                        <div class="flex justify-between items-center mb-6">
                            <h3 class="text-xl font-bold text-gray-800">Gest√£o de Clientes</h3>
                            <div class="flex space-x-3">
                                <button onclick="showAddCustomerModal()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-user-plus mr-2"></i>Novo Cliente
                                </button>
                                <button onclick="exportCustomers()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-download mr-2"></i>Exportar
                                </button>
                                <button onclick="printCustomers()" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-print mr-2"></i>Imprimir
                                </button>
                            </div>
                        </div>
                        
                        <!-- Customers Summary -->
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                            <div class="bg-gradient-to-r from-blue-400 to-blue-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-blue-100">Total Clientes</p>
                                        <p class="text-2xl font-bold" id="totalCustomers">0</p>
                                    </div>
                                    <i class="fas fa-users text-3xl text-blue-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-green-400 to-green-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-green-100">Clientes Ativos</p>
                                        <p class="text-2xl font-bold" id="activeCustomers">0</p>
                                    </div>
                                    <i class="fas fa-user-check text-3xl text-green-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-purple-400 to-purple-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-purple-100">Pedidos Este M√™s</p>
                                        <p class="text-2xl font-bold" id="monthlyOrders">0</p>
                                    </div>
                                    <i class="fas fa-shopping-cart text-3xl text-purple-200"></i>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-orange-400 to-orange-600 p-4 rounded-lg text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-orange-100">Faturamento Total</p>
                                        <p class="text-2xl font-bold" id="totalRevenue">R$ 0</p>
                                    </div>
                                    <i class="fas fa-dollar-sign text-3xl text-orange-200"></i>
                                </div>
                            </div>
                        </div>

                        <!-- Search and Filter -->
                        <div class="bg-white rounded-lg shadow p-4 mb-6">
                            <div class="flex flex-col md:flex-row gap-4">
                                <div class="flex-1">
                                    <input type="text" id="customerSearch" placeholder="Buscar por nome, telefone ou email..." 
                                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                           oninput="filterCustomers()">
                                </div>
                                <div>
                                    <select id="customerFilter" onchange="filterCustomers()" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="all">Todos os Clientes</option>
                                        <option value="active">Clientes Ativos</option>
                                        <option value="inactive">Sem Pedidos</option>
                                        <option value="recent">Pedidos Recentes</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Customers List -->
                        <div id="admin-customers-list" class="space-y-4"></div>
                    </div>

                    <!-- Settings Tab -->
                    <div id="admin-settings-tab" class="admin-tab-content hidden">
                        <h3 class="text-xl font-bold text-gray-800 mb-6">Configura√ß√µes da Loja</h3>
                        
                        <!-- Asaas Integration Settings -->
                        <div class="mb-8 p-6 bg-blue-50 border border-blue-200 rounded-lg">
                            <h4 class="text-lg font-semibold text-blue-800 mb-4">
                                <i class="fas fa-credit-card text-blue-600 mr-2"></i>Integra√ß√£o Asaas
                            </h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">API Key Asaas</label>
                                    <input type="password" id="asaasApiKey" placeholder="$aact_..." 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    <p class="text-xs text-gray-500 mt-1">Chave da API do Asaas (encontrada no painel)</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Ambiente</label>
                                    <select id="asaasEnvironment" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="sandbox">Sandbox (Testes)</option>
                                        <option value="production">Produ√ß√£o</option>
                                    </select>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Wallet ID (Opcional)</label>
                                <input type="text" id="asaasWalletId" placeholder="ID da carteira para split de pagamento" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                <p class="text-xs text-gray-500 mt-1">Usado para split de pagamento (deixe vazio se n√£o usar)</p>
                            </div>
                            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                                <p class="text-sm text-yellow-800">
                                    <i class="fas fa-info-circle mr-2"></i>
                                    <strong>Importante:</strong> Configure sua conta no Asaas antes de ativar os pagamentos. 
                                    Use o ambiente Sandbox para testes e Produ√ß√£o apenas quando estiver pronto.
                                </p>
                            </div>
                        </div>

                        <!-- Payment Methods Configuration -->
                        <div class="mb-8 p-6 bg-green-50 border border-green-200 rounded-lg">
                            <h4 class="text-lg font-semibold text-green-800 mb-4">
                                <i class="fas fa-money-bill-wave text-green-600 mr-2"></i>M√©todos de Pagamento
                            </h4>
                            
                            <!-- Payment Options -->
                            <div class="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
                                <div class="flex items-center">
                                    <input type="checkbox" id="enablePix" class="mr-2">
                                    <label for="enablePix" class="text-sm font-medium text-gray-700">PIX</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="enableCreditCard" class="mr-2">
                                    <label for="enableCreditCard" class="text-sm font-medium text-gray-700">Cr√©dito</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="enableDebitCard" class="mr-2">
                                    <label for="enableDebitCard" class="text-sm font-medium text-gray-700">D√©bito</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="enableBoleto" class="mr-2">
                                    <label for="enableBoleto" class="text-sm font-medium text-gray-700">Boleto</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="enableEncomenda" class="mr-2">
                                    <label for="enableEncomenda" class="text-sm font-medium text-gray-700">Encomenda</label>
                                </div>
                            </div>

                            <!-- Payment Fees -->
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Taxa PIX (R$)</label>
                                    <input type="number" id="pixFee" step="0.01" min="0" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Desconto PIX (%)</label>
                                    <input type="number" id="pixDiscountPercent" step="0.1" min="0" max="100" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Taxa Cr√©dito (%)</label>
                                    <input type="number" id="creditCardFeePercent" step="0.01" min="0" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Taxa D√©bito (%)</label>
                                    <input type="number" id="debitCardFeePercent" step="0.01" min="0" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Taxa Boleto (R$)</label>
                                    <input type="number" id="boletoFee" step="0.01" min="0" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Taxa Parcela (%)</label>
                                    <input type="number" id="installmentFeePercent" step="0.01" min="0" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                </div>
                            </div>

                            <!-- Installment Settings -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">M√°ximo de Parcelas</label>
                                    <select id="maxInstallments" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                        <option value="1">1x</option>
                                        <option value="2">2x</option>
                                        <option value="3">3x</option>
                                        <option value="6">6x</option>
                                        <option value="12">12x</option>
                                        <option value="18">18x</option>
                                        <option value="24">24x</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Valor M√≠nimo Parcela (R$)</label>
                                    <input type="number" id="minInstallmentValue" step="0.01" min="1" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                </div>
                            </div>
                        </div>

                        <!-- Promotional Carousel Settings -->
                        <div class="mb-8 p-6 bg-indigo-50 border border-indigo-200 rounded-lg">
                            <h4 class="text-lg font-semibold text-indigo-800 mb-4">
                                <i class="fas fa-images text-indigo-600 mr-2"></i>Carrossel Promocional
                            </h4>
                            
                            <div class="space-y-6">
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="carousel-images-container">
                                    <!-- Carousel image inputs will be loaded here -->
                                </div>
                                
                                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                    <div class="flex items-start">
                                        <i class="fas fa-info-circle text-blue-600 mr-2 mt-1"></i>
                                        <div class="text-sm text-blue-800">
                                            <p class="font-medium mb-2">Dicas para as imagens do carrossel:</p>
                                            <ul class="list-disc list-inside space-y-1 text-xs">
                                                <li>üìê Tamanho recomendado: 1200x400 pixels</li>
                                                <li>üìÅ Formatos aceitos: JPG, PNG, GIF</li>
                                                <li>üìè Tamanho m√°ximo: 5MB por imagem</li>
                                                <li>üé® Use imagens com boa qualidade e contraste</li>
                                                <li>üì± Teste em diferentes dispositivos</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Google Sheets Backup Settings -->
                        <div class="mb-8 p-6 bg-green-50 border border-green-200 rounded-lg">
                            <h4 class="text-lg font-semibold text-green-800 mb-4">
                                <i class="fas fa-cloud-upload-alt text-green-600 mr-2"></i>Backup Autom√°tico - Google Planilhas
                            </h4>
                            
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">URL da Planilha Google</label>
                                <input type="url" id="googleSheetsUrl" placeholder="https://docs.google.com/spreadsheets/d/..." 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                <p class="text-xs text-gray-500 mt-1">Cole aqui o link da sua planilha Google (deve estar configurada para aceitar dados via Apps Script)</p>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Backup Autom√°tico</label>
                                    <select id="autoBackupInterval" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                                        <option value="disabled">Desabilitado</option>
                                        <option value="daily">Di√°rio</option>
                                        <option value="weekly">Semanal</option>
                                        <option value="monthly">Mensal</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">√öltimo Backup</label>
                                    <input type="text" id="lastBackupDate" readonly 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600"
                                           placeholder="Nunca">
                                </div>
                            </div>
                            
                            <div class="flex space-x-3 mb-4">
                                <button onclick="testGoogleSheetsConnection()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-plug mr-2"></i>Testar Conex√£o
                                </button>
                                <button onclick="performManualBackup()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-cloud-upload-alt mr-2"></i>Backup Manual
                                </button>
                                <button onclick="showBackupInstructions()" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-question-circle mr-2"></i>Como Configurar
                                </button>
                            </div>
                            
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                <div class="flex items-start">
                                    <i class="fas fa-info-circle text-blue-600 mr-2 mt-1"></i>
                                    <div class="text-sm text-blue-800">
                                        <p class="font-medium mb-2">O que √© salvo no backup:</p>
                                        <ul class="list-disc list-inside space-y-1 text-xs">
                                            <li>üì¶ Produtos e categorias</li>
                                            <li>üõí Pedidos e hist√≥rico</li>
                                            <li>üë• Clientes cadastrados</li>
                                            <li>üìä Movimenta√ß√µes de estoque</li>
                                            <li>‚öôÔ∏è Configura√ß√µes da loja</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Admin Login Settings -->
                        <div class="mb-8 p-6 bg-red-50 border border-red-200 rounded-lg">
                            <h4 class="text-lg font-semibold text-red-800 mb-4">
                                <i class="fas fa-shield-alt text-red-600 mr-2"></i>Configura√ß√µes de Acesso
                            </h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Usu√°rio Administrador</label>
                                    <input type="text" id="adminUsernameInput" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Nova Senha</label>
                                    <input type="password" id="adminPasswordInput" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                                           placeholder="Digite uma nova senha">
                                </div>
                            </div>
                            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                                <p class="text-sm text-yellow-800">
                                    <i class="fas fa-exclamation-triangle mr-2"></i>
                                    <strong>Importante:</strong> Altere as credenciais padr√£o por seguran√ßa. 
                                    Use uma senha forte com pelo menos 8 caracteres.
                                </p>
                            </div>
                        </div>

                        <!-- Customer Data Management -->
                        <div class="mb-8 p-6 bg-purple-50 border border-purple-200 rounded-lg">
                            <h4 class="text-lg font-semibold text-purple-800 mb-4">
                                <i class="fas fa-users text-purple-600 mr-2"></i>Dados Salvos do Cliente
                            </h4>
                            <div id="saved-customer-info" class="mb-4">
                                <!-- Customer info will be loaded here -->
                            </div>
                            <div class="flex space-x-3">
                                <button onclick="showSavedCustomerData()" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-eye mr-2"></i>Ver Dados Salvos
                                </button>
                                <button onclick="clearSavedCustomerData()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-colors">
                                    <i class="fas fa-trash mr-2"></i>Limpar Dados Salvos
                                </button>
                            </div>
                        </div>
                        
                        <!-- Delivery Settings -->
                        <div class="mb-8 p-6 bg-blue-50 border border-blue-200 rounded-lg">
                            <h4 class="text-lg font-semibold text-blue-800 mb-4">
                                <i class="fas fa-truck text-blue-600 mr-2"></i>Configura√ß√µes de Entrega
                            </h4>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Taxa Base (R$)</label>
                                    <input type="number" id="baseDeliveryFee" step="0.01" min="0" value="5.00"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Taxa por KM (R$)</label>
                                    <input type="number" id="kmDeliveryFee" step="0.01" min="0" value="2.00"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Entrega Gr√°tis Acima (R$)</label>
                                    <input type="number" id="freeDeliveryThreshold" step="0.01" min="0" value="100.00"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                </div>
                            </div>
                        </div>

                        <form id="settings-form" class="space-y-6">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Nome da Confeitaria</label>
                                    <input type="text" id="confeitariaNameInput" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500" value="Doce Encanto">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Telefone</label>
                                    <input type="tel" id="phoneInput" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500" value="(11) 99999-9999">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                    <input type="email" id="emailInput" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500" value="contato@doceencanto.com">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Endere√ßo</label>
                                    <input type="text" id="addressInput" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500" value="Rua das Flores, 123">
                                </div>
                            </div>
                            
                            <!-- Logo Upload -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Logo da Confeitaria</label>
                                <input type="file" id="logoInput" accept="image/*" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500" onchange="handleLogoUpload(this)">
                                <p class="text-xs text-gray-500 mt-1">Formatos aceitos: JPG, PNG, GIF. Tamanho recomendado: 200x200px</p>
                                <div id="logo-preview" class="mt-3 hidden">
                                    <img id="preview-logo" src="" alt="Preview Logo" class="w-32 h-32 object-contain rounded-lg border bg-white">
                                    <button type="button" onclick="removeLogoPreview()" class="mt-2 text-red-500 hover:text-red-700 text-sm">
                                        <i class="fas fa-trash mr-1"></i>Remover Logo
                                    </button>
                                </div>
                            </div>
                            <button type="submit" class="bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-lg transition-colors">
                                <i class="fas fa-save mr-2"></i>Salvar Configura√ß√µes
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
                <div class="text-center mb-6">
                    <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-exclamation-triangle text-red-500 text-2xl"></i>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Confirmar Exclus√£o</h3>
                    <p class="text-gray-600" id="confirmation-message">Tem certeza que deseja excluir este item?</p>
                </div>
                
                <div class="flex space-x-4">
                    <button onclick="hideConfirmationModal()" class="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-times mr-2"></i>Cancelar
                    </button>
                    <button onclick="confirmDeletion()" class="flex-1 bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-trash mr-2"></i>Excluir
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Customer Modal -->
    <div id="customer-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full p-6 max-h-screen overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-gray-800" id="customer-modal-title">Novo Cliente</h3>
                    <button onclick="hideCustomerModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <form id="customer-form" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nome Completo *</label>
                            <input type="text" id="customerFullName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Telefone *</label>
                            <input type="tel" id="customerPhoneNumber" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Email *</label>
                            <input type="email" id="customerEmailAddress" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">CPF</label>
                            <input type="text" id="customerCPF" maxlength="14" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500" oninput="formatCPF(this)">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Data de Nascimento</label>
                        <input type="date" id="customerBirthDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">CEP</label>
                            <input type="text" id="customerCEP" maxlength="9" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500" onblur="fillAddressFromCEP(this)">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Cidade</label>
                            <input type="text" id="customerCity" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Endere√ßo</label>
                        <input type="text" id="customerAddress" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                    
                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">N√∫mero</label>
                            <input type="text" id="customerNumber" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Complemento</label>
                            <input type="text" id="customerComplement" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Bairro</label>
                            <input type="text" id="customerNeighborhood" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Observa√ß√µes</label>
                        <textarea id="customerNotes" rows="3" placeholder="Prefer√™ncias, alergias, observa√ß√µes especiais..." class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"></textarea>
                    </div>
                    
                    <button type="submit" class="w-full bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-save mr-2"></i>Salvar Cliente
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Quick Credential Change Modal -->
    <div id="quick-credential-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
                <div class="text-center mb-6">
                    <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-key text-blue-600 text-2xl"></i>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Alterar Credenciais</h3>
                    <p class="text-gray-600">Defina suas novas credenciais de acesso</p>
                </div>
                
                <form id="quick-credential-form" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Novo Usu√°rio</label>
                        <input type="text" id="quick-username" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                               placeholder="Digite o novo usu√°rio">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Nova Senha</label>
                        <input type="password" id="quick-password" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                               placeholder="Digite a nova senha (m√≠n. 6 caracteres)">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Confirmar Senha</label>
                        <input type="password" id="quick-password-confirm" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                               placeholder="Confirme a nova senha">
                    </div>
                    
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                        <p class="text-yellow-800 text-xs">
                            <i class="fas fa-exclamation-triangle mr-2"></i>
                            <strong>Importante:</strong> Anote suas novas credenciais em local seguro. 
                            Ap√≥s alterar, voc√™ precisar√° usar as novas credenciais para fazer login.
                        </p>
                    </div>
                    
                    <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-save mr-2"></i>Salvar Credenciais
                    </button>
                </form>
                
                <div class="mt-4 pt-4 border-t">
                    <button onclick="hideQuickCredentialModal()" class="w-full bg-gray-500 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors">
                        <i class="fas fa-times mr-2"></i>Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Backup Instructions Modal -->
    <div id="backup-instructions-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-4xl w-full p-6 max-h-screen overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-gray-800">
                        <i class="fas fa-question-circle text-purple-600 mr-2"></i>Como Configurar Backup no Google Planilhas
                    </h3>
                    <button onclick="hideBackupInstructions()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                
                <div class="space-y-6">
                    <!-- Step 1 -->
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-blue-800 mb-3">
                            <span class="bg-blue-600 text-white rounded-full w-6 h-6 inline-flex items-center justify-center text-sm mr-2">1</span>
                            Criar uma Nova Planilha Google
                        </h4>
                        <ol class="list-decimal list-inside space-y-2 text-sm text-blue-700 ml-8">
                            <li>Acesse <a href="https://sheets.google.com" target="_blank" class="text-blue-600 underline">sheets.google.com</a></li>
                            <li>Clique em "Planilha em branco" para criar uma nova planilha</li>
                            <li>Renomeie a planilha para "Backup Confeitaria" ou nome de sua prefer√™ncia</li>
                            <li>Copie a URL da planilha (ser√° algo como: https://docs.google.com/spreadsheets/d/ABC123...)</li>
                        </ol>
                    </div>

                    <!-- Step 2 -->
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-green-800 mb-3">
                            <span class="bg-green-600 text-white rounded-full w-6 h-6 inline-flex items-center justify-center text-sm mr-2">2</span>
                            Configurar Apps Script
                        </h4>
                        <ol class="list-decimal list-inside space-y-2 text-sm text-green-700 ml-8">
                            <li>Na planilha, v√° em <strong>Extens√µes ‚Üí Apps Script</strong></li>
                            <li>Apague o c√≥digo padr√£o e cole o c√≥digo fornecido abaixo</li>
                            <li>Clique em <strong>Salvar</strong> (√≠cone de disquete)</li>
                            <li>Clique em <strong>Implantar ‚Üí Nova implanta√ß√£o</strong></li>
                            <li>Escolha tipo: <strong>Aplicativo da Web</strong></li>
                            <li>Executar como: <strong>Eu</strong></li>
                            <li>Quem tem acesso: <strong>Qualquer pessoa</strong></li>
                            <li>Clique em <strong>Implantar</strong> e copie a URL gerada</li>
                        </ol>
                    </div>

                    <!-- Step 3 -->
                    <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-purple-800 mb-3">
                            <span class="bg-purple-600 text-white rounded-full w-6 h-6 inline-flex items-center justify-center text-sm mr-2">3</span>
                            C√≥digo do Apps Script
                        </h4>
                        <div class="bg-gray-900 text-green-400 p-4 rounded-lg text-xs font-mono overflow-x-auto">
                            <pre id="apps-script-code">function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    
    // Limpar planilhas existentes
    const sheets = spreadsheet.getSheets();
    sheets.forEach(sheet => {
      if (sheet.getName() !== 'Backup_Log') {
        spreadsheet.deleteSheet(sheet);
      }
    });
    
    // Criar planilha de log se n√£o existir
    let logSheet;
    try {
      logSheet = spreadsheet.getSheetByName('Backup_Log');
    } catch (e) {
      logSheet = spreadsheet.insertSheet('Backup_Log');
      logSheet.getRange(1, 1, 1, 3).setValues([['Data', 'Hora', 'Status']]);
    }
    
    // Registrar backup
    const now = new Date();
    logSheet.appendRow([
      Utilities.formatDate(now, Session.getScriptTimeZone(), 'dd/MM/yyyy'),
      Utilities.formatDate(now, Session.getScriptTimeZone(), 'HH:mm:ss'),
      'Backup realizado com sucesso'
    ]);
    
    // Criar planilhas para cada tipo de dado
    if (data.products && Object.keys(data.products).length > 0) {
      const productsSheet = spreadsheet.insertSheet('Produtos');
      const productHeaders = ['ID', 'Nome', 'Pre√ßo', 'Categoria', 'Tipo', 'Descri√ß√£o', 'Estoque', 'Estoque M√≠nimo'];
      productsSheet.getRange(1, 1, 1, productHeaders.length).setValues([productHeaders]);
      
      const productRows = Object.values(data.products).map(product => [
        product.id,
        product.name,
        product.price,
        product.category,
        product.type,
        product.description || '',
        product.stock,
        product.minStock
      ]);
      
      if (productRows.length > 0) {
        productsSheet.getRange(2, 1, productRows.length, productHeaders.length).setValues(productRows);
      }
    }
    
    if (data.orders && Object.keys(data.orders).length > 0) {
      const ordersSheet = spreadsheet.insertSheet('Pedidos');
      const orderHeaders = ['ID', 'Data', 'Cliente', 'Telefone', 'Email', 'Total', 'Status', 'Tipo', 'Pagamento'];
      ordersSheet.getRange(1, 1, 1, orderHeaders.length).setValues([orderHeaders]);
      
      const orderRows = Object.values(data.orders).map(order => [
        order.id,
        order.date,
        order.customer.name,
        order.customer.phone,
        order.customer.email,
        order.total,
        order.status,
        order.type,
        order.paymentMethod
      ]);
      
      if (orderRows.length > 0) {
        ordersSheet.getRange(2, 1, orderRows.length, orderHeaders.length).setValues(orderRows);
      }
    }
    
    if (data.customers && Object.keys(data.customers).length > 0) {
      const customersSheet = spreadsheet.insertSheet('Clientes');
      const customerHeaders = ['ID', 'Nome', 'Telefone', 'Email', 'CPF', 'Endere√ßo', 'Cidade', 'Data Cadastro'];
      customersSheet.getRange(1, 1, 1, customerHeaders.length).setValues([customerHeaders]);
      
      const customerRows = Object.values(data.customers).map(customer => [
        customer.id,
        customer.name,
        customer.phone,
        customer.email,
        customer.cpf || '',
        customer.address || '',
        customer.city || '',
        customer.createdAt ? new Date(customer.createdAt).toLocaleDateString('pt-BR') : ''
      ]);
      
      if (customerRows.length > 0) {
        customersSheet.getRange(2, 1, customerRows.length, customerHeaders.length).setValues(customerRows);
      }
    }
    
    return ContentService
      .createTextOutput(JSON.stringify({success: true, message: 'Backup realizado com sucesso!'}))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({success: false, message: error.toString()}))
      .setMimeType(ContentService.MimeType.JSON);
  }
}</pre>
                        </div>
                        <div class="mt-3 flex space-x-2">
                            <button onclick="copyAppsScriptCode()" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded text-sm transition-colors">
                                <i class="fas fa-copy mr-2"></i>Copiar C√≥digo
                            </button>
                            <button onclick="downloadAppsScriptCode()" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded text-sm transition-colors">
                                <i class="fas fa-download mr-2"></i>Baixar Arquivo
                            </button>
                        </div>
                    </div>

                    <!-- Step 4 -->
                    <div class="bg-orange-50 border border-orange-200 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-orange-800 mb-3">
                            <span class="bg-orange-600 text-white rounded-full w-6 h-6 inline-flex items-center justify-center text-sm mr-2">4</span>
                            Configurar no Sistema
                        </h4>
                        <ol class="list-decimal list-inside space-y-2 text-sm text-orange-700 ml-8">
                            <li>Cole a URL do Apps Script no campo "URL da Planilha Google" acima</li>
                            <li>Escolha a frequ√™ncia do backup autom√°tico</li>
                            <li>Clique em "Testar Conex√£o" para verificar se est√° funcionando</li>
                            <li>Fa√ßa um "Backup Manual" para testar</li>
                            <li>Verifique se os dados apareceram na sua planilha Google</li>
                        </ol>
                    </div>

                    <!-- Important Notes -->
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-yellow-800 mb-3">
                            <i class="fas fa-exclamation-triangle text-yellow-600 mr-2"></i>Observa√ß√µes Importantes
                        </h4>
                        <ul class="list-disc list-inside space-y-2 text-sm text-yellow-700">
                            <li><strong>Seguran√ßa:</strong> A planilha ficar√° privada na sua conta Google</li>
                            <li><strong>Limite:</strong> Google Sheets suporta at√© 10 milh√µes de c√©lulas por planilha</li>
                            <li><strong>Backup Autom√°tico:</strong> Funciona apenas quando o sistema estiver aberto</li>
                            <li><strong>Dados Sens√≠veis:</strong> Senhas e dados de pagamento n√£o s√£o inclu√≠dos no backup</li>
                            <li><strong>Restaura√ß√£o:</strong> Para restaurar, voc√™ precisar√° importar os dados manualmente</li>
                        </ul>
                    </div>
                </div>
                
                <div class="mt-6 pt-4 border-t">
                    <button onclick="hideBackupInstructions()" class="w-full bg-gray-500 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-times mr-2"></i>Fechar Instru√ß√µes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Admin Login Modal -->
    <div id="admin-login-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
                <div class="text-center mb-6">
                    <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-lock text-purple-600 text-2xl"></i>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Acesso Administrativo</h3>
                    <p class="text-gray-600">Digite suas credenciais para acessar o painel</p>
                </div>
                
                <form id="admin-login-form" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Usu√°rio</label>
                        <input type="text" id="admin-username" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                               placeholder="Digite seu usu√°rio">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Senha</label>
                        <input type="password" id="admin-password" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                               placeholder="Digite sua senha">
                    </div>
                    
                    <div id="login-error" class="hidden bg-red-50 border border-red-200 rounded-lg p-3">
                        <p class="text-red-800 text-sm">
                            <i class="fas fa-exclamation-triangle mr-2"></i>
                            Usu√°rio ou senha incorretos!
                        </p>
                    </div>
                    
                    <button type="submit" class="w-full bg-purple-500 hover:bg-purple-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-sign-in-alt mr-2"></i>Entrar
                    </button>
                </form>
                
                <div class="mt-6 pt-4 border-t">
                    <button onclick="hideAdminLoginModal()" class="w-full bg-gray-500 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors">
                        <i class="fas fa-times mr-2"></i>Cancelar
                    </button>
                </div>
                
                <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p class="text-blue-800 text-xs text-center mb-3">
                        <i class="fas fa-info-circle mr-1"></i>
                        <strong>Voc√™ pode alterar depois ou agora:</strong><br>
                        ‚Ä¢ Credenciais padr√£o: admin / admin123<br>
                        ‚Ä¢ Altere nas configura√ß√µes ap√≥s o primeiro acesso<br>
                        ‚Ä¢ Ou clique no bot√£o abaixo para alterar agora
                    </p>
                    <button onclick="showQuickCredentialChange()" class="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg transition-colors text-sm">
                        <i class="fas fa-key mr-2"></i>Alterar Credenciais Agora
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Stock Movement Modal -->
    <div id="stock-movement-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-gray-800">Movimenta√ß√£o de Estoque</h3>
                    <button onclick="hideStockMovementModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <form id="stock-movement-form" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Produto</label>
                        <select id="stockProductSelect" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500">
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Tipo de Movimenta√ß√£o</label>
                        <select id="movementType" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500">
                            <option value="entrada">Entrada (+)</option>
                            <option value="saida">Sa√≠da (-)</option>
                            <option value="ajuste">Ajuste</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Quantidade</label>
                        <input type="number" id="movementQuantity" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Motivo</label>
                        <input type="text" id="movementReason" placeholder="Ex: Compra, Venda, Perda..." class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500">
                    </div>
                    <button type="submit" class="w-full bg-orange-500 hover:bg-orange-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-exchange-alt mr-2"></i>Registrar Movimenta√ß√£o
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Category Modal -->
    <div id="category-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-gray-800" id="category-modal-title">Nova Categoria</h3>
                    <button onclick="hideCategoryModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <form id="category-form" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Nome da Categoria *</label>
                        <input type="text" id="categoryName" required placeholder="Ex: Tortas, P√£es, etc." 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Descri√ß√£o</label>
                        <textarea id="categoryDescription" rows="3" placeholder="Descreva esta categoria..." 
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"></textarea>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">√çcone (FontAwesome)</label>
                            <input type="text" id="categoryIcon" placeholder="fas fa-birthday-cake" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                            <p class="text-xs text-gray-500 mt-1">Ex: fas fa-birthday-cake</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Emoji</label>
                            <input type="text" id="categoryEmoji" placeholder="üéÇ" maxlength="2"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-center text-2xl">
                        </div>
                    </div>
                    
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-700 mb-2">Pr√©-visualiza√ß√£o:</h4>
                        <div class="flex items-center space-x-3 p-3 bg-white rounded border">
                            <div class="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                                <i id="preview-icon" class="fas fa-tag text-purple-600"></i>
                                <span id="preview-emoji" class="text-xl hidden"></span>
                            </div>
                            <div>
                                <div id="preview-name" class="font-medium text-gray-800">Nome da Categoria</div>
                                <div id="preview-description" class="text-sm text-gray-600">Descri√ß√£o da categoria</div>
                            </div>
                        </div>
                    </div>
                    
                    <button type="submit" class="w-full bg-purple-500 hover:bg-purple-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-save mr-2"></i>Salvar Categoria
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Product Modal -->
    <div id="product-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full p-6 max-h-screen overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-gray-800" id="product-modal-title">Novo Produto</h3>
                    <button onclick="hideProductModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <form id="product-form" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nome do Produto</label>
                            <input type="text" id="productName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Pre√ßo (R$)</label>
                            <input type="number" id="productPrice" step="0.01" min="0" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500">
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Categoria</label>
                            <select id="productCategory" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500">
                                <option value="">Selecione uma categoria</option>
                                <!-- Categories will be loaded dynamically -->
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Tipo de Produto</label>
                            <select id="productType" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500">
                                <option value="">Selecione o tipo</option>
                                <option value="pronta_entrega">Pronta Entrega</option>
                                <option value="encomenda">Por Encomenda</option>
                                <option value="ambos">Ambos</option>
                            </select>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Descri√ß√£o</label>
                        <textarea id="productDescription" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500"></textarea>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Detalhes do Produto</label>
                        <textarea id="productDetails" rows="4" placeholder="Ingredientes, informa√ß√µes nutricionais, observa√ß√µes especiais..." class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500"></textarea>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Foto do Produto</label>
                        <input type="file" id="productImage" accept="image/*" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500" onchange="handleImageUpload(this)">
                        <p class="text-xs text-gray-500 mt-1">Formatos aceitos: JPG, PNG, GIF. Deixe em branco para usar emoji padr√£o</p>
                        <div id="image-preview" class="mt-3 hidden">
                            <img id="preview-img" src="" alt="Preview" class="w-32 h-32 object-cover rounded-lg border">
                            <button type="button" onclick="removeImagePreview()" class="mt-2 text-red-500 hover:text-red-700 text-sm">
                                <i class="fas fa-trash mr-1"></i>Remover Imagem
                            </button>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Estoque Inicial</label>
                            <input type="number" id="productStock" min="0" value="0" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Estoque M√≠nimo</label>
                            <input type="number" id="productMinStock" min="0" value="5" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500">
                        </div>
                    </div>
                    
                    <button type="submit" class="w-full bg-pink-500 hover:bg-pink-600 text-white py-3 px-4 rounded-lg transition-colors">
                        <i class="fas fa-save mr-2"></i>Salvar Produto
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Global Variables
        let products = {};
        let orders = {};
        let cart = [];
        let stockMovements = [];
        let currentEditingProduct = null;
        let currentEditingCategory = null;
        let customerData = {}; // Dados salvos do cliente
        let customers = {}; // Cadastro completo de clientes
        let currentEditingCustomer = null;
        let pendingDeletion = null; // Para controlar exclus√µes pendentes
        let categories = {
            'bolos': { id: 'bolos', name: 'Bolos', icon: 'fas fa-birthday-cake', emoji: 'üéÇ', description: 'Bolos artesanais e personalizados' },
            'doces': { id: 'doces', name: 'Doces', icon: 'fas fa-candy-cane', emoji: 'üç´', description: 'Doces finos e brigadeiros gourmet' },
            'salgados': { id: 'salgados', name: 'Salgados', icon: 'fas fa-hamburger', emoji: 'ü•ü', description: 'Salgados assados e fritos' },
            'bebidas': { id: 'bebidas', name: 'Bebidas', icon: 'fas fa-coffee', emoji: 'ü•§', description: 'Sucos, caf√©s e vitaminas' }
        };
        let settings = {
            confeitariaName: 'Doce Encanto',
            phone: '(11) 99999-9999',
            email: 'contato@doceencanto.com',
            address: 'Rua das Flores, 123',
            logo: '',
            baseDeliveryFee: 5.00,
            kmDeliveryFee: 2.00,
            freeDeliveryThreshold: 100.00,
            // Admin Login
            adminUsername: 'admin',
            adminPassword: 'admin123',
            // Asaas Integration
            asaasApiKey: '',
            asaasEnvironment: 'sandbox', // sandbox or production
            asaasWalletId: '',
            // Payment Fees
            pixFee: 0, // Fixed fee for PIX
            pixDiscountPercent: 5, // Discount percentage for PIX
            creditCardFeePercent: 3.99, // Percentage fee for credit card
            debitCardFeePercent: 2.99, // Percentage fee for debit card
            boletoFee: 3.50, // Fixed fee for boleto
            // Payment Options
            enablePix: true,
            enableCreditCard: true,
            enableDebitCard: true,
            enableBoleto: false,
            enableEncomenda: true,
            // Credit Card Installments
            maxInstallments: 12,
            minInstallmentValue: 10.00,
            installmentFeePercent: 0, // Additional fee per installment
            // Google Sheets Backup
            googleSheetsUrl: '',
            autoBackupInterval: 'disabled', // disabled, daily, weekly, monthly
            lastBackupDate: null,
            backupEnabled: false,
            // Promotional Carousel
            carouselImages: [
                { image: '', title: 'Promo√ß√£o Especial', subtitle: 'Configure suas imagens promocionais no painel admin' },
                { image: '', title: 'Bolos Especiais', subtitle: 'Encomende seu bolo personalizado' },
                { image: '', title: 'Entrega Gr√°tis', subtitle: 'Em pedidos acima de R$ 100,00' },
                { image: '', title: 'Desconto PIX', subtitle: '5% de desconto pagando via PIX' }
            ]
        };
        
        let isAdminLoggedIn = false;
        let currentSlide = 0;
        let carouselInterval;

        // Initialize the page when it loads
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            updateCartDisplay();
            renderStoreNavigation(); // Load category navigation
            renderProducts('all'); // Load all products initially
            updateStoreLogo(); // Update logo display
            initializeAutoBackup(); // Initialize automatic backup
            initializeCarousel(); // Initialize promotional carousel
        });

        // Carousel Functions
        function initializeCarousel() {
            updateCarouselImages();
            startCarouselAutoplay();
        }

        function updateCarouselImages() {
            settings.carouselImages.forEach((slide, index) => {
                const img = document.getElementById(`carousel-img-${index}`);
                const placeholder = document.getElementById(`carousel-placeholder-${index}`);
                
                if (slide.image) {
                    img.src = slide.image;
                    img.classList.remove('hidden');
                    placeholder.classList.add('hidden');
                } else {
                    img.classList.add('hidden');
                    placeholder.classList.remove('hidden');
                    
                    // Update placeholder content
                    const titleElement = placeholder.querySelector('h3');
                    const subtitleElement = placeholder.querySelector('p');
                    if (titleElement) titleElement.textContent = slide.title;
                    if (subtitleElement) subtitleElement.textContent = slide.subtitle;
                }
            });
        }

        function nextSlide() {
            currentSlide = (currentSlide + 1) % 4;
            showSlide(currentSlide);
        }

        function previousSlide() {
            currentSlide = (currentSlide - 1 + 4) % 4;
            showSlide(currentSlide);
        }

        function goToSlide(slideIndex) {
            currentSlide = slideIndex;
            showSlide(currentSlide);
        }

        function showSlide(slideIndex) {
            // Hide all slides
            document.querySelectorAll('.carousel-slide').forEach((slide, index) => {
                slide.classList.remove('active');
                slide.style.opacity = '0';
            });
            
            // Show current slide
            const activeSlide = document.getElementById(`slide-${slideIndex}`);
            if (activeSlide) {
                activeSlide.classList.add('active');
                activeSlide.style.opacity = '1';
            }
            
            // Update dots
            document.querySelectorAll('.carousel-dot').forEach((dot, index) => {
                dot.classList.remove('active');
                if (index === slideIndex) {
                    dot.classList.add('active');
                    dot.classList.remove('bg-white/50');
                    dot.classList.add('bg-white/80');
                } else {
                    dot.classList.remove('bg-white/80');
                    dot.classList.add('bg-white/50');
                }
            });
            
            // Restart autoplay
            restartCarouselAutoplay();
        }

        function startCarouselAutoplay() {
            carouselInterval = setInterval(() => {
                nextSlide();
            }, 5000); // Change slide every 5 seconds
        }

        function stopCarouselAutoplay() {
            if (carouselInterval) {
                clearInterval(carouselInterval);
            }
        }

        function restartCarouselAutoplay() {
            stopCarouselAutoplay();
            startCarouselAutoplay();
        }

        function handleCarouselImageUpload(input, slideIndex) {
            const file = input.files[0];
            if (!file) return;
            
            // Validate file type
            if (!file.type.startsWith('image/')) {
                showNotification('Por favor, selecione apenas arquivos de imagem!', 'error');
                input.value = '';
                return;
            }
            
            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                showNotification('A imagem deve ter no m√°ximo 5MB!', 'error');
                input.value = '';
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.getElementById(`carousel-preview-${slideIndex}`);
                const previewImg = preview.querySelector('img');
                
                previewImg.src = e.target.result;
                preview.classList.remove('hidden');
                
                // Store the base64 data
                input.dataset.imageData = e.target.result;
            };
            
            reader.readAsDataURL(file);
        }

        function removeCarouselImage(slideIndex) {
            const input = document.getElementById(`carousel-image-${slideIndex}`);
            const preview = document.getElementById(`carousel-preview-${slideIndex}`);
            
            input.value = '';
            delete input.dataset.imageData;
            preview.classList.add('hidden');
            preview.querySelector('img').src = '';
        }

        function loadCarouselSettings() {
            const container = document.getElementById('carousel-images-container');
            container.innerHTML = '';
            
            settings.carouselImages.forEach((slide, index) => {
                const slideDiv = document.createElement('div');
                slideDiv.className = 'border border-indigo-200 rounded-lg p-4 bg-white';
                
                slideDiv.innerHTML = `
                    <h5 class="font-semibold text-indigo-800 mb-3">
                        <i class="fas fa-image mr-2"></i>Slide ${index + 1}
                    </h5>
                    
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">T√≠tulo</label>
                            <input type="text" id="carousel-title-${index}" value="${slide.title}" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Subt√≠tulo</label>
                            <input type="text" id="carousel-subtitle-${index}" value="${slide.subtitle}" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Imagem</label>
                            <input type="file" id="carousel-image-${index}" accept="image/*" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" 
                                   onchange="handleCarouselImageUpload(this, ${index})">
                            
                            <div id="carousel-preview-${index}" class="mt-3 ${slide.image ? '' : 'hidden'}">
                                <img src="${slide.image}" alt="Preview" class="w-full h-32 object-cover rounded-lg border">
                                <button type="button" onclick="removeCarouselImage(${index})" class="mt-2 text-red-500 hover:text-red-700 text-sm">
                                    <i class="fas fa-trash mr-1"></i>Remover Imagem
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
                container.appendChild(slideDiv);
                
                // Set image data if exists
                if (slide.image) {
                    const input = document.getElementById(`carousel-image-${index}`);
                    input.dataset.imageData = slide.image;
                }
            });
        }

        // Notification System
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 px-6 py-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full`;
            
            const colors = {
                success: 'bg-green-500 text-white',
                error: 'bg-red-500 text-white',
                warning: 'bg-yellow-500 text-white',
                info: 'bg-blue-500 text-white'
            };
            
            const icons = {
                success: 'fas fa-check-circle',
                error: 'fas fa-times-circle',
                warning: 'fas fa-exclamation-triangle',
                info: 'fas fa-info-circle'
            };
            
            notification.className += ` ${colors[type]}`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="${icons[type]} mr-3"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);
            
            // Animate out and remove
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        // Sample Products Data
        const sampleProducts = {
            '1': {
                id: '1',
                name: 'Bolo de Chocolate Premium',
                price: 45.00,
                category: 'bolos',
                type: 'encomenda',
                description: 'Delicioso bolo de chocolate com cobertura cremosa',
                details: 'Ingredientes: Chocolate belga, ovos caipira, farinha especial, a√ß√∫car cristal, manteiga francesa. Rico em cacau 70%. Serve 8 pessoas. Peso aproximado: 1,2kg.',
                stock: 0,
                minStock: 0,
                image: '',
                emoji: 'üç∞'
            },
            '2': {
                id: '2',
                name: 'Bolo Red Velvet',
                price: 55.00,
                category: 'bolos',
                type: 'ambos',
                description: 'Bolo red velvet com cream cheese',
                details: 'Massa vermelha aveludada com cobertura de cream cheese. Decora√ß√£o especial. Serve 10 pessoas.',
                stock: 3,
                minStock: 5,
                image: '',
                emoji: 'üéÇ'
            },
            '3': {
                id: '3',
                name: 'Cupcake de Baunilha',
                price: 8.50,
                category: 'bolos',
                type: 'pronta_entrega',
                description: 'Cupcake fofo com cobertura de buttercream',
                details: 'Massa de baunilha com cobertura cremosa de buttercream. Decora√ß√£o colorida.',
                stock: 24,
                minStock: 10,
                image: '',
                emoji: 'üßÅ'
            },
            '4': {
                id: '4',
                name: 'Brigadeiro Gourmet',
                price: 3.50,
                category: 'doces',
                type: 'pronta_entrega',
                description: 'Brigadeiro artesanal com chocolate belga',
                details: 'Feito com chocolate belga 70% cacau, leite condensado artesanal e manteiga de primeira qualidade. Cobertura de granulado premium. Unidade de 25g.',
                stock: 50,
                minStock: 10,
                image: '',
                emoji: 'üç´'
            },
            '5': {
                id: '5',
                name: 'Trufa de Chocolate',
                price: 4.00,
                category: 'doces',
                type: 'pronta_entrega',
                description: 'Trufa cremosa com chocolate meio amargo',
                details: 'Ganache de chocolate meio amargo com cobertura de cacau em p√≥. Sabor intenso e cremoso.',
                stock: 40,
                minStock: 8,
                image: '',
                emoji: 'üç´'
            },
            '6': {
                id: '6',
                name: 'Beijinho Gourmet',
                price: 3.00,
                category: 'doces',
                type: 'ambos',
                description: 'Beijinho tradicional com coco fresco',
                details: 'Feito com leite condensado e coco fresco ralado. Cobertura de coco queimado.',
                stock: 2,
                minStock: 10,
                image: '',
                emoji: 'ü••'
            },
            '7': {
                id: '7',
                name: 'Coxinha de Frango',
                price: 8.00,
                category: 'salgados',
                type: 'ambos',
                description: 'Coxinha crocante com recheio generoso',
                details: 'Massa caseira crocante, recheio de frango desfiado temperado com ervas finas, catupiry cremoso. Frita na hora. Peso aproximado: 80g por unidade.',
                stock: 25,
                minStock: 5,
                image: '',
                emoji: 'ü•ü'
            },
            '8': {
                id: '8',
                name: 'Pastel de Queijo',
                price: 6.50,
                category: 'salgados',
                type: 'pronta_entrega',
                description: 'Pastel crocante recheado com queijo',
                details: 'Massa fina e crocante com recheio abundante de queijo mussarela. Frito na hora.',
                stock: 18,
                minStock: 8,
                image: '',
                emoji: 'ü•ü'
            },
            '9': {
                id: '9',
                name: 'Empada de Frango',
                price: 7.50,
                category: 'salgados',
                type: 'ambos',
                description: 'Empada tradicional com frango desfiado',
                details: 'Massa amanteigada com recheio de frango desfiado temperado com azeitonas e ervilhas.',
                stock: 0,
                minStock: 6,
                image: '',
                emoji: 'ü•ß'
            },
            '10': {
                id: '10',
                name: 'Suco Natural de Laranja',
                price: 12.00,
                category: 'bebidas',
                type: 'pronta_entrega',
                description: 'Suco natural da fruta, sem conservantes',
                details: 'Suco 100% natural de laranjas selecionadas, sem adi√ß√£o de a√ß√∫car ou conservantes. Rico em vitamina C. Copo de 300ml.',
                stock: 15,
                minStock: 3,
                image: '',
                emoji: 'ü•§'
            },
            '11': {
                id: '11',
                name: 'Caf√© Expresso',
                price: 5.00,
                category: 'bebidas',
                type: 'pronta_entrega',
                description: 'Caf√© expresso tradicional',
                details: 'Caf√© expresso feito com gr√£os selecionados, mo√≠do na hora. Servido em x√≠cara de 50ml.',
                stock: 30,
                minStock: 10,
                image: '',
                emoji: '‚òï'
            },
            '12': {
                id: '12',
                name: 'Vitamina de Frutas',
                price: 15.00,
                category: 'bebidas',
                type: 'ambos',
                description: 'Vitamina cremosa com frutas da esta√ß√£o',
                details: 'Vitamina feita com frutas frescas da esta√ß√£o, leite e mel. Rica em vitaminas. Copo de 400ml.',
                stock: 8,
                minStock: 5,
                image: '',
                emoji: 'ü•§'
            }
        };

        // CEP Database (simplified for demo)
        const cepDatabase = {
            '01000000': { city: 'S√£o Paulo', neighborhood: 'S√©', distance: 5 },
            '04038001': { city: 'S√£o Paulo', neighborhood: 'Vila Ol√≠mpia', distance: 8 },
            '22070900': { city: 'Rio de Janeiro', neighborhood: 'Copacabana', distance: 450 },
            '30112000': { city: 'Belo Horizonte', neighborhood: 'Centro', distance: 350 }
        };

        // Data Management Functions
        function loadData() {
            const savedProducts = localStorage.getItem('confeitaria_products');
            const savedOrders = localStorage.getItem('confeitaria_orders');
            const savedSettings = localStorage.getItem('confeitaria_settings');
            const savedMovements = localStorage.getItem('confeitaria_stock_movements');
            const savedCustomerData = localStorage.getItem('confeitaria_customer_data');
            const savedCategories = localStorage.getItem('confeitaria_categories');
            const savedCustomers = localStorage.getItem('confeitaria_customers');

            if (savedProducts) {
                products = JSON.parse(savedProducts);
            } else {
                products = { ...sampleProducts };
                saveData();
            }

            if (savedOrders) orders = JSON.parse(savedOrders);
            if (savedSettings) settings = { ...settings, ...JSON.parse(savedSettings) };
            if (savedMovements) stockMovements = JSON.parse(savedMovements);
            if (savedCustomerData) customerData = JSON.parse(savedCustomerData);
            if (savedCategories) categories = { ...categories, ...JSON.parse(savedCategories) };
            if (savedCustomers) customers = JSON.parse(savedCustomers);
        }

        function saveData() {
            localStorage.setItem('confeitaria_products', JSON.stringify(products));
            localStorage.setItem('confeitaria_orders', JSON.stringify(orders));
            localStorage.setItem('confeitaria_settings', JSON.stringify(settings));
            localStorage.setItem('confeitaria_stock_movements', JSON.stringify(stockMovements));
            localStorage.setItem('confeitaria_customer_data', JSON.stringify(customerData));
            localStorage.setItem('confeitaria_categories', JSON.stringify(categories));
            localStorage.setItem('confeitaria_customers', JSON.stringify(customers));
        }

        // CEP and Delivery Functions
        function formatCEP(cep) {
            return cep.replace(/\D/g, '').replace(/(\d{5})(\d{3})/, '$1-$2');
        }

        function calculateDeliveryFee() {
            const cepInput = document.getElementById('delivery-cep');
            const cityInput = document.getElementById('delivery-city');
            const neighborhoodInput = document.getElementById('delivery-neighborhood');
            const deliveryFeeSpan = document.getElementById('delivery-fee');
            
            let cep = cepInput.value.replace(/\D/g, '');
            
            if (cep.length === 8) {
                // Format CEP
                cepInput.value = formatCEP(cep);
                
                // Try to fetch real CEP data from ViaCEP API
                fetch(`https://viacep.com.br/ws/${cep}/json/`)
                    .then(response => response.json())
                    .then(data => {
                        if (!data.erro) {
                            cityInput.value = data.localidade;
                            neighborhoodInput.value = data.bairro;
                            
                            // Calculate distance based on city (simplified)
                            const distance = calculateDistanceByCity(data.localidade);
                            
                            // Calculate delivery fee
                            const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                            let deliveryFee = 0;
                            
                            if (subtotal < settings.freeDeliveryThreshold) {
                                deliveryFee = settings.baseDeliveryFee + (distance * settings.kmDeliveryFee);
                            }
                            
                            deliveryFeeSpan.textContent = deliveryFee > 0 ? `R$ ${deliveryFee.toFixed(2)}` : 'Gr√°tis';
                            updateCartTotal();
                        } else {
                            // Fallback to local database
                            const cepData = cepDatabase[cep] || { 
                                city: 'S√£o Paulo', 
                                neighborhood: 'Centro', 
                                distance: 10 
                            };
                            
                            cityInput.value = cepData.city;
                            neighborhoodInput.value = cepData.neighborhood;
                            
                            // Calculate delivery fee
                            const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                            let deliveryFee = 0;
                            
                            if (subtotal < settings.freeDeliveryThreshold) {
                                deliveryFee = settings.baseDeliveryFee + (cepData.distance * settings.kmDeliveryFee);
                            }
                            
                            deliveryFeeSpan.textContent = deliveryFee > 0 ? `R$ ${deliveryFee.toFixed(2)}` : 'Gr√°tis';
                            updateCartTotal();
                        }
                    })
                    .catch(error => {
                        // Fallback to local database in case of network error
                        const cepData = cepDatabase[cep] || { 
                            city: 'S√£o Paulo', 
                            neighborhood: 'Centro', 
                            distance: 10 
                        };
                        
                        cityInput.value = cepData.city;
                        neighborhoodInput.value = cepData.neighborhood;
                        
                        // Calculate delivery fee
                        const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                        let deliveryFee = 0;
                        
                        if (subtotal < settings.freeDeliveryThreshold) {
                            deliveryFee = settings.baseDeliveryFee + (cepData.distance * settings.kmDeliveryFee);
                        }
                        
                        deliveryFeeSpan.textContent = deliveryFee > 0 ? `R$ ${deliveryFee.toFixed(2)}` : 'Gr√°tis';
                        updateCartTotal();
                    });
            }
        }

        function calculateDistanceByCity(city) {
            const cityDistances = {
                'S√£o Paulo': 5,
                'Rio de Janeiro': 450,
                'Belo Horizonte': 350,
                'Bras√≠lia': 800,
                'Salvador': 1200,
                'Fortaleza': 2000,
                'Recife': 1800,
                'Porto Alegre': 900,
                'Curitiba': 300,
                'Goi√¢nia': 700
            };
            
            return cityDistances[city] || 15; // Default distance for unknown cities
        }

        function updateCartTotal() {
            const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const deliveryFeeText = document.getElementById('delivery-fee').textContent;
            const deliveryFee = deliveryFeeText === 'Gr√°tis' ? 0 : parseFloat(deliveryFeeText.replace('R$ ', ''));
            const total = subtotal + deliveryFee;
            
            document.getElementById('cart-subtotal').textContent = `R$ ${subtotal.toFixed(2)}`;
            document.getElementById('cart-total').textContent = `R$ ${total.toFixed(2)}`;
        }

        // Store Functions
        function renderProducts(category = 'all') {
            const container = document.getElementById('products-grid');
            container.innerHTML = '';

            if (category === 'all') {
                // Show all products organized by category
                Object.values(categories).forEach(cat => {
                    const categoryProducts = Object.values(products).filter(product => product.category === cat.id);
                    
                    if (categoryProducts.length > 0) {
                        // Create category section
                        const categorySection = document.createElement('div');
                        categorySection.className = 'col-span-full mb-8';
                        
                        categorySection.innerHTML = `
                            <div class="flex items-center mb-6">
                                <div class="flex items-center space-x-3">
                                    <div class="w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center">
                                        ${cat.emoji ? 
                                            `<span class="text-2xl">${cat.emoji}</span>` : 
                                            `<i class="${cat.icon} text-amber-700 text-xl"></i>`
                                        }
                                    </div>
                                    <div>
                                        <h2 class="text-2xl font-bold text-amber-800">${cat.name}</h2>
                                        <p class="text-gray-600">${cat.description || ''}</p>
                                    </div>
                                </div>
                                <div class="flex-1 h-px bg-gradient-to-r from-amber-300 to-transparent ml-6"></div>
                            </div>
                        `;
                        
                        container.appendChild(categorySection);
                        
                        // Add products for this category
                        categoryProducts.forEach(product => {
                            container.appendChild(createProductCard(product));
                        });
                    }
                });
                
                // Check if no products at all
                if (Object.values(products).length === 0) {
                    container.innerHTML = '<div class="col-span-full text-center py-8 text-gray-500">Nenhum produto cadastrado.</div>';
                }
            } else {
                // Show products for specific category
                const filteredProducts = Object.values(products).filter(product => product.category === category);
                
                if (filteredProducts.length === 0) {
                    container.innerHTML = '<div class="col-span-full text-center py-8 text-gray-500">Nenhum produto encontrado nesta categoria.</div>';
                    return;
                }
                
                filteredProducts.forEach(product => {
                    container.appendChild(createProductCard(product));
                });
            }
        }

        function createProductCard(product) {
            const productCard = document.createElement('div');
            productCard.className = 'bg-white rounded-xl shadow-lg overflow-hidden card-hover relative';
            
            const stockStatus = product.type === 'encomenda' ? '' : 
                product.stock === 0 ? 'Esgotado' : 
                product.stock <= product.minStock ? 'Estoque Baixo' : '';
            
            const stockClass = product.stock === 0 ? 'bg-red-100 text-red-800' : 
                product.stock <= product.minStock ? 'bg-yellow-100 text-yellow-800' : '';
            
            const typeColors = {
                'pronta_entrega': 'bg-green-500 text-white',
                'encomenda': 'bg-blue-500 text-white',
                'ambos': 'bg-purple-500 text-white'
            };
            
            const typeTexts = {
                'pronta_entrega': 'Pronta Entrega',
                'encomenda': 'Encomenda',
                'ambos': 'Ambos'
            };
            
            const isAvailable = product.type === 'encomenda' || product.stock > 0;
            
            // Display image or emoji
            const imageDisplay = product.image ? 
                `<img src="${product.image}" alt="${product.name}" class="w-full h-32 object-cover rounded-lg mb-3" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                 <div class="text-6xl hidden">${product.emoji}</div>` :
                `<div class="text-6xl">${product.emoji}</div>`;
            
            productCard.innerHTML = `
                <div class="product-type-badge">
                    <span class="px-2 py-1 rounded-full text-xs font-medium ${typeColors[product.type]}">
                        ${typeTexts[product.type]}
                    </span>
                </div>
                <div class="p-6">
                    <div class="text-center mb-4">
                        <div class="mb-3">
                            ${imageDisplay}
                        </div>
                        <h3 class="text-xl font-bold text-gray-800 mb-2">${product.name}</h3>
                        <p class="text-gray-600 text-sm mb-3">${product.description}</p>
                        <div class="flex justify-between items-center mb-3">
                            <span class="text-2xl font-bold text-amber-700">R$ ${product.price.toFixed(2)}</span>
                            ${stockStatus ? `<span class="px-2 py-1 rounded-full text-xs font-medium ${stockClass}">${stockStatus}</span>` : ''}
                        </div>
                    </div>
                    <div class="space-y-2">
                        <button onclick="showProductDetails('${product.id}')" class="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 py-2 px-4 rounded-lg transition-all duration-300">
                            <i class="fas fa-info-circle mr-2"></i>Ver Detalhes
                        </button>
                        <button onclick="addToCart('${product.id}')" 
                                ${!isAvailable ? 'disabled' : ''}
                                class="w-full ${!isAvailable ? 'bg-gray-400 cursor-not-allowed' : 'bg-gradient-to-r from-amber-600 to-orange-700 hover:from-amber-700 hover:to-orange-800'} text-white py-3 px-4 rounded-lg transition-all duration-300">
                            <i class="fas fa-cart-plus mr-2"></i>
                            ${!isAvailable ? 'Indispon√≠vel' : 'Adicionar ao Carrinho'}
                        </button>
                    </div>
                </div>
            `;
            
            return productCard;
        }

        function showProductDetails(productId) {
            const product = products[productId];
            const modal = document.getElementById('product-details-modal');
            const content = document.getElementById('product-details-content');
            
            const typeColors = {
                'pronta_entrega': 'bg-green-500 text-white',
                'encomenda': 'bg-blue-500 text-white',
                'ambos': 'bg-purple-500 text-white'
            };
            
            const typeTexts = {
                'pronta_entrega': 'Pronta Entrega',
                'encomenda': 'Por Encomenda',
                'ambos': 'Pronta Entrega e Encomenda'
            };
            
            const imageDisplay = product.image ? 
                `<img src="${product.image}" alt="${product.name}" class="w-full h-64 object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                 <div class="w-full h-64 bg-gray-100 hidden items-center justify-center">
                     <span class="text-8xl">${product.emoji}</span>
                 </div>` :
                `<div class="w-full h-64 bg-gray-100 flex items-center justify-center">
                     <span class="text-8xl">${product.emoji}</span>
                 </div>`;

            content.innerHTML = `
                <div class="relative">
                    ${imageDisplay}
                    <div class="absolute top-4 left-4">
                        <span class="px-3 py-1 rounded-full text-sm font-medium ${typeColors[product.type]}">
                            ${typeTexts[product.type]}
                        </span>
                    </div>
                </div>
                <div class="p-6">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h2 class="text-2xl font-bold text-gray-800 mb-2">${product.name}</h2>
                            <p class="text-gray-600">${product.description}</p>
                        </div>
                        <div class="text-right">
                            <span class="text-3xl font-bold text-amber-700">R$ ${product.price.toFixed(2)}</span>
                            ${product.type !== 'encomenda' && product.stock <= product.minStock ? 
                                `<p class="text-sm ${product.stock === 0 ? 'text-red-600' : 'text-yellow-600'}">
                                    ${product.stock === 0 ? 'Esgotado' : `Restam ${product.stock} unidades`}
                                 </p>` : ''
                            }
                        </div>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold text-gray-800 mb-2">Detalhes do Produto</h3>
                        <p class="text-gray-600 leading-relaxed">${product.details || 'Informa√ß√µes detalhadas n√£o dispon√≠veis.'}</p>
                    </div>
                    
                    ${product.type === 'encomenda' || product.type === 'ambos' ? 
                        `<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                            <h4 class="text-blue-800 font-semibold mb-2">
                                <i class="fas fa-info-circle mr-2"></i>Informa√ß√µes sobre Encomenda
                            </h4>
                            <p class="text-blue-700 text-sm">
                                Este produto pode ser feito sob encomenda. Pedidos devem ser feitos com pelo menos 3 dias de anteced√™ncia.
                                Pagamento: 50% antecipado + 50% na entrega.
                            </p>
                        </div>` : ''
                    }
                    
                    <div class="flex space-x-4">
                        <button onclick="addToCart('${product.id}')" 
                                ${(product.type !== 'encomenda' && product.stock === 0) ? 'disabled' : ''}
                                class="flex-1 ${(product.type !== 'encomenda' && product.stock === 0) ? 'bg-gray-400 cursor-not-allowed' : 'bg-gradient-to-r from-amber-600 to-orange-700 hover:from-amber-700 hover:to-orange-800'} text-white py-3 px-4 rounded-lg transition-all duration-300">
                            <i class="fas fa-cart-plus mr-2"></i>
                            ${(product.type !== 'encomenda' && product.stock === 0) ? 'Indispon√≠vel' : 'Adicionar ao Carrinho'}
                        </button>
                        <button onclick="closeProductDetails()" class="px-6 py-3 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-lg transition-colors">
                            Fechar
                        </button>
                    </div>
                </div>
            `;
            
            modal.classList.remove('hidden');
        }

        function closeProductDetails() {
            document.getElementById('product-details-modal').classList.add('hidden');
        }

        function showStoreSection(category) {
            // Remove active classes from all buttons
            document.querySelectorAll('.store-nav-btn').forEach(btn => {
                btn.classList.remove('active', 'bg-gradient-to-r', 'from-amber-600', 'to-orange-700', 'text-white');
                btn.classList.add('text-gray-600', 'hover:text-amber-700', 'hover:bg-amber-50');
            });
            
            // Find the clicked button and add active classes
            const clickedButton = document.querySelector(`[onclick="showStoreSection('${category}')"]`);
            if (clickedButton) {
                clickedButton.classList.remove('text-gray-600', 'hover:text-amber-700', 'hover:bg-amber-50');
                clickedButton.classList.add('active', 'bg-gradient-to-r', 'from-amber-600', 'to-orange-700', 'text-white');
            }
            
            renderProducts(category);
        }

        // Cart Functions
        function addToCart(productId) {
            const product = products[productId];
            
            // Check availability
            if (product.type !== 'encomenda' && product.stock === 0) {
                showNotification('Produto esgotado!', 'error');
                return;
            }

            const existingItem = cart.find(item => item.id === productId);
            
            if (existingItem) {
                if (product.type === 'encomenda' || existingItem.quantity < product.stock) {
                    existingItem.quantity++;
                } else {
                    showNotification('Quantidade m√°xima em estoque atingida!', 'warning');
                    return;
                }
            } else {
                cart.push({
                    id: productId,
                    name: product.name,
                    price: product.price,
                    quantity: 1,
                    type: product.type,
                    image: product.image,
                    emoji: product.emoji
                });
            }
            
            updateCartDisplay();
            showNotification('Produto adicionado ao carrinho!', 'success');
            closeProductDetails();
        }

        function removeFromCart(productId) {
            cart = cart.filter(item => item.id !== productId);
            updateCartDisplay();
        }

        function updateCartQuantity(productId, newQuantity) {
            const product = products[productId];
            const cartItem = cart.find(item => item.id === productId);
            
            if (newQuantity <= 0) {
                removeFromCart(productId);
                return;
            }
            
            if (product.type !== 'encomenda' && newQuantity > product.stock) {
                showNotification('Quantidade maior que o estoque dispon√≠vel!', 'warning');
                return;
            }
            
            cartItem.quantity = newQuantity;
            updateCartDisplay();
        }

        function updateCartDisplay() {
            const cartCount = document.getElementById('cart-count');
            const cartItems = document.getElementById('cart-items');
            
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            cartCount.textContent = totalItems;
            
            cartItems.innerHTML = '';
            
            if (cart.length === 0) {
                cartItems.innerHTML = '<p class="text-gray-500 text-center py-4">Carrinho vazio</p>';
                updateCartTotal();
                return;
            }
            
            cart.forEach(item => {
                const cartItem = document.createElement('div');
                cartItem.className = 'flex items-center justify-between p-3 bg-gray-50 rounded-lg';
                
                const typeColors = {
                    'pronta_entrega': 'text-green-600',
                    'encomenda': 'text-blue-600',
                    'ambos': 'text-purple-600'
                };
                
                cartItem.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <div class="w-12 h-12 flex items-center justify-center">
                            <span class="text-2xl">${item.emoji}</span>
                        </div>
                        <div>
                            <h4 class="font-medium text-gray-800">${item.name}</h4>
                            <p class="text-sm text-gray-600">R$ ${item.price.toFixed(2)}</p>
                            <p class="text-xs ${typeColors[item.type]}">${item.type === 'pronta_entrega' ? 'Pronta Entrega' : item.type === 'encomenda' ? 'Encomenda' : 'Ambos'}</p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button onclick="updateCartQuantity('${item.id}', ${item.quantity - 1})" class="text-red-500 hover:text-red-700">
                            <i class="fas fa-minus"></i>
                        </button>
                        <span class="mx-2 font-medium">${item.quantity}</span>
                        <button onclick="updateCartQuantity('${item.id}', ${item.quantity + 1})" class="text-green-500 hover:text-green-700">
                            <i class="fas fa-plus"></i>
                        </button>
                        <button onclick="removeFromCart('${item.id}')" class="text-red-500 hover:text-red-700 ml-2">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                cartItems.appendChild(cartItem);
            });
            
            updateCartTotal();
        }

        function toggleCart() {
            const modal = document.getElementById('cart-modal');
            modal.classList.toggle('hidden');
            
            if (!modal.classList.contains('hidden')) {
                // Set minimum date for delivery (3 days from now)
                const minDate = new Date();
                minDate.setDate(minDate.getDate() + 3);
                document.getElementById('delivery-date').min = minDate.toISOString().split('T')[0];
                
                // Check if cart has encomenda items
                const hasEncomenda = cart.some(item => item.type === 'encomenda' || item.type === 'ambos');
                const orderDataSection = document.getElementById('order-data-section');
                
                if (hasEncomenda) {
                    orderDataSection.style.display = 'block';
                } else {
                    orderDataSection.style.display = 'none';
                }
                
                // Render payment methods
                renderPaymentMethods();
                
                // Show indicator if there's saved customer data
                updateSavedDataIndicator();
            }
        }

        function updateSavedDataIndicator() {
            const indicator = document.getElementById('saved-data-indicator');
            const loadBtn = document.getElementById('load-data-btn');
            
            if (customerData.name) {
                indicator.classList.remove('hidden');
                loadBtn.title = `Dados salvos dispon√≠veis: ${customerData.name}`;
            } else {
                indicator.classList.add('hidden');
                loadBtn.title = 'Carregar dados salvos';
            }
        }

        function selectOrderType(type) {
            document.querySelectorAll('.order-type-card').forEach(card => {
                card.classList.remove('selected');
            });
            
            event.currentTarget.classList.add('selected');
            
            const radio = event.currentTarget.querySelector('input[type="radio"]');
            radio.checked = true;
            
            const orderDataSection = document.getElementById('order-data-section');
            if (type === 'encomenda') {
                orderDataSection.style.display = 'block';
            } else {
                orderDataSection.style.display = 'none';
            }
        }

        function selectPaymentMethod(method) {
            document.querySelectorAll('.payment-method').forEach(el => {
                el.classList.remove('selected');
            });
            
            event.currentTarget.classList.add('selected');
            
            const radio = event.currentTarget.querySelector('input[type="radio"]');
            radio.checked = true;
        }

        function finalizeOrder() {
            // Save customer data before validation
            saveCustomerData();
            
            // Validate required fields
            const requiredFields = [
                'customer-name', 'customer-phone', 'customer-email',
                'delivery-cep', 'delivery-address', 'delivery-number'
            ];
            
            for (const fieldId of requiredFields) {
                const field = document.getElementById(fieldId);
                if (!field.value.trim()) {
                    showNotification('Preencha todos os campos obrigat√≥rios!', 'error');
                    field.focus();
                    return;
                }
            }
            
            const orderType = document.querySelector('input[name="order-type"]:checked')?.value;
            const paymentMethod = document.querySelector('input[name="payment-method"]:checked')?.value;
            
            if (!orderType) {
                showNotification('Selecione o tipo do pedido!', 'error');
                return;
            }
            
            if (!paymentMethod) {
                showNotification('Selecione uma forma de pagamento!', 'error');
                return;
            }
            
            if (cart.length === 0) {
                showNotification('Carrinho vazio!', 'error');
                return;
            }
            
            // Validate delivery date for encomenda
            if (orderType === 'encomenda') {
                const deliveryDate = document.getElementById('delivery-date').value;
                if (!deliveryDate) {
                    showNotification('Selecione a data de entrega para encomendas!', 'error');
                    return;
                }
                
                const selectedDate = new Date(deliveryDate);
                const minDate = new Date();
                minDate.setDate(minDate.getDate() + 3);
                
                if (selectedDate < minDate) {
                    showNotification('Data de entrega deve ser pelo menos 3 dias a partir de hoje!', 'error');
                    return;
                }
            }
            
            const orderId = Date.now().toString();
            const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const deliveryFeeText = document.getElementById('delivery-fee').textContent;
            const deliveryFee = deliveryFeeText === 'Gr√°tis' ? 0 : parseFloat(deliveryFeeText.replace('R$ ', ''));
            const total = subtotal + deliveryFee;
            
            const order = {
                id: orderId,
                type: orderType,
                customer: {
                    name: document.getElementById('customer-name').value,
                    phone: document.getElementById('customer-phone').value,
                    email: document.getElementById('customer-email').value,
                    cpf: document.getElementById('customer-cpf').value
                },
                delivery: {
                    cep: document.getElementById('delivery-cep').value,
                    city: document.getElementById('delivery-city').value,
                    address: document.getElementById('delivery-address').value,
                    number: document.getElementById('delivery-number').value,
                    complement: document.getElementById('delivery-complement').value,
                    neighborhood: document.getElementById('delivery-neighborhood').value,
                    reference: document.getElementById('delivery-reference').value,
                    fee: deliveryFee,
                    date: document.getElementById('delivery-date').value,
                    time: document.getElementById('delivery-time').value
                },
                orderData: {
                    eventType: document.getElementById('event-type').value,
                    observations: document.getElementById('order-observations').value
                },
                items: [...cart],
                subtotal: subtotal,
                deliveryFee: deliveryFee,
                total: total,
                paymentMethod: paymentMethod,
                status: 'aguardando_pagamento',
                paymentConfirmed: false,
                date: new Date().toISOString().split('T')[0],
                time: new Date().toLocaleTimeString(),
                createdAt: new Date().toISOString()
            };
            
            orders[orderId] = order;
            
            // Update stock for pronta_entrega items
            cart.forEach(item => {
                const product = products[item.id];
                if (product.type === 'pronta_entrega' || product.type === 'ambos') {
                    const oldStock = product.stock;
                    product.stock = Math.max(0, product.stock - item.quantity);
                    
                    stockMovements.push({
                        id: Date.now().toString() + Math.random(),
                        productId: item.id,
                        productName: product.name,
                        type: 'saida',
                        quantity: item.quantity,
                        oldStock: oldStock,
                        newStock: product.stock,
                        reason: `Pedido #${orderId}`,
                        date: new Date().toISOString().split('T')[0],
                        time: new Date().toLocaleTimeString()
                    });
                }
            });
            
            // Process payment with Asaas if configured
            if (settings.asaasApiKey && paymentMethod !== 'encomenda') {
                processAsaasPayment(order)
                    .then(paymentData => {
                        showPaymentModal(order, paymentMethod, paymentData);
                    })
                    .catch(error => {
                        // Fallback to manual payment modal
                        showPaymentModal(order, paymentMethod);
                    });
            } else {
                showPaymentModal(order, paymentMethod);
            }
            
            cart = [];
            saveData();
            updateCartDisplay();
            toggleCart();
            renderProducts();
            
            // Clear form
            document.getElementById('customer-name').value = '';
            document.getElementById('customer-phone').value = '';
            document.getElementById('customer-email').value = '';
            document.getElementById('customer-cpf').value = '';
            document.getElementById('delivery-cep').value = '';
            document.getElementById('delivery-city').value = '';
            document.getElementById('delivery-address').value = '';
            document.getElementById('delivery-number').value = '';
            document.getElementById('delivery-complement').value = '';
            document.getElementById('delivery-neighborhood').value = '';
            document.getElementById('delivery-reference').value = '';
            document.getElementById('delivery-date').value = '';
            document.getElementById('delivery-time').value = '';
            document.getElementById('event-type').value = '';
            document.getElementById('order-observations').value = '';
            document.querySelectorAll('input[name="order-type"]').forEach(radio => radio.checked = false);
            document.querySelectorAll('input[name="payment-method"]').forEach(radio => radio.checked = false);
            document.querySelectorAll('.order-type-card').forEach(card => card.classList.remove('selected'));
            document.querySelectorAll('.payment-method').forEach(el => el.classList.remove('selected'));
        }

        function showPaymentModal(order, paymentMethod, asaasPaymentData = null) {
            const modal = document.getElementById('payment-modal');
            const orderNumber = document.getElementById('order-number');
            const paymentContent = document.getElementById('payment-content');
            
            orderNumber.textContent = order.id;
            
            let content = '';
            
            if (paymentMethod === 'pix') {
                let pixCode = `00020126580014BR.GOV.BCB.PIX0136${order.customer.email}5204000053039865802BR5925${settings.confeitariaName}6009SAO PAULO62070503***6304`;
                let qrCodeUrl = '';
                
                // Use Asaas PIX data if available
                if (asaasPaymentData && asaasPaymentData.pixTransaction) {
                    pixCode = asaasPaymentData.pixTransaction.payload;
                    qrCodeUrl = asaasPaymentData.pixTransaction.qrCode.encodedImage;
                }
                
                content = `
                    <div class="text-center">
                        <h4 class="text-lg font-semibold mb-4 text-green-600">
                            <i class="fas fa-qrcode mr-2"></i>Pagamento via PIX
                        </h4>
                        
                        ${qrCodeUrl ? `
                            <div class="mb-4">
                                <img src="data:image/png;base64,${qrCodeUrl}" alt="QR Code PIX" class="mx-auto w-48 h-48 border rounded-lg">
                                <p class="text-sm text-gray-600 mt-2">Escaneie o QR Code com seu banco</p>
                            </div>
                        ` : ''}
                        
                        <div class="bg-gray-100 p-4 rounded-lg mb-4">
                            <p class="text-sm text-gray-600 mb-2">Chave PIX Copia e Cola:</p>
                            <div class="bg-white p-3 rounded border text-xs break-all font-mono" id="pix-code">${pixCode}</div>
                            <button onclick="copyPixCode()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded mt-2 text-sm">
                                <i class="fas fa-copy mr-1"></i>Copiar C√≥digo PIX
                            </button>
                        </div>
                        
                        <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                            <div class="text-sm text-green-800 space-y-1">
                                <p><strong>üí∞ Valor:</strong> R$ ${order.total.toFixed(2)}</p>
                                ${asaasPaymentData ? `<p><strong>üÜî ID Pagamento:</strong> ${asaasPaymentData.id}</p>` : ''}
                                <p><strong>‚è∞ V√°lido at√©:</strong> ${new Date(Date.now() + 30 * 60 * 1000).toLocaleString('pt-BR')}</p>
                            </div>
                        </div>
                        
                        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                            <p class="text-sm text-yellow-800">
                                <i class="fas fa-clock mr-2"></i>
                                <strong>Aguardando Pagamento</strong><br>
                                ${asaasPaymentData ? 
                                    'O pagamento ser√° confirmado automaticamente ap√≥s a aprova√ß√£o.' : 
                                    'Ap√≥s realizar o PIX, clique em "Confirmar Pagamento" para finalizar seu pedido.'
                                }
                            </p>
                        </div>
                        
                        ${!asaasPaymentData ? `
                            <button onclick="confirmPayment('${order.id}', 'pix')" class="w-full bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-lg transition-colors mb-2">
                                <i class="fas fa-check mr-2"></i>Confirmar Pagamento PIX
                            </button>
                        ` : `
                            <button onclick="checkAsaasPaymentStatus('${order.id}')" class="w-full bg-blue-500 hover:bg-blue-600 text-white py-3 px-4 rounded-lg transition-colors mb-2">
                                <i class="fas fa-sync mr-2"></i>Verificar Status do Pagamento
                            </button>
                        `}
                    </div>
                `;
            } else if (paymentMethod === 'credit_card') {
                content = `
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-blue-600 text-center">
                            <i class="fas fa-credit-card mr-2"></i>Pagamento com Cart√£o de Cr√©dito
                        </h4>
                        <p class="text-center text-sm text-gray-600 mb-6">Valor: <strong>R$ ${order.total.toFixed(2)}</strong></p>
                        
                        <form id="credit-card-form" class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">N√∫mero do Cart√£o</label>
                                <input type="text" id="card-number" placeholder="0000 0000 0000 0000" maxlength="19" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                       oninput="formatCardNumber(this)">
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Nome no Cart√£o</label>
                                <input type="text" id="card-name" placeholder="NOME COMO NO CART√ÉO" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                       style="text-transform: uppercase;">
                            </div>
                            
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Validade</label>
                                    <input type="text" id="card-expiry" placeholder="MM/AA" maxlength="5"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                           oninput="formatExpiry(this)">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">CVV</label>
                                    <input type="text" id="card-cvv" placeholder="123" maxlength="4"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                </div>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">CPF do Portador</label>
                                <input type="text" id="card-cpf" placeholder="000.000.000-00" maxlength="14"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                       oninput="formatCPF(this)">
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Parcelas</label>
                                <select id="card-installments" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    <option value="1">1x de R$ ${order.total.toFixed(2)} (√† vista)</option>
                                    <option value="2">2x de R$ ${(order.total / 2).toFixed(2)} sem juros</option>
                                    <option value="3">3x de R$ ${(order.total / 3).toFixed(2)} sem juros</option>
                                    <option value="4">4x de R$ ${(order.total / 4).toFixed(2)} sem juros</option>
                                    <option value="5">5x de R$ ${(order.total / 5).toFixed(2)} sem juros</option>
                                    <option value="6">6x de R$ ${(order.total / 6).toFixed(2)} sem juros</option>
                                    <option value="7">7x de R$ ${(order.total / 7).toFixed(2)} sem juros</option>
                                    <option value="8">8x de R$ ${(order.total / 8).toFixed(2)} sem juros</option>
                                    <option value="9">9x de R$ ${(order.total / 9).toFixed(2)} sem juros</option>
                                    <option value="10">10x de R$ ${(order.total / 10).toFixed(2)} sem juros</option>
                                    <option value="11">11x de R$ ${(order.total / 11).toFixed(2)} sem juros</option>
                                    <option value="12">12x de R$ ${(order.total / 12).toFixed(2)} sem juros</option>
                                </select>
                            </div>
                            
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                <div class="flex items-center mb-2">
                                    <i class="fas fa-shield-alt text-blue-600 mr-2"></i>
                                    <span class="text-sm font-medium text-blue-800">Pagamento Seguro</span>
                                </div>
                                <p class="text-xs text-blue-700">
                                    Seus dados s√£o protegidos com criptografia SSL. N√£o armazenamos informa√ß√µes do cart√£o.
                                </p>
                            </div>
                            
                            <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white py-3 px-4 rounded-lg transition-colors">
                                <i class="fas fa-credit-card mr-2"></i>Processar Pagamento
                            </button>
                        </form>
                    </div>
                `;
            } else if (paymentMethod === 'encomenda') {
                const advancePayment = order.total * 0.5;
                const remainingPayment = order.total - advancePayment;
                content = `
                    <div class="text-center">
                        <h4 class="text-lg font-semibold mb-4 text-orange-600">
                            <i class="fas fa-handshake mr-2"></i>Pagamento Encomenda
                        </h4>
                        <div class="bg-orange-50 p-4 rounded-lg mb-4">
                            <div class="text-sm text-orange-800 space-y-2">
                                <p><strong>üí∞ Valor Total:</strong> R$ ${order.total.toFixed(2)}</p>
                                <p><strong>üìÖ Antecipado (50%):</strong> R$ ${advancePayment.toFixed(2)}</p>
                                <p><strong>üöö Na Entrega (50%):</strong> R$ ${remainingPayment.toFixed(2)}</p>
                            </div>
                        </div>
                        
                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-700 mb-3">Escolha como pagar os 50% antecipados:</p>
                            <div class="space-y-2">
                                <button onclick="showAdvancePayment('${order.id}', 'pix', ${advancePayment})" 
                                        class="w-full bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg transition-colors">
                                    <i class="fas fa-qrcode mr-2"></i>PIX - R$ ${advancePayment.toFixed(2)}
                                </button>
                                <button onclick="showAdvancePayment('${order.id}', 'credit_card', ${advancePayment})" 
                                        class="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg transition-colors">
                                    <i class="fas fa-credit-card mr-2"></i>Cart√£o de Cr√©dito - R$ ${advancePayment.toFixed(2)}
                                </button>
                            </div>
                        </div>
                        
                        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                            <p class="text-sm text-yellow-800">
                                <i class="fas fa-info-circle mr-2"></i>
                                Ap√≥s o pagamento antecipado, entraremos em contato para confirmar os detalhes da encomenda.
                                Os 50% restantes ser√£o pagos na entrega.
                            </p>
                        </div>
                    </div>
                `;
            }
            
            paymentContent.innerHTML = content;
            modal.classList.remove('hidden');
            
            // Add credit card form event listener
            if (paymentMethod === 'credit_card') {
                document.getElementById('credit-card-form').addEventListener('submit', function(e) {
                    e.preventDefault();
                    processCreditCardPayment(order.id);
                });
            }
        }

        function copyPixCode() {
            const pixCode = document.getElementById('pix-code').textContent;
            navigator.clipboard.writeText(pixCode).then(() => {
                showNotification('C√≥digo PIX copiado!', 'success');
            }).catch(() => {
                showNotification('Erro ao copiar c√≥digo PIX', 'error');
            });
        }

        function closePaymentModal() {
            document.getElementById('payment-modal').classList.add('hidden');
        }

        // Payment Processing Functions
        function confirmPayment(orderId, paymentType) {
            // Simulate payment confirmation
            const order = orders[orderId];
            if (!order) return;
            
            // Update order status to confirmed
            order.status = 'confirmado';
            order.paymentConfirmed = true;
            order.paymentDate = new Date().toISOString();
            
            saveData();
            
            // Send WhatsApp notifications
            sendWhatsAppNotifications(order, paymentType);
            
            // Show success message
            showPaymentSuccess(orderId, paymentType);
        }

        function sendWhatsAppNotifications(order, paymentType) {
            // Message for the store
            const storeMessage = `üéâ *NOVO PEDIDO CONFIRMADO!*

üìã *Pedido:* #${order.id}
üë§ *Cliente:* ${order.customer.name}
üì± *Telefone:* ${order.customer.phone}
‚úâÔ∏è *Email:* ${order.customer.email}
${order.customer.cpf ? `üÜî *CPF:* ${order.customer.cpf}` : ''}

üõçÔ∏è *Itens:*
${order.items.map(item => `‚Ä¢ ${item.name} (${item.quantity}x) - R$ ${(item.price * item.quantity).toFixed(2)}`).join('\n')}

üí∞ *Valores:*
‚Ä¢ Subtotal: R$ ${order.subtotal.toFixed(2)}
‚Ä¢ Entrega: R$ ${order.deliveryFee.toFixed(2)}
‚Ä¢ *Total: R$ ${order.total.toFixed(2)}*

üí≥ *Pagamento:* ${paymentType === 'pix' ? 'PIX' : paymentType === 'credit_card' ? 'Cart√£o de Cr√©dito' : 'Encomenda'}
‚úÖ *Status:* CONFIRMADO

üöö *Entrega:*
${order.delivery.address}, ${order.delivery.number}
${order.delivery.complement ? order.delivery.complement + '\n' : ''}${order.delivery.neighborhood} - ${order.delivery.city}
CEP: ${order.delivery.cep}
${order.delivery.reference ? `üìç ${order.delivery.reference}` : ''}
${order.delivery.date ? `üìÖ Data: ${order.delivery.date} ${order.delivery.time || ''}` : ''}

${order.orderData && (order.orderData.eventType || order.orderData.observations) ? `
üéØ *Dados da Encomenda:*
${order.orderData.eventType ? `‚Ä¢ Evento: ${order.orderData.eventType}` : ''}
${order.orderData.observations ? `‚Ä¢ Observa√ß√µes: ${order.orderData.observations}` : ''}
` : ''}

‚è∞ *Pedido feito em:* ${new Date(order.createdAt).toLocaleString('pt-BR')}`;

            // Message for the customer
            const customerMessage = `üéâ *Pedido Confirmado - ${settings.confeitariaName}*

Ol√° ${order.customer.name}! Seu pedido foi confirmado com sucesso! 

üìã *Pedido:* #${order.id}
üí∞ *Total:* R$ ${order.total.toFixed(2)}
üí≥ *Pagamento:* ${paymentType === 'pix' ? 'PIX' : paymentType === 'credit_card' ? 'Cart√£o de Cr√©dito' : 'Encomenda'} ‚úÖ

üõçÔ∏è *Seus itens:*
${order.items.map(item => `‚Ä¢ ${item.name} (${item.quantity}x)`).join('\n')}

üöö *Entrega:*
${order.delivery.address}, ${order.delivery.number}
${order.delivery.neighborhood} - ${order.delivery.city}
${order.delivery.date ? `üìÖ Data: ${order.delivery.date} ${order.delivery.time || ''}` : ''}

${order.type === 'encomenda' ? `
üéØ *Encomenda:*
‚Ä¢ Prazo m√≠nimo: 3 dias √∫teis
‚Ä¢ Entraremos em contato para confirmar detalhes
${order.paymentMethod === 'encomenda' ? '‚Ä¢ Restante do pagamento na entrega' : ''}
` : `
‚ö° *Pronta Entrega:*
‚Ä¢ Seu pedido ser√° preparado em breve
‚Ä¢ Voc√™ receber√° atualiza√ß√µes sobre o andamento
`}

üì± *D√∫vidas?* Entre em contato conosco!

Obrigado pela prefer√™ncia! üíú`;

            // Open WhatsApp for store (admin will need to send manually)
            setTimeout(() => {
                const storePhone = settings.phone.replace(/\D/g, '');
                const storeUrl = `https://wa.me/${storePhone}?text=${encodeURIComponent(storeMessage)}`;
                window.open(storeUrl, '_blank');
            }, 1000);

            // Open WhatsApp for customer (admin will need to send manually)
            setTimeout(() => {
                const customerPhone = order.customer.phone.replace(/\D/g, '');
                const customerUrl = `https://wa.me/${customerPhone}?text=${encodeURIComponent(customerMessage)}`;
                window.open(customerUrl, '_blank');
            }, 2000);

            showNotification('Mensagens do WhatsApp preparadas! Envie para o cliente e para a loja.', 'info');
        }

        function processCreditCardPayment(orderId) {
            // Validate credit card form
            const cardNumber = document.getElementById('card-number').value.replace(/\s/g, '');
            const cardName = document.getElementById('card-name').value;
            const cardExpiry = document.getElementById('card-expiry').value;
            const cardCvv = document.getElementById('card-cvv').value;
            const cardCpf = document.getElementById('card-cpf').value;
            const installments = document.getElementById('card-installments').value;
            
            // Basic validation
            if (!cardNumber || cardNumber.length < 13) {
                showNotification('N√∫mero do cart√£o inv√°lido!', 'error');
                return;
            }
            
            if (!cardName.trim()) {
                showNotification('Nome no cart√£o √© obrigat√≥rio!', 'error');
                return;
            }
            
            if (!cardExpiry || cardExpiry.length !== 5) {
                showNotification('Data de validade inv√°lida!', 'error');
                return;
            }
            
            if (!cardCvv || cardCvv.length < 3) {
                showNotification('CVV inv√°lido!', 'error');
                return;
            }
            
            if (!cardCpf || cardCpf.replace(/\D/g, '').length !== 11) {
                showNotification('CPF inv√°lido!', 'error');
                return;
            }
            
            // Simulate payment processing
            showNotification('Processando pagamento...', 'info');
            
            setTimeout(() => {
                // Simulate successful payment
                const order = orders[orderId];
                if (order) {
                    order.status = 'confirmado';
                    order.paymentConfirmed = true;
                    order.paymentDate = new Date().toISOString();
                    order.paymentDetails = {
                        method: 'credit_card',
                        installments: installments,
                        lastFourDigits: cardNumber.slice(-4),
                        cardName: cardName
                    };
                    
                    saveData();
                    
                    // Send WhatsApp notifications
                    sendWhatsAppNotifications(order, 'credit_card');
                    
                    showPaymentSuccess(orderId, 'credit_card');
                }
            }, 2000);
        }

        function showAdvancePayment(orderId, paymentType, amount) {
            const order = orders[orderId];
            if (!order) return;
            
            // Create a temporary order for advance payment
            const advanceOrder = {
                ...order,
                total: amount,
                isAdvancePayment: true,
                originalOrderId: orderId
            };
            
            if (paymentType === 'pix') {
                const pixCode = `00020126580014BR.GOV.BCB.PIX0136${order.customer.email}5204000053039865802BR5925${settings.confeitariaName}6009SAO PAULO62070503***6304`;
                const content = `
                    <div class="text-center">
                        <h4 class="text-lg font-semibold mb-4 text-green-600">
                            <i class="fas fa-qrcode mr-2"></i>Pagamento Antecipado - PIX
                        </h4>
                        <div class="bg-gray-100 p-4 rounded-lg mb-4">
                            <p class="text-sm text-gray-600 mb-2">Chave PIX Copia e Cola:</p>
                            <div class="bg-white p-3 rounded border text-xs break-all font-mono" id="pix-code">${pixCode}</div>
                            <button onclick="copyPixCode()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded mt-2 text-sm">
                                <i class="fas fa-copy mr-1"></i>Copiar C√≥digo PIX
                            </button>
                        </div>
                        <p class="text-sm text-gray-600 mb-4">Valor Antecipado: <strong>R$ ${amount.toFixed(2)}</strong></p>
                        
                        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                            <p class="text-sm text-yellow-800">
                                <i class="fas fa-clock mr-2"></i>
                                <strong>Aguardando Pagamento Antecipado</strong><br>
                                Ap√≥s realizar o PIX, clique em "Confirmar Pagamento" para finalizar.
                            </p>
                        </div>
                        
                        <button onclick="confirmAdvancePayment('${orderId}', 'pix')" class="w-full bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-lg transition-colors mb-2">
                            <i class="fas fa-check mr-2"></i>Confirmar Pagamento PIX
                        </button>
                    </div>
                `;
                
                document.getElementById('payment-content').innerHTML = content;
                
            } else if (paymentType === 'credit_card') {
                const content = `
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-blue-600 text-center">
                            <i class="fas fa-credit-card mr-2"></i>Pagamento Antecipado - Cart√£o
                        </h4>
                        <p class="text-center text-sm text-gray-600 mb-6">Valor Antecipado: <strong>R$ ${amount.toFixed(2)}</strong></p>
                        
                        <form id="advance-credit-card-form" class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">N√∫mero do Cart√£o</label>
                                <input type="text" id="advance-card-number" placeholder="0000 0000 0000 0000" maxlength="19" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                       oninput="formatCardNumber(this)">
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Nome no Cart√£o</label>
                                <input type="text" id="advance-card-name" placeholder="NOME COMO NO CART√ÉO" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                       style="text-transform: uppercase;">
                            </div>
                            
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Validade</label>
                                    <input type="text" id="advance-card-expiry" placeholder="MM/AA" maxlength="5"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                           oninput="formatExpiry(this)">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">CVV</label>
                                    <input type="text" id="advance-card-cvv" placeholder="123" maxlength="4"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                </div>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">CPF do Portador</label>
                                <input type="text" id="advance-card-cpf" placeholder="000.000.000-00" maxlength="14"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                       oninput="formatCPF(this)">
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Parcelas</label>
                                <select id="advance-card-installments" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    <option value="1">1x de R$ ${amount.toFixed(2)} (√† vista)</option>
                                    <option value="2">2x de R$ ${(amount / 2).toFixed(2)} sem juros</option>
                                    <option value="3">3x de R$ ${(amount / 3).toFixed(2)} sem juros</option>
                                    <option value="4">4x de R$ ${(amount / 4).toFixed(2)} sem juros</option>
                                    <option value="5">5x de R$ ${(amount / 5).toFixed(2)} sem juros</option>
                                    <option value="6">6x de R$ ${(amount / 6).toFixed(2)} sem juros</option>
                                </select>
                            </div>
                            
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                <div class="flex items-center mb-2">
                                    <i class="fas fa-shield-alt text-blue-600 mr-2"></i>
                                    <span class="text-sm font-medium text-blue-800">Pagamento Seguro</span>
                                </div>
                                <p class="text-xs text-blue-700">
                                    Pagamento antecipado de 50%. Os outros 50% ser√£o pagos na entrega.
                                </p>
                            </div>
                            
                            <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white py-3 px-4 rounded-lg transition-colors">
                                <i class="fas fa-credit-card mr-2"></i>Processar Pagamento Antecipado
                            </button>
                        </form>
                    </div>
                `;
                
                document.getElementById('payment-content').innerHTML = content;
                
                // Add form event listener
                document.getElementById('advance-credit-card-form').addEventListener('submit', function(e) {
                    e.preventDefault();
                    processAdvanceCreditCardPayment(orderId);
                });
            }
        }

        function confirmAdvancePayment(orderId, paymentType) {
            const order = orders[orderId];
            if (!order) return;
            
            // Update order status
            order.status = 'confirmado';
            order.advancePaymentConfirmed = true;
            order.advancePaymentDate = new Date().toISOString();
            order.advancePaymentMethod = paymentType;
            
            saveData();
            
            // Send WhatsApp notifications for advance payment
            sendAdvanceWhatsAppNotifications(order, paymentType);
            
            // Show success message for advance payment
            showAdvancePaymentSuccess(orderId, paymentType);
        }

        function sendAdvanceWhatsAppNotifications(order, paymentType) {
            const advanceAmount = order.total * 0.5;
            const remainingAmount = order.total - advanceAmount;
            
            // Message for the store
            const storeMessage = `üéâ *ENCOMENDA CONFIRMADA - PAGAMENTO ANTECIPADO!*

üìã *Pedido:* #${order.id}
üë§ *Cliente:* ${order.customer.name}
üì± *Telefone:* ${order.customer.phone}
‚úâÔ∏è *Email:* ${order.customer.email}
${order.customer.cpf ? `üÜî *CPF:* ${order.customer.cpf}` : ''}

üõçÔ∏è *Itens:*
${order.items.map(item => `‚Ä¢ ${item.name} (${item.quantity}x) - R$ ${(item.price * item.quantity).toFixed(2)}`).join('\n')}

üí∞ *Valores:*
‚Ä¢ Total: R$ ${order.total.toFixed(2)}
‚Ä¢ *Antecipado (50%): R$ ${advanceAmount.toFixed(2)}* ‚úÖ
‚Ä¢ Restante na entrega: R$ ${remainingAmount.toFixed(2)}

üí≥ *Pagamento Antecipado:* ${paymentType === 'pix' ? 'PIX' : 'Cart√£o de Cr√©dito'}
‚úÖ *Status:* CONFIRMADO

üöö *Entrega:*
${order.delivery.address}, ${order.delivery.number}
${order.delivery.complement ? order.delivery.complement + '\n' : ''}${order.delivery.neighborhood} - ${order.delivery.city}
CEP: ${order.delivery.cep}
${order.delivery.reference ? `üìç ${order.delivery.reference}` : ''}
üìÖ Data: ${order.delivery.date} ${order.delivery.time || ''}

üéØ *Dados da Encomenda:*
${order.orderData.eventType ? `‚Ä¢ Evento: ${order.orderData.eventType}` : ''}
${order.orderData.observations ? `‚Ä¢ Observa√ß√µes: ${order.orderData.observations}` : ''}

‚ö†Ô∏è *A√á√ÉO NECESS√ÅRIA:*
‚Ä¢ Entrar em contato com cliente para confirmar detalhes
‚Ä¢ Prazo m√≠nimo: 3 dias √∫teis
‚Ä¢ Restante do pagamento na entrega

‚è∞ *Pedido feito em:* ${new Date(order.createdAt).toLocaleString('pt-BR')}`;

            // Message for the customer
            const customerMessage = `üéâ *Encomenda Confirmada - ${settings.confeitariaName}*

Ol√° ${order.customer.name}! Seu pagamento antecipado foi confirmado! 

üìã *Pedido:* #${order.id}
üí∞ *Total:* R$ ${order.total.toFixed(2)}
‚úÖ *Antecipado (50%):* R$ ${advanceAmount.toFixed(2)}
üöö *Restante na entrega:* R$ ${remainingAmount.toFixed(2)}
üí≥ *Pagamento:* ${paymentType === 'pix' ? 'PIX' : 'Cart√£o de Cr√©dito'}

üõçÔ∏è *Seus itens:*
${order.items.map(item => `‚Ä¢ ${item.name} (${item.quantity}x)`).join('\n')}

üöö *Entrega:*
${order.delivery.address}, ${order.delivery.number}
${order.delivery.neighborhood} - ${order.delivery.city}
üìÖ Data: ${order.delivery.date} ${order.delivery.time || ''}

üéØ *Pr√≥ximos Passos:*
‚Ä¢ Entraremos em contato para confirmar todos os detalhes
‚Ä¢ Prazo m√≠nimo: 3 dias √∫teis para produ√ß√£o
‚Ä¢ O restante (R$ ${remainingAmount.toFixed(2)}) ser√° pago na entrega
‚Ä¢ Voc√™ receber√° atualiza√ß√µes sobre o andamento

${order.orderData.eventType ? `üéâ *Evento:* ${order.orderData.eventType}` : ''}
${order.orderData.observations ? `üìù *Suas observa√ß√µes:* ${order.orderData.observations}` : ''}

üì± *D√∫vidas?* Entre em contato conosco!

Obrigado pela confian√ßa! üíú`;

            // Open WhatsApp for store
            setTimeout(() => {
                const storePhone = settings.phone.replace(/\D/g, '');
                const storeUrl = `https://wa.me/${storePhone}?text=${encodeURIComponent(storeMessage)}`;
                window.open(storeUrl, '_blank');
            }, 1000);

            // Open WhatsApp for customer
            setTimeout(() => {
                const customerPhone = order.customer.phone.replace(/\D/g, '');
                const customerUrl = `https://wa.me/${customerPhone}?text=${encodeURIComponent(customerMessage)}`;
                window.open(customerUrl, '_blank');
            }, 2000);

            showNotification('Mensagens do WhatsApp preparadas para encomenda!', 'info');
        }

        function processAdvanceCreditCardPayment(orderId) {
            // Validate advance credit card form
            const cardNumber = document.getElementById('advance-card-number').value.replace(/\s/g, '');
            const cardName = document.getElementById('advance-card-name').value;
            const cardExpiry = document.getElementById('advance-card-expiry').value;
            const cardCvv = document.getElementById('advance-card-cvv').value;
            const cardCpf = document.getElementById('advance-card-cpf').value;
            const installments = document.getElementById('advance-card-installments').value;
            
            // Basic validation
            if (!cardNumber || cardNumber.length < 13) {
                showNotification('N√∫mero do cart√£o inv√°lido!', 'error');
                return;
            }
            
            if (!cardName.trim()) {
                showNotification('Nome no cart√£o √© obrigat√≥rio!', 'error');
                return;
            }
            
            if (!cardExpiry || cardExpiry.length !== 5) {
                showNotification('Data de validade inv√°lida!', 'error');
                return;
            }
            
            if (!cardCvv || cardCvv.length < 3) {
                showNotification('CVV inv√°lido!', 'error');
                return;
            }
            
            if (!cardCpf || cardCpf.replace(/\D/g, '').length !== 11) {
                showNotification('CPF inv√°lido!', 'error');
                return;
            }
            
            // Simulate payment processing
            showNotification('Processando pagamento antecipado...', 'info');
            
            setTimeout(() => {
                const order = orders[orderId];
                if (order) {
                    order.status = 'confirmado';
                    order.advancePaymentConfirmed = true;
                    order.advancePaymentDate = new Date().toISOString();
                    order.advancePaymentMethod = 'credit_card';
                    order.advancePaymentDetails = {
                        installments: installments,
                        lastFourDigits: cardNumber.slice(-4),
                        cardName: cardName
                    };
                    
                    saveData();
                    
                    // Send WhatsApp notifications for advance payment
                    sendAdvanceWhatsAppNotifications(order, 'credit_card');
                    
                    showAdvancePaymentSuccess(orderId, 'credit_card');
                }
            }, 2000);
        }

        function showPaymentSuccess(orderId, paymentType) {
            const order = orders[orderId];
            const content = `
                <div class="text-center">
                    <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-check text-green-500 text-2xl"></i>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Pagamento Confirmado!</h3>
                    <p class="text-gray-600 mb-4">Pedido #${orderId}</p>
                    
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                        <div class="text-sm text-green-800 space-y-2">
                            <p><strong>üí∞ Valor Pago:</strong> R$ ${order.total.toFixed(2)}</p>
                            <p><strong>üí≥ M√©todo:</strong> ${paymentType === 'pix' ? 'PIX' : 'Cart√£o de Cr√©dito'}</p>
                            <p><strong>üìÖ Data:</strong> ${new Date().toLocaleDateString('pt-BR')}</p>
                            <p><strong>‚è∞ Hor√°rio:</strong> ${new Date().toLocaleTimeString('pt-BR')}</p>
                        </div>
                    </div>
                    
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                        <p class="text-sm text-blue-800">
                            <i class="fas fa-info-circle mr-2"></i>
                            <strong>Pr√≥ximos Passos:</strong><br>
                            ‚Ä¢ Seu pedido foi confirmado e est√° sendo preparado<br>
                            ‚Ä¢ Voc√™ receber√° atualiza√ß√µes por WhatsApp<br>
                            ‚Ä¢ Em caso de d√∫vidas, entre em contato conosco
                        </p>
                    </div>
                    
                    <div class="space-y-2">
                        <button onclick="closePaymentModal()" class="w-full bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-lg transition-colors">
                            <i class="fas fa-check mr-2"></i>Finalizar
                        </button>
                        <button onclick="window.open('https://wa.me/${settings.phone.replace(/\D/g, '')}?text=Ol√°! Acabei de fazer o pedido ${orderId}', '_blank')" 
                                class="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition-colors">
                            <i class="fab fa-whatsapp mr-2"></i>Falar no WhatsApp
                        </button>
                    </div>
                </div>
            `;
            
            document.getElementById('payment-content').innerHTML = content;
        }

        function showAdvancePaymentSuccess(orderId, paymentType) {
            const order = orders[orderId];
            const advanceAmount = order.total * 0.5;
            const remainingAmount = order.total - advanceAmount;
            
            const content = `
                <div class="text-center">
                    <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-check text-green-500 text-2xl"></i>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Pagamento Antecipado Confirmado!</h3>
                    <p class="text-gray-600 mb-4">Pedido #${orderId}</p>
                    
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                        <div class="text-sm text-green-800 space-y-2">
                            <p><strong>üí∞ Valor Antecipado:</strong> R$ ${advanceAmount.toFixed(2)}</p>
                            <p><strong>üöö Restante na Entrega:</strong> R$ ${remainingAmount.toFixed(2)}</p>
                            <p><strong>üí≥ M√©todo:</strong> ${paymentType === 'pix' ? 'PIX' : 'Cart√£o de Cr√©dito'}</p>
                            <p><strong>üìÖ Data:</strong> ${new Date().toLocaleDateString('pt-BR')}</p>
                        </div>
                    </div>
                    
                    <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4">
                        <p class="text-sm text-orange-800">
                            <i class="fas fa-info-circle mr-2"></i>
                            <strong>Pr√≥ximos Passos:</strong><br>
                            ‚Ä¢ Entraremos em contato para confirmar detalhes da encomenda<br>
                            ‚Ä¢ Voc√™ receber√° atualiza√ß√µes sobre o andamento<br>
                            ‚Ä¢ Os 50% restantes ser√£o pagos na entrega<br>
                            ‚Ä¢ Prazo m√≠nimo: 3 dias √∫teis
                        </p>
                    </div>
                    
                    <div class="space-y-2">
                        <button onclick="closePaymentModal()" class="w-full bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-lg transition-colors">
                            <i class="fas fa-check mr-2"></i>Finalizar
                        </button>
                        <button onclick="window.open('https://wa.me/${settings.phone.replace(/\D/g, '')}?text=Ol√°! Acabei de fazer o pagamento antecipado do pedido ${orderId}', '_blank')" 
                                class="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition-colors">
                            <i class="fab fa-whatsapp mr-2"></i>Falar no WhatsApp
                        </button>
                    </div>
                </div>
            `;
            
            document.getElementById('payment-content').innerHTML = content;
        }

        // Confirmation Modal Functions
        function showConfirmationModal(message, onConfirm) {
            document.getElementById('confirmation-message').textContent = message;
            pendingDeletion = onConfirm;
            document.getElementById('confirmation-modal').classList.remove('hidden');
        }

        function hideConfirmationModal() {
            document.getElementById('confirmation-modal').classList.add('hidden');
            pendingDeletion = null;
        }

        function confirmDeletion() {
            if (pendingDeletion) {
                pendingDeletion();
                hideConfirmationModal();
            }
        }

        // Customer Data Management Functions
        function saveCustomerData() {
            const currentData = {
                name: document.getElementById('customer-name').value,
                phone: document.getElementById('customer-phone').value,
                email: document.getElementById('customer-email').value,
                cpf: document.getElementById('customer-cpf').value,
                cep: document.getElementById('delivery-cep').value,
                city: document.getElementById('delivery-city').value,
                address: document.getElementById('delivery-address').value,
                number: document.getElementById('delivery-number').value,
                complement: document.getElementById('delivery-complement').value,
                neighborhood: document.getElementById('delivery-neighborhood').value,
                reference: document.getElementById('delivery-reference').value,
                lastUsed: new Date().toISOString()
            };
            
            // Only save if at least name and phone are filled
            if (currentData.name.trim() && currentData.phone.trim()) {
                customerData = currentData;
                saveData();
                showNotification('Dados salvos para pr√≥ximas compras!', 'success');
            }
        }

        function loadSavedCustomerData() {
            if (!customerData.name) {
                showNotification('Nenhum dado salvo encontrado!', 'info');
                return;
            }
            
            // Fill customer data
            document.getElementById('customer-name').value = customerData.name || '';
            document.getElementById('customer-phone').value = customerData.phone || '';
            document.getElementById('customer-email').value = customerData.email || '';
            document.getElementById('customer-cpf').value = customerData.cpf || '';
            
            // Fill delivery data
            document.getElementById('delivery-cep').value = customerData.cep || '';
            document.getElementById('delivery-city').value = customerData.city || '';
            document.getElementById('delivery-address').value = customerData.address || '';
            document.getElementById('delivery-number').value = customerData.number || '';
            document.getElementById('delivery-complement').value = customerData.complement || '';
            document.getElementById('delivery-neighborhood').value = customerData.neighborhood || '';
            document.getElementById('delivery-reference').value = customerData.reference || '';
            
            // Calculate delivery fee if CEP is loaded
            if (customerData.cep) {
                calculateDeliveryFee();
            }
            
            showNotification('Dados carregados com sucesso!', 'success');
        }

        function clearCustomerForm() {
            // Clear customer data
            document.getElementById('customer-name').value = '';
            document.getElementById('customer-phone').value = '';
            document.getElementById('customer-email').value = '';
            document.getElementById('customer-cpf').value = '';
            
            // Clear delivery data
            document.getElementById('delivery-cep').value = '';
            document.getElementById('delivery-city').value = '';
            document.getElementById('delivery-address').value = '';
            document.getElementById('delivery-number').value = '';
            document.getElementById('delivery-complement').value = '';
            document.getElementById('delivery-neighborhood').value = '';
            document.getElementById('delivery-reference').value = '';
            
            // Reset delivery fee
            document.getElementById('delivery-fee').textContent = 'R$ 0,00';
            updateCartTotal();
            
            showNotification('Formul√°rio limpo!', 'info');
        }

        function clearSavedCustomerData() {
            showConfirmationModal(
                'Tem certeza que deseja apagar todos os dados salvos do cliente? Esta a√ß√£o n√£o pode ser desfeita.',
                () => {
                    customerData = {};
                    saveData();
                    showSavedCustomerData(); // Refresh the display
                    updateSavedDataIndicator();
                    showNotification('Dados salvos removidos!', 'success');
                }
            );
        }

        // Logo Management Functions
        function handleLogoUpload(input) {
            const file = input.files[0];
            if (!file) return;
            
            // Validate file type
            if (!file.type.startsWith('image/')) {
                showNotification('Por favor, selecione apenas arquivos de imagem!', 'error');
                input.value = '';
                return;
            }
            
            // Validate file size (max 2MB for logo)
            if (file.size > 2 * 1024 * 1024) {
                showNotification('O logo deve ter no m√°ximo 2MB!', 'error');
                input.value = '';
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const logoPreview = document.getElementById('logo-preview');
                const previewLogo = document.getElementById('preview-logo');
                
                previewLogo.src = e.target.result;
                logoPreview.classList.remove('hidden');
                
                // Store the base64 data for saving
                input.dataset.logoData = e.target.result;
            };
            
            reader.readAsDataURL(file);
        }

        function removeLogoPreview() {
            const logoPreview = document.getElementById('logo-preview');
            const previewLogo = document.getElementById('preview-logo');
            const fileInput = document.getElementById('logoInput');
            
            logoPreview.classList.add('hidden');
            previewLogo.src = '';
            fileInput.value = '';
            delete fileInput.dataset.logoData;
        }

        function updateStoreLogo() {
            const storeLogo = document.getElementById('store-logo');
            const storeDefaultIcon = document.getElementById('store-default-icon');
            
            if (settings.logo) {
                storeLogo.src = settings.logo;
                storeLogo.classList.remove('hidden');
                storeDefaultIcon.classList.add('hidden');
            } else {
                storeLogo.classList.add('hidden');
                storeDefaultIcon.classList.remove('hidden');
            }
        }

        // Payment Methods Rendering
        function renderPaymentMethods() {
            const container = document.getElementById('payment-methods-container');
            container.innerHTML = '';

            const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);

            // PIX
            if (settings.enablePix) {
                const pixDiscount = (subtotal * settings.pixDiscountPercent / 100);
                const pixTotal = subtotal - pixDiscount + settings.pixFee;
                
                const pixMethod = document.createElement('div');
                pixMethod.className = 'payment-method border-2 border-gray-200 rounded-lg p-3 hover:bg-white transition-colors';
                pixMethod.onclick = () => selectPaymentMethod('pix');
                pixMethod.innerHTML = `
                    <div class="flex items-center">
                        <input type="radio" name="payment-method" value="pix" class="mr-3">
                        <i class="fas fa-qrcode text-green-500 mr-3"></i>
                        <div class="flex-1">
                            <span class="font-medium text-gray-800">PIX</span>
                            <p class="text-sm text-gray-600">
                                Aprova√ß√£o instant√¢nea ‚Ä¢ Desconto de ${settings.pixDiscountPercent}%
                                ${settings.pixFee > 0 ? ` ‚Ä¢ Taxa: R$ ${settings.pixFee.toFixed(2)}` : ''}
                            </p>
                            ${pixDiscount > 0 ? `<p class="text-sm text-green-600 font-medium">Economia: R$ ${pixDiscount.toFixed(2)}</p>` : ''}
                        </div>
                        <div class="text-right">
                            <span class="text-sm text-green-600 font-medium">Recomendado</span>
                            <p class="text-sm text-gray-600">R$ ${pixTotal.toFixed(2)}</p>
                        </div>
                    </div>
                `;
                container.appendChild(pixMethod);
            }

            // Credit Card
            if (settings.enableCreditCard) {
                const creditFee = subtotal * settings.creditCardFeePercent / 100;
                const creditTotal = subtotal + creditFee;
                
                const creditMethod = document.createElement('div');
                creditMethod.className = 'payment-method border-2 border-gray-200 rounded-lg p-3 hover:bg-white transition-colors';
                creditMethod.onclick = () => selectPaymentMethod('credit_card');
                creditMethod.innerHTML = `
                    <div class="flex items-center">
                        <input type="radio" name="payment-method" value="credit_card" class="mr-3">
                        <i class="fas fa-credit-card text-blue-500 mr-3"></i>
                        <div class="flex-1">
                            <span class="font-medium text-gray-800">Cart√£o de Cr√©dito</span>
                            <p class="text-sm text-gray-600">
                                Parcelamento em at√© ${settings.maxInstallments}x
                                ${settings.creditCardFeePercent > 0 ? ` ‚Ä¢ Taxa: ${settings.creditCardFeePercent}%` : ''}
                            </p>
                        </div>
                        <div class="text-right">
                            <span class="text-sm text-blue-600">At√© ${settings.maxInstallments}x</span>
                            <p class="text-sm text-gray-600">R$ ${creditTotal.toFixed(2)}</p>
                        </div>
                    </div>
                `;
                container.appendChild(creditMethod);
            }

            // Debit Card
            if (settings.enableDebitCard) {
                const debitFee = subtotal * settings.debitCardFeePercent / 100;
                const debitTotal = subtotal + debitFee;
                
                const debitMethod = document.createElement('div');
                debitMethod.className = 'payment-method border-2 border-gray-200 rounded-lg p-3 hover:bg-white transition-colors';
                debitMethod.onclick = () => selectPaymentMethod('debit_card');
                debitMethod.innerHTML = `
                    <div class="flex items-center">
                        <input type="radio" name="payment-method" value="debit_card" class="mr-3">
                        <i class="fas fa-credit-card text-purple-500 mr-3"></i>
                        <div class="flex-1">
                            <span class="font-medium text-gray-800">Cart√£o de D√©bito</span>
                            <p class="text-sm text-gray-600">
                                D√©bito √† vista
                                ${settings.debitCardFeePercent > 0 ? ` ‚Ä¢ Taxa: ${settings.debitCardFeePercent}%` : ''}
                            </p>
                        </div>
                        <div class="text-right">
                            <span class="text-sm text-purple-600">√Ä vista</span>
                            <p class="text-sm text-gray-600">R$ ${debitTotal.toFixed(2)}</p>
                        </div>
                    </div>
                `;
                container.appendChild(debitMethod);
            }

            // Boleto
            if (settings.enableBoleto) {
                const boletoTotal = subtotal + settings.boletoFee;
                
                const boletoMethod = document.createElement('div');
                boletoMethod.className = 'payment-method border-2 border-gray-200 rounded-lg p-3 hover:bg-white transition-colors';
                boletoMethod.onclick = () => selectPaymentMethod('boleto');
                boletoMethod.innerHTML = `
                    <div class="flex items-center">
                        <input type="radio" name="payment-method" value="boleto" class="mr-3">
                        <i class="fas fa-barcode text-orange-500 mr-3"></i>
                        <div class="flex-1">
                            <span class="font-medium text-gray-800">Boleto Banc√°rio</span>
                            <p class="text-sm text-gray-600">
                                Vencimento em 3 dias √∫teis
                                ${settings.boletoFee > 0 ? ` ‚Ä¢ Taxa: R$ ${settings.boletoFee.toFixed(2)}` : ''}
                            </p>
                        </div>
                        <div class="text-right">
                            <span class="text-sm text-orange-600">3 dias</span>
                            <p class="text-sm text-gray-600">R$ ${boletoTotal.toFixed(2)}</p>
                        </div>
                    </div>
                `;
                container.appendChild(boletoMethod);
            }

            // Encomenda
            if (settings.enableEncomenda) {
                const encomendaMethod = document.createElement('div');
                encomendaMethod.className = 'payment-method border-2 border-gray-200 rounded-lg p-3 hover:bg-white transition-colors';
                encomendaMethod.onclick = () => selectPaymentMethod('encomenda');
                encomendaMethod.innerHTML = `
                    <div class="flex items-center">
                        <input type="radio" name="payment-method" value="encomenda" class="mr-3">
                        <i class="fas fa-handshake text-orange-500 mr-3"></i>
                        <div class="flex-1">
                            <span class="font-medium text-gray-800">Encomenda</span>
                            <p class="text-sm text-gray-600">50% antecipado + 50% na entrega</p>
                        </div>
                        <span class="text-sm text-orange-600">Flex√≠vel</span>
                    </div>
                `;
                container.appendChild(encomendaMethod);
            }

            // If no payment methods are enabled
            if (container.children.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4 text-gray-500">
                        <i class="fas fa-exclamation-triangle text-yellow-500 mb-2"></i>
                        <p>Nenhum m√©todo de pagamento configurado.</p>
                        <p class="text-sm">Configure os m√©todos no painel administrativo.</p>
                    </div>
                `;
            }
        }

        // Asaas Integration Functions
        function getAsaasBaseUrl() {
            return settings.asaasEnvironment === 'production' 
                ? 'https://api.asaas.com/v3' 
                : 'https://sandbox.asaas.com/api/v3';
        }

        function createAsaasCustomer(customerData) {
            if (!settings.asaasApiKey) {
                throw new Error('API Key do Asaas n√£o configurada');
            }

            const asaasCustomer = {
                name: customerData.name,
                email: customerData.email,
                phone: customerData.phone.replace(/\D/g, ''),
                mobilePhone: customerData.phone.replace(/\D/g, ''),
                cpfCnpj: customerData.cpf ? customerData.cpf.replace(/\D/g, '') : undefined,
                postalCode: customerData.cep ? customerData.cep.replace(/\D/g, '') : undefined,
                address: customerData.address,
                addressNumber: customerData.number,
                complement: customerData.complement,
                province: customerData.neighborhood,
                city: customerData.city,
                state: 'SP', // You might want to make this dynamic
                country: 'Brasil',
                externalReference: `customer_${Date.now()}`
            };

            return fetch(`${getAsaasBaseUrl()}/customers`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'access_token': settings.asaasApiKey
                },
                body: JSON.stringify(asaasCustomer)
            });
        }

        function createAsaasPayment(order, asaasCustomerId) {
            if (!settings.asaasApiKey) {
                throw new Error('API Key do Asaas n√£o configurada');
            }

            const dueDate = new Date();
            dueDate.setDate(dueDate.getDate() + 3); // 3 days from now

            const payment = {
                customer: asaasCustomerId,
                billingType: getAsaasBillingType(order.paymentMethod),
                value: order.total,
                dueDate: dueDate.toISOString().split('T')[0],
                description: `Pedido #${order.id} - ${settings.confeitariaName}`,
                externalReference: order.id,
                installmentCount: order.installments || 1,
                installmentValue: order.installments ? (order.total / order.installments) : order.total,
                discount: {
                    value: order.discount || 0,
                    dueDateLimitDays: 0
                },
                fine: {
                    value: 2.00
                },
                interest: {
                    value: 1.00
                },
                postalService: false
            };

            // Add split configuration if wallet ID is provided
            if (settings.asaasWalletId) {
                payment.split = [{
                    walletId: settings.asaasWalletId,
                    fixedValue: order.total * 0.95, // 95% to the wallet, 5% fee
                    status: 'PENDING'
                }];
            }

            return fetch(`${getAsaasBaseUrl()}/payments`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'access_token': settings.asaasApiKey
                },
                body: JSON.stringify(payment)
            });
        }

        function getAsaasBillingType(paymentMethod) {
            const billingTypes = {
                'pix': 'PIX',
                'credit_card': 'CREDIT_CARD',
                'debit_card': 'DEBIT_CARD',
                'boleto': 'BOLETO'
            };
            return billingTypes[paymentMethod] || 'PIX';
        }

        function processAsaasPayment(order) {
            if (!settings.asaasApiKey) {
                showNotification('Integra√ß√£o com Asaas n√£o configurada!', 'error');
                return Promise.reject('Asaas not configured');
            }

            showNotification('Processando pagamento...', 'info');

            // First, create or get customer
            return createAsaasCustomer(order.customer)
                .then(response => response.json())
                .then(customerData => {
                    if (customerData.errors) {
                        throw new Error(customerData.errors[0].description);
                    }
                    
                    // Then create payment
                    return createAsaasPayment(order, customerData.id);
                })
                .then(response => response.json())
                .then(paymentData => {
                    if (paymentData.errors) {
                        throw new Error(paymentData.errors[0].description);
                    }
                    
                    // Store Asaas payment ID in order
                    order.asaasPaymentId = paymentData.id;
                    order.asaasCustomerId = paymentData.customer;
                    
                    return paymentData;
                })
                .catch(error => {
                    console.error('Asaas payment error:', error);
                    showNotification(`Erro no pagamento: ${error.message}`, 'error');
                    throw error;
                });
        }

        // Image Upload Functions
        function handleImageUpload(input) {
            const file = input.files[0];
            if (!file) return;
            
            // Validate file type
            if (!file.type.startsWith('image/')) {
                showNotification('Por favor, selecione apenas arquivos de imagem!', 'error');
                input.value = '';
                return;
            }
            
            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                showNotification('A imagem deve ter no m√°ximo 5MB!', 'error');
                input.value = '';
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const imagePreview = document.getElementById('image-preview');
                const previewImg = document.getElementById('preview-img');
                
                previewImg.src = e.target.result;
                imagePreview.classList.remove('hidden');
                
                // Store the base64 data for saving
                input.dataset.imageData = e.target.result;
            };
            
            reader.readAsDataURL(file);
        }

        function removeImagePreview() {
            const imagePreview = document.getElementById('image-preview');
            const previewImg = document.getElementById('preview-img');
            const fileInput = document.getElementById('productImage');
            
            imagePreview.classList.add('hidden');
            previewImg.src = '';
            fileInput.value = '';
            delete fileInput.dataset.imageData;
        }

        function updateAdvanceInstallmentInfo() {
            const select = document.getElementById('advance-card-installments');
            const infoDiv = document.getElementById('advance-installment-info');
            const selectedOption = select.options[select.selectedIndex];
            
            if (!selectedOption) return;
            
            const installments = parseInt(selectedOption.value);
            const installmentValue = parseFloat(selectedOption.dataset.installmentValue);
            const total = parseFloat(selectedOption.dataset.total);
            const interest = parseFloat(selectedOption.dataset.interest);
            const hasInterest = selectedOption.dataset.hasInterest === 'true';
            
            let infoText = '';
            if (hasInterest) {
                infoText = `
                    <div class="bg-yellow-50 border border-yellow-200 rounded p-2">
                        <p class="text-yellow-800 text-xs">
                            <i class="fas fa-exclamation-triangle mr-1"></i>
                            <strong>Com juros:</strong> ${installments}x de R$ ${installmentValue.toFixed(2)}
                            <br>Total antecipado: R$ ${total.toFixed(2)} (juros: R$ ${interest.toFixed(2)})
                            <br>Taxa: ${settings.monthlyInterestRate}% ao m√™s
                        </p>
                    </div>
                `;
            } else {
                if (installments === 1) {
                    infoText = `
                        <div class="bg-green-50 border border-green-200 rounded p-2">
                            <p class="text-green-800 text-xs">
                                <i class="fas fa-check-circle mr-1"></i>
                                <strong>√Ä vista:</strong> R$ ${total.toFixed(2)}
                            </p>
                        </div>
                    `;
                } else {
                    infoText = `
                        <div class="bg-blue-50 border border-blue-200 rounded p-2">
                            <p class="text-blue-800 text-xs">
                                <i class="fas fa-gift mr-1"></i>
                                <strong>Sem juros:</strong> ${installments}x de R$ ${installmentValue.toFixed(2)}
                                <br>Total antecipado: R$ ${total.toFixed(2)}
                            </p>
                        </div>
                    `;
                }
            }
            
            infoDiv.innerHTML = infoText;
        }

        // Card formatting functions
        function formatCardNumber(input) {
            let value = input.value.replace(/\D/g, '');
            value = value.replace(/(\d{4})(?=\d)/g, '$1 ');
            input.value = value;
        }

        function formatExpiry(input) {
            let value = input.value.replace(/\D/g, '');
            if (value.length >= 2) {
                value = value.substring(0, 2) + '/' + value.substring(2, 4);
            }
            input.value = value;
        }

        function formatCPF(input) {
            let value = input.value.replace(/\D/g, '');
            value = value.replace(/(\d{3})(\d)/, '$1.$2');
            value = value.replace(/(\d{3})(\d)/, '$1.$2');
            value = value.replace(/(\d{3})(\d{1,2})$/, '$1-$2');
            input.value = value;
        }

        // Category Management Functions
        function renderStoreNavigation() {
            const container = document.getElementById('store-nav-buttons');
            
            // Keep the "Todos" button and add category buttons
            const allButton = container.querySelector('button[onclick="showStoreSection(\'all\')"]');
            container.innerHTML = '';
            container.appendChild(allButton);
            
            // Add category buttons
            Object.values(categories).forEach(category => {
                const button = document.createElement('button');
                button.className = 'store-nav-btn px-6 py-4 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-t-xl transition-all duration-300 font-medium';
                button.onclick = () => showStoreSection(category.id);
                button.innerHTML = `<i class="${category.icon} mr-2"></i>${category.name}`;
                container.appendChild(button);
            });
        }

        function renderAdminCategories() {
            const container = document.getElementById('admin-categories-list');
            container.innerHTML = '';

            Object.values(categories).forEach(category => {
                const productsInCategory = Object.values(products).filter(p => p.category === category.id).length;
                
                const categoryCard = document.createElement('div');
                categoryCard.className = 'bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow';
                
                categoryCard.innerHTML = `
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex items-center space-x-3">
                            <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                                ${category.emoji ? 
                                    `<span class="text-2xl">${category.emoji}</span>` : 
                                    `<i class="${category.icon} text-purple-600 text-xl"></i>`
                                }
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-800">${category.name}</h3>
                                <p class="text-sm text-gray-600">${category.description || 'Sem descri√ß√£o'}</p>
                            </div>
                        </div>
                        <div class="text-right">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${productsInCategory > 0 ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                                ${productsInCategory} produto${productsInCategory !== 1 ? 's' : ''}
                            </span>
                        </div>
                    </div>
                    
                    <div class="flex items-center justify-between text-sm text-gray-600 mb-4">
                        <span>ID: ${category.id}</span>
                        <span>√çcone: ${category.icon}</span>
                    </div>
                    
                    <div class="flex space-x-2">
                        <button onclick="editCategory('${category.id}')" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-3 rounded text-sm transition-colors">
                            <i class="fas fa-edit mr-1"></i>Editar
                        </button>
                        <button onclick="deleteCategory('${category.id}')" class="flex-1 ${productsInCategory > 0 ? 'bg-gray-400 cursor-not-allowed' : 'bg-red-500 hover:bg-red-600'} text-white py-2 px-3 rounded text-sm transition-colors" ${productsInCategory > 0 ? 'disabled title="N√£o √© poss√≠vel excluir categoria com produtos"' : ''}>
                            <i class="fas fa-trash mr-1"></i>Excluir
                        </button>
                    </div>
                `;
                
                container.appendChild(categoryCard);
            });
        }

        function updateCategoriesSummary() {
            const categoryList = Object.values(categories);
            const totalCategories = categoryList.length;
            const categoriesWithProducts = categoryList.filter(cat => 
                Object.values(products).some(p => p.category === cat.id)
            ).length;
            const activeCategories = totalCategories; // All categories are active by default
            const emptyCategories = totalCategories - categoriesWithProducts;

            document.getElementById('totalCategories').textContent = totalCategories;
            document.getElementById('categoriesWithProducts').textContent = categoriesWithProducts;
            document.getElementById('activeCategories').textContent = activeCategories;
            document.getElementById('emptyCategories').textContent = emptyCategories;
        }

        function showAddCategoryModal() {
            currentEditingCategory = null;
            document.getElementById('category-form').reset();
            document.getElementById('category-modal-title').textContent = 'Nova Categoria';
            updateCategoryPreview();
            document.getElementById('category-modal').classList.remove('hidden');
        }

        function hideCategoryModal() {
            document.getElementById('category-modal').classList.add('hidden');
            currentEditingCategory = null;
        }

        function editCategory(categoryId) {
            currentEditingCategory = categoryId;
            const category = categories[categoryId];
            
            document.getElementById('categoryName').value = category.name;
            document.getElementById('categoryDescription').value = category.description || '';
            document.getElementById('categoryIcon').value = category.icon || '';
            document.getElementById('categoryEmoji').value = category.emoji || '';
            
            document.getElementById('category-modal-title').textContent = 'Editar Categoria';
            updateCategoryPreview();
            document.getElementById('category-modal').classList.remove('hidden');
        }

        function deleteCategory(categoryId) {
            const category = categories[categoryId];
            const productsInCategory = Object.values(products).filter(p => p.category === categoryId).length;
            
            if (productsInCategory > 0) {
                showNotification(`N√£o √© poss√≠vel excluir a categoria "${category.name}" pois ela possui ${productsInCategory} produto(s)!`, 'error');
                return;
            }
            
            showConfirmationModal(
                `Tem certeza que deseja excluir a categoria "${category.name}"? Esta a√ß√£o n√£o pode ser desfeita.`,
                () => {
                    delete categories[categoryId];
                    saveData();
                    renderAdminCategories();
                    renderStoreNavigation();
                    updateCategoriesSummary();
                    showNotification('Categoria exclu√≠da com sucesso!', 'success');
                }
            );
        }

        function updateCategoryPreview() {
            const name = document.getElementById('categoryName').value || 'Nome da Categoria';
            const description = document.getElementById('categoryDescription').value || 'Descri√ß√£o da categoria';
            const icon = document.getElementById('categoryIcon').value;
            const emoji = document.getElementById('categoryEmoji').value;
            
            document.getElementById('preview-name').textContent = name;
            document.getElementById('preview-description').textContent = description;
            
            const iconElement = document.getElementById('preview-icon');
            const emojiElement = document.getElementById('preview-emoji');
            
            if (emoji) {
                iconElement.classList.add('hidden');
                emojiElement.classList.remove('hidden');
                emojiElement.textContent = emoji;
            } else {
                emojiElement.classList.add('hidden');
                iconElement.classList.remove('hidden');
                iconElement.className = icon || 'fas fa-tag text-purple-600';
            }
        }

        // Quick Credential Change Functions
        function showQuickCredentialChange() {
            document.getElementById('quick-credential-modal').classList.remove('hidden');
            document.getElementById('quick-username').value = '';
            document.getElementById('quick-password').value = '';
            document.getElementById('quick-password-confirm').value = '';
            document.getElementById('quick-username').focus();
        }

        function hideQuickCredentialModal() {
            document.getElementById('quick-credential-modal').classList.add('hidden');
        }

        // Admin Login Functions
        function showAdminLogin() {
            if (isAdminLoggedIn) {
                toggleAdminPanel();
            } else {
                document.getElementById('admin-login-modal').classList.remove('hidden');
                document.getElementById('login-error').classList.add('hidden');
                document.getElementById('admin-username').value = '';
                document.getElementById('admin-password').value = '';
                document.getElementById('admin-username').focus();
            }
        }

        function hideAdminLoginModal() {
            document.getElementById('admin-login-modal').classList.add('hidden');
        }

        function authenticateAdmin(username, password) {
            return username === settings.adminUsername && password === settings.adminPassword;
        }

        function logoutAdmin() {
            isAdminLoggedIn = false;
            document.getElementById('admin-panel').classList.add('hidden');
            showNotification('Logout realizado com sucesso!', 'success');
        }

        // Admin Functions
        function toggleAdminPanel() {
            const panel = document.getElementById('admin-panel');
            panel.classList.toggle('hidden');
            
            if (!panel.classList.contains('hidden')) {
                renderAdminCategories();
                updateCategoriesSummary();
                renderAdminProducts();
                renderAdminOrders();
                renderAdminCustomers();
                updateCustomersSummary();
                updateStockSummary();
                renderStockTable();
                loadSettings();
            }
        }

        function showAdminTab(tabName) {
            document.querySelectorAll('.admin-tab-content').forEach(tab => {
                tab.classList.add('hidden');
            });
            
            document.querySelectorAll('.admin-tab-btn').forEach(btn => {
                btn.classList.remove('tab-active');
                btn.classList.add('text-gray-600', 'hover:text-amber-700', 'hover:bg-amber-50');
            });
            
            document.getElementById(`admin-${tabName}-tab`).classList.remove('hidden');
            
            event.target.classList.remove('text-gray-600', 'hover:text-purple-600', 'hover:bg-purple-50');
            event.target.classList.add('tab-active');
            
            if (tabName === 'stock') {
                updateStockSummary();
                renderStockTable();
            }
        }

        function renderAdminProducts() {
            const container = document.getElementById('admin-products-list');
            container.innerHTML = '';

            Object.values(products).forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow';
                
                const stockStatus = getStockStatusClass(product);
                const stockText = getStockStatusText(product);
                
                const typeColors = {
                    'pronta_entrega': 'bg-green-100 text-green-800',
                    'encomenda': 'bg-blue-100 text-blue-800',
                    'ambos': 'bg-purple-100 text-purple-800'
                };
                
                const typeTexts = {
                    'pronta_entrega': 'Pronta Entrega',
                    'encomenda': 'Encomenda',
                    'ambos': 'Ambos'
                };
                
                productCard.innerHTML = `
                    <div class="flex justify-between items-start mb-3">
                        <div class="flex items-center space-x-3">
                            <div class="w-12 h-12 flex items-center justify-center">
                                <span class="text-2xl">${product.emoji}</span>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-800">${product.name}</h3>
                                <p class="text-sm text-gray-600">${product.category}</p>
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${typeColors[product.type]}">
                                    ${typeTexts[product.type]}
                                </span>
                            </div>
                        </div>
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${stockStatus.replace('bg-', 'bg-').replace('-500', '-100')} ${stockStatus.replace('bg-', 'text-').replace('-500', '-800')}">
                            ${stockText}
                        </span>
                    </div>
                    <p class="text-gray-600 text-sm mb-3">${product.description || 'Sem descri√ß√£o'}</p>
                    <div class="flex justify-between items-center mb-3">
                        <span class="text-lg font-bold text-pink-600">R$ ${product.price.toFixed(2)}</span>
                        <span class="text-sm text-gray-600">Estoque: ${product.stock}</span>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="editProduct('${product.id}')" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-3 rounded text-sm transition-colors">
                            <i class="fas fa-edit mr-1"></i>Editar
                        </button>
                        <button onclick="deleteProduct('${product.id}')" class="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-3 rounded text-sm transition-colors">
                            <i class="fas fa-trash mr-1"></i>Excluir
                        </button>
                    </div>
                `;
                
                container.appendChild(productCard);
            });
        }

        function renderAdminOrders() {
            const container = document.getElementById('admin-orders-list');
            container.innerHTML = '';

            const ordersList = Object.values(orders);
            const filter = document.getElementById('order-filter')?.value || 'all';
            
            const filteredOrders = filter === 'all' ? ordersList : ordersList.filter(order => order.status === filter);

            filteredOrders.forEach(order => {
                const orderCard = document.createElement('div');
                orderCard.className = 'bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow';
                
                const statusColors = {
                    'aguardando_pagamento': 'bg-orange-100 text-orange-800',
                    'pendente': 'bg-yellow-100 text-yellow-800',
                    'confirmado': 'bg-blue-100 text-blue-800',
                    'em_producao': 'bg-purple-100 text-purple-800',
                    'pronto': 'bg-green-100 text-green-800',
                    'entregue': 'bg-gray-100 text-gray-800',
                    'cancelado': 'bg-red-100 text-red-800'
                };
                
                const typeColors = {
                    'pronta_entrega': 'bg-green-100 text-green-800',
                    'encomenda': 'bg-blue-100 text-blue-800'
                };
                
                const typeTexts = {
                    'pronta_entrega': 'Pronta Entrega',
                    'encomenda': 'Encomenda'
                };
                
                orderCard.innerHTML = `
                    <div class="flex justify-between items-start mb-3">
                        <div>
                            <div class="flex items-center space-x-2 mb-2">
                                <h3 class="font-semibold text-gray-800">Pedido #${order.id}</h3>
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${typeColors[order.type]}">
                                    ${typeTexts[order.type]}
                                </span>
                            </div>
                            <p class="text-sm text-gray-600">Cliente: ${order.customer.name}</p>
                            <p class="text-sm text-gray-600">üì± ${order.customer.phone}</p>
                            <p class="text-sm text-gray-600">‚úâÔ∏è ${order.customer.email}</p>
                            ${order.customer.cpf ? `<p class="text-sm text-gray-600">üÜî CPF: ${order.customer.cpf}</p>` : ''}
                        </div>
                        <div class="text-right">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColors[order.status] || statusColors.pendente}">
                                ${order.status.replace('_', ' ').toUpperCase()}
                            </span>
                            <p class="text-sm text-gray-600 mt-1">üí≥ ${order.paymentMethod || 'N/A'}</p>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <h4 class="text-sm font-medium text-gray-700 mb-2">Itens:</h4>
                        <ul class="text-sm text-gray-600 space-y-1">
                            ${order.items.map(item => 
                                `<li>‚Ä¢ ${item.name} (${item.quantity}x) - R$ ${(item.price * item.quantity).toFixed(2)}</li>`
                            ).join('')}
                        </ul>
                    </div>
                    
                    <div class="mb-3">
                        <h4 class="text-sm font-medium text-gray-700 mb-2">Entrega:</h4>
                        <p class="text-sm text-gray-600">${order.delivery.address}, ${order.delivery.number}</p>
                        ${order.delivery.complement ? `<p class="text-sm text-gray-600">${order.delivery.complement}</p>` : ''}
                        <p class="text-sm text-gray-600">${order.delivery.neighborhood} - ${order.delivery.city}</p>
                        <p class="text-sm text-gray-600">CEP: ${order.delivery.cep}</p>
                        ${order.delivery.reference ? `<p class="text-sm text-gray-600">üìç ${order.delivery.reference}</p>` : ''}
                        ${order.delivery.date ? `<p class="text-sm text-gray-600">üìÖ ${order.delivery.date} ${order.delivery.time || ''}</p>` : ''}
                    </div>
                    
                    <div class="flex justify-between items-center mb-3">
                        <div class="text-sm text-gray-600">
                            <p>Subtotal: R$ ${order.subtotal.toFixed(2)}</p>
                            <p>Entrega: R$ ${order.deliveryFee.toFixed(2)}</p>
                            <p class="font-bold text-green-600">Total: R$ ${order.total.toFixed(2)}</p>
                        </div>
                        <span class="text-sm text-gray-600">${order.date} ${order.time}</span>
                    </div>
                    
                    ${order.orderData && (order.orderData.eventType || order.orderData.observations) ? `
                        <div class="mb-3">
                            <h4 class="text-sm font-medium text-gray-700 mb-2">Dados da Encomenda:</h4>
                            ${order.orderData.eventType ? `<p class="text-sm text-gray-600"><strong>Evento:</strong> ${order.orderData.eventType}</p>` : ''}
                            ${order.orderData.observations ? `<p class="text-sm text-gray-600"><strong>Observa√ß√µes:</strong> ${order.orderData.observations}</p>` : ''}
                        </div>
                    ` : ''}
                    
                    <div class="flex space-x-2">
                        <select onchange="updateOrderStatus('${order.id}', this.value)" class="flex-1 px-3 py-2 border border-gray-300 rounded text-sm">
                            <option value="aguardando_pagamento" ${order.status === 'aguardando_pagamento' ? 'selected' : ''}>Aguardando Pagamento</option>
                            <option value="pendente" ${order.status === 'pendente' ? 'selected' : ''}>Pendente</option>
                            <option value="confirmado" ${order.status === 'confirmado' ? 'selected' : ''}>Confirmado</option>
                            <option value="em_producao" ${order.status === 'em_producao' ? 'selected' : ''}>Em Produ√ß√£o</option>
                            <option value="pronto" ${order.status === 'pronto' ? 'selected' : ''}>Pronto</option>
                            <option value="entregue" ${order.status === 'entregue' ? 'selected' : ''}>Entregue</option>
                            <option value="cancelado" ${order.status === 'cancelado' ? 'selected' : ''}>Cancelado</option>
                        </select>
                        <button onclick="printOrder('${order.id}')" class="bg-blue-500 hover:bg-blue-600 text-white py-2 px-3 rounded text-sm transition-colors" title="Imprimir Pedido">
                            <i class="fas fa-print"></i>
                        </button>
                        <button onclick="deleteOrder('${order.id}')" class="bg-red-500 hover:bg-red-600 text-white py-2 px-3 rounded text-sm transition-colors">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                
                container.appendChild(orderCard);
            });
        }

        function filterOrders() {
            renderAdminOrders();
        }

        function updateOrderStatus(orderId, newStatus) {
            orders[orderId].status = newStatus;
            saveData();
            renderAdminOrders();
            showNotification('Status do pedido atualizado!', 'success');
        }

        function deleteOrder(orderId) {
            const order = orders[orderId];
            showConfirmationModal(
                `Tem certeza que deseja excluir o pedido #${orderId} do cliente ${order.customer.name}? Esta a√ß√£o n√£o pode ser desfeita.`,
                () => {
                    delete orders[orderId];
                    saveData();
                    renderAdminOrders();
                    showNotification('Pedido exclu√≠do com sucesso!', 'success');
                }
            );
        }

        // Stock Management Functions
        function updateStockSummary() {
            const productList = Object.values(products);
            const totalProducts = productList.length;
            const inStockProducts = productList.filter(p => p.type === 'encomenda' || p.stock > p.minStock).length;
            const lowStockProducts = productList.filter(p => p.type !== 'encomenda' && p.stock <= p.minStock && p.stock > 0).length;
            const outOfStockProducts = productList.filter(p => p.type !== 'encomenda' && p.stock === 0).length;

            document.getElementById('totalProducts').textContent = totalProducts;
            document.getElementById('inStockProducts').textContent = inStockProducts;
            document.getElementById('lowStockProducts').textContent = lowStockProducts;
            document.getElementById('outOfStockProducts').textContent = outOfStockProducts;
        }

        function renderStockTable() {
            const tbody = document.getElementById('stock-table-body');
            tbody.innerHTML = '';

            Object.values(products).forEach(product => {
                const row = document.createElement('tr');
                const statusClass = getStockStatusClass(product);
                const statusText = getStockStatusText(product);

                const typeColors = {
                    'pronta_entrega': 'bg-green-100 text-green-800',
                    'encomenda': 'bg-blue-100 text-blue-800',
                    'ambos': 'bg-purple-100 text-purple-800'
                };
                
                const typeTexts = {
                    'pronta_entrega': 'Pronta',
                    'encomenda': 'Encomenda',
                    'ambos': 'Ambos'
                };

                row.innerHTML = `
                    <td class="px-4 py-3">
                        <div class="flex items-center">
                            <div class="w-10 h-10 mr-3 flex items-center justify-center">
                                <span class="text-xl">${product.emoji}</span>
                            </div>
                            <div>
                                <div class="font-medium text-gray-900">${product.name}</div>
                                <div class="text-sm text-gray-500">ID: ${product.id}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-3">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            ${product.category}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${typeColors[product.type]}">
                            ${typeTexts[product.type]}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="text-lg font-semibold ${product.type === 'encomenda' ? 'text-blue-600' : product.stock === 0 ? 'text-red-600' : product.stock <= product.minStock ? 'text-yellow-600' : 'text-green-600'}">
                            ${product.type === 'encomenda' ? '‚àû' : product.stock}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="text-sm text-gray-600">${product.type === 'encomenda' ? 'N/A' : product.minStock}</span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusClass.replace('bg-', 'bg-').replace('-500', '-100')} ${statusClass.replace('bg-', 'text-').replace('-500', '-800')}">
                            ${statusText}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <div class="flex justify-center space-x-2">
                            ${product.type !== 'encomenda' ? `
                                <button onclick="quickStockAdjustment('${product.id}', 'add')" class="text-green-600 hover:text-green-800" title="Adicionar Estoque">
                                    <i class="fas fa-plus-circle"></i>
                                </button>
                                <button onclick="quickStockAdjustment('${product.id}', 'remove')" class="text-red-600 hover:text-red-800" title="Remover Estoque">
                                    <i class="fas fa-minus-circle"></i>
                                </button>
                            ` : ''}
                            <button onclick="editProductStock('${product.id}')" class="text-blue-600 hover:text-blue-800" title="Editar">
                                <i class="fas fa-edit"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function getStockStatusClass(product) {
            if (product.type === 'encomenda') return 'bg-blue-500';
            if (product.stock === 0) return 'bg-red-500';
            if (product.stock <= product.minStock) return 'bg-yellow-500';
            return 'bg-green-500';
        }

        function getStockStatusText(product) {
            if (product.type === 'encomenda') return 'Sob Encomenda';
            if (product.stock === 0) return 'Sem Estoque';
            if (product.stock <= product.minStock) return 'Estoque Baixo';
            return 'Em Estoque';
        }

        function quickStockAdjustment(productId, action) {
            const product = products[productId];
            if (product.type === 'encomenda') {
                showNotification('Produtos por encomenda n√£o t√™m controle de estoque!', 'info');
                return;
            }

            const quantity = parseInt(prompt(`Quantidade para ${action === 'add' ? 'adicionar' : 'remover'}:`));
            if (!quantity || quantity <= 0) return;

            const oldStock = product.stock;
            if (action === 'add') {
                product.stock += quantity;
            } else {
                product.stock = Math.max(0, product.stock - quantity);
            }

            stockMovements.push({
                id: Date.now().toString() + Math.random(),
                productId: productId,
                productName: product.name,
                type: action === 'add' ? 'entrada' : 'saida',
                quantity: quantity,
                oldStock: oldStock,
                newStock: product.stock,
                reason: `Ajuste manual - ${action === 'add' ? 'Entrada' : 'Sa√≠da'}`,
                date: new Date().toISOString().split('T')[0],
                time: new Date().toLocaleTimeString()
            });

            saveData();
            updateStockSummary();
            renderStockTable();
            renderProducts();
            showNotification('Estoque atualizado com sucesso!', 'success');
        }

        function editProductStock(productId) {
            currentEditingProduct = productId;
            const product = products[productId];
            
            loadCategoriesIntoSelect(); // Load categories first
            
            document.getElementById('productName').value = product.name;
            document.getElementById('productPrice').value = product.price;
            document.getElementById('productCategory').value = product.category;
            document.getElementById('productType').value = product.type;
            document.getElementById('productDescription').value = product.description || '';
            document.getElementById('productDetails').value = product.details || '';
            document.getElementById('productStock').value = product.stock;
            document.getElementById('productMinStock').value = product.minStock;
            
            // Handle existing image
            const fileInput = document.getElementById('productImage');
            const imagePreview = document.getElementById('image-preview');
            const previewImg = document.getElementById('preview-img');
            
            if (product.image) {
                previewImg.src = product.image;
                imagePreview.classList.remove('hidden');
                fileInput.dataset.imageData = product.image;
            } else {
                imagePreview.classList.add('hidden');
                previewImg.src = '';
                delete fileInput.dataset.imageData;
            }
            
            document.getElementById('product-modal-title').textContent = 'Editar Produto';
            document.getElementById('product-modal').classList.remove('hidden');
        }

        function showAddProductModal() {
            currentEditingProduct = null;
            document.getElementById('product-form').reset();
            document.getElementById('product-modal-title').textContent = 'Novo Produto';
            loadCategoriesIntoSelect();
            
            // Clear image preview
            const imagePreview = document.getElementById('image-preview');
            const previewImg = document.getElementById('preview-img');
            const fileInput = document.getElementById('productImage');
            
            imagePreview.classList.add('hidden');
            previewImg.src = '';
            delete fileInput.dataset.imageData;
            
            document.getElementById('product-modal').classList.remove('hidden');
        }

        function loadCategoriesIntoSelect() {
            const select = document.getElementById('productCategory');
            const currentValue = select.value;
            
            // Clear existing options except the first one
            select.innerHTML = '<option value="">Selecione uma categoria</option>';
            
            // Add category options
            Object.values(categories).forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                select.appendChild(option);
            });
            
            // Restore previous value if it exists
            if (currentValue) {
                select.value = currentValue;
            }
        }

        function hideProductModal() {
            document.getElementById('product-modal').classList.add('hidden');
            currentEditingProduct = null;
        }

        function editProduct(productId) {
            editProductStock(productId);
        }

        function deleteProduct(productId) {
            const product = products[productId];
            showConfirmationModal(
                `Tem certeza que deseja excluir o produto "${product.name}"? Esta a√ß√£o n√£o pode ser desfeita.`,
                () => {
                    delete products[productId];
                    saveData();
                    renderAdminProducts();
                    renderProducts();
                    updateStockSummary();
                    renderStockTable();
                    showNotification('Produto exclu√≠do com sucesso!', 'success');
                }
            );
        }

        function showStockMovementModal() {
            const select = document.getElementById('stockProductSelect');
            select.innerHTML = '';
            
            Object.values(products).forEach(product => {
                if (product.type !== 'encomenda') {
                    const option = document.createElement('option');
                    option.value = product.id;
                    option.textContent = product.name;
                    select.appendChild(option);
                }
            });
            
            document.getElementById('stock-movement-modal').classList.remove('hidden');
        }

        function hideStockMovementModal() {
            document.getElementById('stock-movement-modal').classList.add('hidden');
        }

        function showLowStockAlert() {
            const lowStockProducts = Object.values(products).filter(p => 
                p.type !== 'encomenda' && p.stock <= p.minStock
            );
            
            if (lowStockProducts.length === 0) {
                showNotification('Nenhum produto com estoque baixo!', 'success');
                return;
            }
            
            const message = `Produtos com estoque baixo:\n${lowStockProducts.map(p => 
                `‚Ä¢ ${p.name}: ${p.stock} unidades`
            ).join('\n')}`;
            
            alert(message);
        }

        function loadSettings() {
            document.getElementById('confeitariaNameInput').value = settings.confeitariaName;
            document.getElementById('phoneInput').value = settings.phone;
            document.getElementById('emailInput').value = settings.email;
            document.getElementById('addressInput').value = settings.address;
            document.getElementById('baseDeliveryFee').value = settings.baseDeliveryFee;
            document.getElementById('kmDeliveryFee').value = settings.kmDeliveryFee;
            document.getElementById('freeDeliveryThreshold').value = settings.freeDeliveryThreshold;
            
            // Load admin credentials
            document.getElementById('adminUsernameInput').value = settings.adminUsername;
            // Don't load password for security
            
            // Load Asaas settings
            document.getElementById('asaasApiKey').value = settings.asaasApiKey;
            document.getElementById('asaasEnvironment').value = settings.asaasEnvironment;
            document.getElementById('asaasWalletId').value = settings.asaasWalletId;
            
            // Load payment settings
            document.getElementById('enablePix').checked = settings.enablePix;
            document.getElementById('enableCreditCard').checked = settings.enableCreditCard;
            document.getElementById('enableDebitCard').checked = settings.enableDebitCard;
            document.getElementById('enableBoleto').checked = settings.enableBoleto;
            document.getElementById('enableEncomenda').checked = settings.enableEncomenda;
            
            document.getElementById('pixFee').value = settings.pixFee;
            document.getElementById('pixDiscountPercent').value = settings.pixDiscountPercent;
            document.getElementById('creditCardFeePercent').value = settings.creditCardFeePercent;
            document.getElementById('debitCardFeePercent').value = settings.debitCardFeePercent;
            document.getElementById('boletoFee').value = settings.boletoFee;
            document.getElementById('installmentFeePercent').value = settings.installmentFeePercent;
            
            document.getElementById('maxInstallments').value = settings.maxInstallments;
            document.getElementById('minInstallmentValue').value = settings.minInstallmentValue;
            
            // Load backup settings
            document.getElementById('googleSheetsUrl').value = settings.googleSheetsUrl;
            document.getElementById('autoBackupInterval').value = settings.autoBackupInterval;
            document.getElementById('lastBackupDate').value = settings.lastBackupDate ? 
                new Date(settings.lastBackupDate).toLocaleString('pt-BR') : 'Nunca';
            
            // Load logo
            const logoPreview = document.getElementById('logo-preview');
            const previewLogo = document.getElementById('preview-logo');
            const logoInput = document.getElementById('logoInput');
            
            if (settings.logo) {
                previewLogo.src = settings.logo;
                logoPreview.classList.remove('hidden');
                logoInput.dataset.logoData = settings.logo;
            } else {
                logoPreview.classList.add('hidden');
                previewLogo.src = '';
                delete logoInput.dataset.logoData;
            }
            
            // Load saved customer data info
            showSavedCustomerData();
            
            // Load carousel settings
            loadCarouselSettings();
        }

        // Google Sheets Backup Functions
        function initializeAutoBackup() {
            if (settings.autoBackupInterval !== 'disabled' && settings.googleSheetsUrl) {
                scheduleNextBackup();
            }
        }

        function scheduleNextBackup() {
            if (settings.autoBackupInterval === 'disabled' || !settings.googleSheetsUrl) {
                return;
            }

            const intervals = {
                'daily': 24 * 60 * 60 * 1000, // 24 hours
                'weekly': 7 * 24 * 60 * 60 * 1000, // 7 days
                'monthly': 30 * 24 * 60 * 60 * 1000 // 30 days
            };

            const interval = intervals[settings.autoBackupInterval];
            if (!interval) return;

            const lastBackup = settings.lastBackupDate ? new Date(settings.lastBackupDate) : new Date(0);
            const nextBackup = new Date(lastBackup.getTime() + interval);
            const now = new Date();

            if (now >= nextBackup) {
                // Time for backup
                performAutomaticBackup();
            } else {
                // Schedule next check
                const timeUntilNextCheck = Math.min(interval, 60 * 60 * 1000); // Check every hour max
                setTimeout(scheduleNextBackup, timeUntilNextCheck);
            }
        }

        function performAutomaticBackup() {
            if (!settings.googleSheetsUrl || settings.autoBackupInterval === 'disabled') {
                return;
            }

            performBackup()
                .then(() => {
                    console.log('Backup autom√°tico realizado com sucesso');
                    scheduleNextBackup(); // Schedule next backup
                })
                .catch(error => {
                    console.error('Erro no backup autom√°tico:', error);
                    // Try again in 1 hour
                    setTimeout(scheduleNextBackup, 60 * 60 * 1000);
                });
        }

        function performManualBackup() {
            if (!settings.googleSheetsUrl) {
                showNotification('Configure a URL da planilha Google primeiro!', 'error');
                return;
            }

            showNotification('Iniciando backup...', 'info');
            
            performBackup()
                .then(() => {
                    showNotification('Backup realizado com sucesso!', 'success');
                })
                .catch(error => {
                    showNotification(`Erro no backup: ${error.message}`, 'error');
                });
        }

        function performBackup() {
            const backupData = {
                timestamp: new Date().toISOString(),
                confeitaria: settings.confeitariaName,
                products: products,
                orders: orders,
                customers: customers,
                categories: categories,
                stockMovements: stockMovements,
                settings: {
                    // Only backup non-sensitive settings
                    confeitariaName: settings.confeitariaName,
                    phone: settings.phone,
                    email: settings.email,
                    address: settings.address,
                    baseDeliveryFee: settings.baseDeliveryFee,
                    kmDeliveryFee: settings.kmDeliveryFee,
                    freeDeliveryThreshold: settings.freeDeliveryThreshold
                }
            };

            return fetch(settings.googleSheetsUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(backupData)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    settings.lastBackupDate = new Date().toISOString();
                    settings.backupEnabled = true;
                    saveData();
                    
                    // Update UI
                    document.getElementById('lastBackupDate').value = new Date().toLocaleString('pt-BR');
                    
                    return result;
                } else {
                    throw new Error(result.message || 'Erro desconhecido no backup');
                }
            });
        }

        function testGoogleSheetsConnection() {
            if (!settings.googleSheetsUrl) {
                showNotification('Digite a URL da planilha Google primeiro!', 'error');
                return;
            }

            showNotification('Testando conex√£o...', 'info');

            const testData = {
                test: true,
                timestamp: new Date().toISOString(),
                message: 'Teste de conex√£o'
            };

            fetch(settings.googleSheetsUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(testData)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showNotification('Conex√£o testada com sucesso! ‚úÖ', 'success');
                } else {
                    showNotification(`Erro na conex√£o: ${result.message}`, 'error');
                }
            })
            .catch(error => {
                showNotification(`Erro na conex√£o: ${error.message}`, 'error');
            });
        }

        function showBackupInstructions() {
            document.getElementById('backup-instructions-modal').classList.remove('hidden');
        }

        function hideBackupInstructions() {
            document.getElementById('backup-instructions-modal').classList.add('hidden');
        }

        function copyAppsScriptCode() {
            const code = document.getElementById('apps-script-code').textContent;
            navigator.clipboard.writeText(code).then(() => {
                showNotification('C√≥digo copiado para a √°rea de transfer√™ncia!', 'success');
            }).catch(() => {
                showNotification('Erro ao copiar c√≥digo', 'error');
            });
        }

        function downloadAppsScriptCode() {
            const code = document.getElementById('apps-script-code').textContent;
            const blob = new Blob([code], { type: 'text/javascript' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'backup-confeitaria.gs';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            showNotification('Arquivo baixado!', 'success');
        }

        function showSavedCustomerData() {
            const container = document.getElementById('saved-customer-info');
            
            if (!customerData.name) {
                container.innerHTML = `
                    <div class="bg-gray-100 p-4 rounded-lg text-center">
                        <i class="fas fa-user-slash text-gray-400 text-2xl mb-2"></i>
                        <p class="text-gray-600">Nenhum dado de cliente salvo</p>
                    </div>
                `;
                return;
            }
            
            const lastUsed = customerData.lastUsed ? new Date(customerData.lastUsed).toLocaleDateString('pt-BR') : 'N/A';
            
            container.innerHTML = `
                <div class="bg-white p-4 rounded-lg border">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                            <p><strong>üë§ Nome:</strong> ${customerData.name || 'N/A'}</p>
                            <p><strong>üì± Telefone:</strong> ${customerData.phone || 'N/A'}</p>
                            <p><strong>‚úâÔ∏è Email:</strong> ${customerData.email || 'N/A'}</p>
                            <p><strong>üÜî CPF:</strong> ${customerData.cpf || 'N/A'}</p>
                        </div>
                        <div>
                            <p><strong>üìç CEP:</strong> ${customerData.cep || 'N/A'}</p>
                            <p><strong>üèôÔ∏è Cidade:</strong> ${customerData.city || 'N/A'}</p>
                            <p><strong>üè† Endere√ßo:</strong> ${customerData.address || 'N/A'}, ${customerData.number || 'N/A'}</p>
                            <p><strong>üèòÔ∏è Bairro:</strong> ${customerData.neighborhood || 'N/A'}</p>
                            <p><strong>üìÖ √öltimo uso:</strong> ${lastUsed}</p>
                        </div>
                    </div>
                </div>
            `;
        }

        // Form event listeners
        document.getElementById('category-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const categoryData = {
                name: document.getElementById('categoryName').value,
                description: document.getElementById('categoryDescription').value,
                icon: document.getElementById('categoryIcon').value || 'fas fa-tag',
                emoji: document.getElementById('categoryEmoji').value
            };
            
            if (currentEditingCategory) {
                categories[currentEditingCategory] = { ...categories[currentEditingCategory], ...categoryData };
                showNotification('Categoria atualizada com sucesso!', 'success');
            } else {
                const newId = categoryData.name.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
                
                // Check if ID already exists
                if (categories[newId]) {
                    showNotification('J√° existe uma categoria com este nome!', 'error');
                    return;
                }
                
                categories[newId] = { id: newId, ...categoryData };
                showNotification('Categoria criada com sucesso!', 'success');
            }
            
            saveData();
            renderAdminCategories();
            renderStoreNavigation();
            updateCategoriesSummary();
            hideCategoryModal();
        });

        // Add event listeners for category preview
        document.getElementById('categoryName').addEventListener('input', updateCategoryPreview);
        document.getElementById('categoryDescription').addEventListener('input', updateCategoryPreview);
        document.getElementById('categoryIcon').addEventListener('input', updateCategoryPreview);
        document.getElementById('categoryEmoji').addEventListener('input', updateCategoryPreview);

        // Quick credential form event listener
        document.getElementById('quick-credential-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const username = document.getElementById('quick-username').value;
            const password = document.getElementById('quick-password').value;
            const confirmPassword = document.getElementById('quick-password-confirm').value;
            
            if (password !== confirmPassword) {
                showNotification('As senhas n√£o coincidem!', 'error');
                return;
            }
            
            if (password.length < 6) {
                showNotification('A senha deve ter pelo menos 6 caracteres!', 'error');
                return;
            }
            
            // Update credentials
            settings.adminUsername = username;
            settings.adminPassword = password;
            saveData();
            
            hideQuickCredentialModal();
            hideAdminLoginModal();
            
            showNotification('Credenciais alteradas com sucesso! Use suas novas credenciais para fazer login.', 'success');
        });

        // Admin login form event listener
        document.getElementById('admin-login-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const username = document.getElementById('admin-username').value;
            const password = document.getElementById('admin-password').value;
            
            if (authenticateAdmin(username, password)) {
                isAdminLoggedIn = true;
                hideAdminLoginModal();
                toggleAdminPanel();
                showNotification('Login realizado com sucesso!', 'success');
            } else {
                document.getElementById('login-error').classList.remove('hidden');
                document.getElementById('admin-password').value = '';
                document.getElementById('admin-password').focus();
            }
        });

        document.getElementById('product-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const fileInput = document.getElementById('productImage');
            const imageData = fileInput.dataset.imageData || '';
            
            const productData = {
                name: document.getElementById('productName').value,
                price: parseFloat(document.getElementById('productPrice').value),
                category: document.getElementById('productCategory').value,
                type: document.getElementById('productType').value,
                description: document.getElementById('productDescription').value,
                details: document.getElementById('productDetails').value,
                image: imageData,
                stock: parseInt(document.getElementById('productStock').value) || 0,
                minStock: parseInt(document.getElementById('productMinStock').value) || 5,
                emoji: getEmojiForCategory(document.getElementById('productCategory').value)
            };
            
            if (currentEditingProduct) {
                products[currentEditingProduct] = { ...products[currentEditingProduct], ...productData };
                showNotification('Produto atualizado com sucesso!', 'success');
            } else {
                const newId = Date.now().toString();
                products[newId] = { id: newId, ...productData };
                showNotification('Produto criado com sucesso!', 'success');
            }
            
            saveData();
            renderAdminProducts();
            renderProducts();
            updateStockSummary();
            renderStockTable();
            hideProductModal();
        });

        document.getElementById('stock-movement-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const productId = document.getElementById('stockProductSelect').value;
            const movementType = document.getElementById('movementType').value;
            const quantity = parseInt(document.getElementById('movementQuantity').value);
            const reason = document.getElementById('movementReason').value;
            
            if (!productId || !quantity || quantity <= 0) {
                showNotification('Preencha todos os campos corretamente!', 'error');
                return;
            }
            
            const product = products[productId];
            const oldStock = product.stock;
            
            if (movementType === 'entrada') {
                product.stock += quantity;
            } else if (movementType === 'saida') {
                product.stock = Math.max(0, product.stock - quantity);
            } else if (movementType === 'ajuste') {
                product.stock = quantity;
            }
            
            stockMovements.push({
                id: Date.now().toString() + Math.random(),
                productId: productId,
                productName: product.name,
                type: movementType,
                quantity: quantity,
                oldStock: oldStock,
                newStock: product.stock,
                reason: reason,
                date: new Date().toISOString().split('T')[0],
                time: new Date().toLocaleTimeString()
            });
            
            saveData();
            updateStockSummary();
            renderStockTable();
            renderProducts();
            hideStockMovementModal();
            showNotification('Movimenta√ß√£o registrada com sucesso!', 'success');
        });

        document.getElementById('customer-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const customerData = {
                name: document.getElementById('customerFullName').value,
                phone: document.getElementById('customerPhoneNumber').value,
                email: document.getElementById('customerEmailAddress').value,
                cpf: document.getElementById('customerCPF').value,
                birthDate: document.getElementById('customerBirthDate').value,
                cep: document.getElementById('customerCEP').value,
                city: document.getElementById('customerCity').value,
                address: document.getElementById('customerAddress').value,
                number: document.getElementById('customerNumber').value,
                complement: document.getElementById('customerComplement').value,
                neighborhood: document.getElementById('customerNeighborhood').value,
                notes: document.getElementById('customerNotes').value
            };
            
            if (currentEditingCustomer) {
                customers[currentEditingCustomer] = { 
                    ...customers[currentEditingCustomer], 
                    ...customerData,
                    updatedAt: new Date().toISOString()
                };
                showNotification('Cliente atualizado com sucesso!', 'success');
            } else {
                // Check if email already exists
                const existingCustomer = Object.values(customers).find(c => c.email === customerData.email);
                if (existingCustomer) {
                    showNotification('J√° existe um cliente com este email!', 'error');
                    return;
                }
                
                const newId = Date.now().toString();
                customers[newId] = { 
                    id: newId, 
                    ...customerData,
                    createdAt: new Date().toISOString()
                };
                showNotification('Cliente cadastrado com sucesso!', 'success');
            }
            
            saveData();
            renderAdminCustomers();
            updateCustomersSummary();
            hideCustomerModal();
        });

        document.getElementById('settings-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const logoInput = document.getElementById('logoInput');
            const logoData = logoInput.dataset.logoData || '';
            
            settings.confeitariaName = document.getElementById('confeitariaNameInput').value;
            settings.phone = document.getElementById('phoneInput').value;
            settings.email = document.getElementById('emailInput').value;
            settings.address = document.getElementById('addressInput').value;
            settings.logo = logoData;
            settings.baseDeliveryFee = parseFloat(document.getElementById('baseDeliveryFee').value);
            settings.kmDeliveryFee = parseFloat(document.getElementById('kmDeliveryFee').value);
            settings.freeDeliveryThreshold = parseFloat(document.getElementById('freeDeliveryThreshold').value);
            
            // Asaas settings
            settings.asaasApiKey = document.getElementById('asaasApiKey').value;
            settings.asaasEnvironment = document.getElementById('asaasEnvironment').value;
            settings.asaasWalletId = document.getElementById('asaasWalletId').value;
            
            // Payment settings
            settings.enablePix = document.getElementById('enablePix').checked;
            settings.enableCreditCard = document.getElementById('enableCreditCard').checked;
            settings.enableDebitCard = document.getElementById('enableDebitCard').checked;
            settings.enableBoleto = document.getElementById('enableBoleto').checked;
            settings.enableEncomenda = document.getElementById('enableEncomenda').checked;
            
            settings.pixFee = parseFloat(document.getElementById('pixFee').value) || 0;
            settings.pixDiscountPercent = parseFloat(document.getElementById('pixDiscountPercent').value) || 0;
            settings.creditCardFeePercent = parseFloat(document.getElementById('creditCardFeePercent').value) || 0;
            settings.debitCardFeePercent = parseFloat(document.getElementById('debitCardFeePercent').value) || 0;
            settings.boletoFee = parseFloat(document.getElementById('boletoFee').value) || 0;
            settings.installmentFeePercent = parseFloat(document.getElementById('installmentFeePercent').value) || 0;
            
            settings.maxInstallments = parseInt(document.getElementById('maxInstallments').value) || 12;
            settings.minInstallmentValue = parseFloat(document.getElementById('minInstallmentValue').value) || 10;
            
            // Backup settings
            settings.googleSheetsUrl = document.getElementById('googleSheetsUrl').value;
            settings.autoBackupInterval = document.getElementById('autoBackupInterval').value;
            
            // Carousel settings
            settings.carouselImages.forEach((slide, index) => {
                const titleInput = document.getElementById(`carousel-title-${index}`);
                const subtitleInput = document.getElementById(`carousel-subtitle-${index}`);
                const imageInput = document.getElementById(`carousel-image-${index}`);
                
                if (titleInput) slide.title = titleInput.value;
                if (subtitleInput) slide.subtitle = subtitleInput.value;
                if (imageInput && imageInput.dataset.imageData) {
                    slide.image = imageInput.dataset.imageData;
                }
            });
            
            // Update admin credentials if provided
            const newUsername = document.getElementById('adminUsernameInput').value;
            const newPassword = document.getElementById('adminPasswordInput').value;
            
            if (newUsername && newUsername !== settings.adminUsername) {
                settings.adminUsername = newUsername;
                showNotification('Usu√°rio administrador atualizado!', 'success');
            }
            
            if (newPassword && newPassword.length >= 6) {
                settings.adminPassword = newPassword;
                document.getElementById('adminPasswordInput').value = ''; // Clear password field
                showNotification('Senha administrador atualizada!', 'success');
            } else if (newPassword && newPassword.length < 6) {
                showNotification('A senha deve ter pelo menos 6 caracteres!', 'error');
                return;
            }
            
            // Update header
            document.getElementById('store-name').textContent = settings.confeitariaName;
            document.getElementById('store-phone').textContent = settings.phone;
            document.getElementById('store-email').textContent = settings.email;
            updateStoreLogo();
            
            saveData();
            
            // Update carousel display
            updateCarouselImages();
            
            // Restart auto backup if settings changed
            initializeAutoBackup();
            
            showNotification('Configura√ß√µes salvas com sucesso!', 'success');
        });

        function checkAsaasPaymentStatus(orderId) {
            const order = orders[orderId];
            if (!order || !order.asaasPaymentId) {
                showNotification('Pedido n√£o encontrado!', 'error');
                return;
            }

            showNotification('Verificando status do pagamento...', 'info');

            fetch(`${getAsaasBaseUrl()}/payments/${order.asaasPaymentId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'access_token': settings.asaasApiKey
                }
            })
            .then(response => response.json())
            .then(paymentData => {
                if (paymentData.errors) {
                    throw new Error(paymentData.errors[0].description);
                }

                // Update order status based on Asaas payment status
                if (paymentData.status === 'CONFIRMED' || paymentData.status === 'RECEIVED') {
                    order.status = 'confirmado';
                    order.paymentConfirmed = true;
                    order.paymentDate = new Date().toISOString();
                    order.asaasPaymentStatus = paymentData.status;
                    
                    saveData();
                    showNotification('Pagamento confirmado!', 'success');
                    showPaymentSuccess(orderId, order.paymentMethod);
                } else if (paymentData.status === 'OVERDUE' || paymentData.status === 'REFUNDED') {
                    order.status = 'cancelado';
                    order.asaasPaymentStatus = paymentData.status;
                    saveData();
                    showNotification('Pagamento cancelado ou expirado!', 'error');
                } else {
                    showNotification(`Status do pagamento: ${paymentData.status}`, 'info');
                }
            })
            .catch(error => {
                console.error('Error checking payment status:', error);
                showNotification(`Erro ao verificar pagamento: ${error.message}`, 'error');
            });
        }

        function getEmojiForCategory(category) {
            const emojis = {
                'bolos': 'üéÇ',
                'doces': 'üç´',
                'salgados': 'ü•ü',
                'bebidas': 'ü•§'
            };
            return emojis[category] || 'üç∞';
        }

        // Print Order Function
        function printOrder(orderId) {
            const order = orders[orderId];
            if (!order) {
                showNotification('Pedido n√£o encontrado!', 'error');
                return;
            }

            // Create a new window for printing
            const printWindow = window.open('', '_blank', 'width=800,height=600');
            
            const typeTexts = {
                'pronta_entrega': 'Pronta Entrega',
                'encomenda': 'Encomenda'
            };

            const statusTexts = {
                'aguardando_pagamento': 'Aguardando Pagamento',
                'pendente': 'Pendente',
                'confirmado': 'Confirmado',
                'em_producao': 'Em Produ√ß√£o',
                'pronto': 'Pronto',
                'entregue': 'Entregue',
                'cancelado': 'Cancelado'
            };

            const paymentTexts = {
                'pix': 'PIX',
                'credit_card': 'Cart√£o de Cr√©dito',
                'encomenda': 'Encomenda (50% + 50%)'
            };

            const printContent = `
                <!DOCTYPE html>
                <html lang="pt-BR">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Pedido #${order.id} - ${settings.confeitariaName}</title>
                    <style>
                        * {
                            margin: 0;
                            padding: 0;
                            box-sizing: border-box;
                        }
                        
                        body {
                            font-family: Arial, sans-serif;
                            font-size: 12px;
                            line-height: 1.4;
                            color: #333;
                            max-width: 800px;
                            margin: 0 auto;
                            padding: 20px;
                        }
                        
                        .header {
                            text-align: center;
                            border-bottom: 2px solid #333;
                            padding-bottom: 15px;
                            margin-bottom: 20px;
                        }
                        
                        .header h1 {
                            font-size: 24px;
                            color: #8B5CF6;
                            margin-bottom: 5px;
                        }
                        
                        .header p {
                            font-size: 14px;
                            color: #666;
                        }
                        
                        .order-info {
                            display: grid;
                            grid-template-columns: 1fr 1fr;
                            gap: 20px;
                            margin-bottom: 20px;
                        }
                        
                        .info-section {
                            border: 1px solid #ddd;
                            padding: 15px;
                            border-radius: 5px;
                        }
                        
                        .info-section h3 {
                            font-size: 14px;
                            font-weight: bold;
                            margin-bottom: 10px;
                            color: #8B5CF6;
                            border-bottom: 1px solid #eee;
                            padding-bottom: 5px;
                        }
                        
                        .info-section p {
                            margin-bottom: 5px;
                        }
                        
                        .items-section {
                            margin: 20px 0;
                        }
                        
                        .items-table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-bottom: 15px;
                        }
                        
                        .items-table th,
                        .items-table td {
                            border: 1px solid #ddd;
                            padding: 8px;
                            text-align: left;
                        }
                        
                        .items-table th {
                            background-color: #f8f9fa;
                            font-weight: bold;
                        }
                        
                        .items-table .text-right {
                            text-align: right;
                        }
                        
                        .totals {
                            float: right;
                            width: 300px;
                            border: 1px solid #ddd;
                            padding: 15px;
                            margin-top: 10px;
                        }
                        
                        .totals .total-line {
                            display: flex;
                            justify-content: space-between;
                            margin-bottom: 5px;
                        }
                        
                        .totals .total-final {
                            border-top: 2px solid #333;
                            padding-top: 5px;
                            font-weight: bold;
                            font-size: 14px;
                        }
                        
                        .status-badge {
                            display: inline-block;
                            padding: 4px 8px;
                            border-radius: 4px;
                            font-size: 11px;
                            font-weight: bold;
                            text-transform: uppercase;
                        }
                        
                        .status-aguardando_pagamento { background-color: #FEF3C7; color: #92400E; }
                        .status-pendente { background-color: #FEF3C7; color: #92400E; }
                        .status-confirmado { background-color: #DBEAFE; color: #1E40AF; }
                        .status-em_producao { background-color: #E9D5FF; color: #7C3AED; }
                        .status-pronto { background-color: #D1FAE5; color: #065F46; }
                        .status-entregue { background-color: #F3F4F6; color: #374151; }
                        .status-cancelado { background-color: #FEE2E2; color: #991B1B; }
                        
                        .type-badge {
                            display: inline-block;
                            padding: 4px 8px;
                            border-radius: 4px;
                            font-size: 11px;
                            font-weight: bold;
                            background-color: #E0E7FF;
                            color: #3730A3;
                        }
                        
                        .footer {
                            margin-top: 30px;
                            padding-top: 15px;
                            border-top: 1px solid #ddd;
                            text-align: center;
                            font-size: 11px;
                            color: #666;
                        }
                        
                        .clear {
                            clear: both;
                        }
                        
                        @media print {
                            body {
                                padding: 0;
                            }
                            
                            .no-print {
                                display: none;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>${settings.confeitariaName}</h1>
                        <p>üì± ${settings.phone} | ‚úâÔ∏è ${settings.email}</p>
                        <p>üìç ${settings.address}</p>
                    </div>

                    <div style="text-align: center; margin-bottom: 20px;">
                        <h2>PEDIDO #${order.id}</h2>
                        <span class="status-badge status-${order.status}">${statusTexts[order.status]}</span>
                        <span class="type-badge">${typeTexts[order.type]}</span>
                    </div>

                    <div class="order-info">
                        <div class="info-section">
                            <h3>üë§ DADOS DO CLIENTE</h3>
                            <p><strong>Nome:</strong> ${order.customer.name}</p>
                            <p><strong>Telefone:</strong> ${order.customer.phone}</p>
                            <p><strong>Email:</strong> ${order.customer.email}</p>
                            ${order.customer.cpf ? `<p><strong>CPF:</strong> ${order.customer.cpf}</p>` : ''}
                        </div>

                        <div class="info-section">
                            <h3>üöö DADOS DA ENTREGA</h3>
                            <p><strong>Endere√ßo:</strong> ${order.delivery.address}, ${order.delivery.number}</p>
                            ${order.delivery.complement ? `<p><strong>Complemento:</strong> ${order.delivery.complement}</p>` : ''}
                            <p><strong>Bairro:</strong> ${order.delivery.neighborhood}</p>
                            <p><strong>Cidade:</strong> ${order.delivery.city}</p>
                            <p><strong>CEP:</strong> ${order.delivery.cep}</p>
                            ${order.delivery.reference ? `<p><strong>Refer√™ncia:</strong> ${order.delivery.reference}</p>` : ''}
                            ${order.delivery.date ? `<p><strong>Data:</strong> ${new Date(order.delivery.date).toLocaleDateString('pt-BR')} ${order.delivery.time || ''}</p>` : ''}
                        </div>
                    </div>

                    ${order.orderData && (order.orderData.eventType || order.orderData.observations) ? `
                        <div class="info-section" style="margin-bottom: 20px;">
                            <h3>üéØ DADOS DA ENCOMENDA</h3>
                            ${order.orderData.eventType ? `<p><strong>Evento:</strong> ${order.orderData.eventType}</p>` : ''}
                            ${order.orderData.observations ? `<p><strong>Observa√ß√µes:</strong> ${order.orderData.observations}</p>` : ''}
                        </div>
                    ` : ''}

                    <div class="items-section">
                        <h3 style="margin-bottom: 10px; color: #8B5CF6;">üõçÔ∏è ITENS DO PEDIDO</h3>
                        <table class="items-table">
                            <thead>
                                <tr>
                                    <th>Item</th>
                                    <th class="text-right">Qtd</th>
                                    <th class="text-right">Valor Unit.</th>
                                    <th class="text-right">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${order.items.map(item => `
                                    <tr>
                                        <td>${item.emoji} ${item.name}</td>
                                        <td class="text-right">${item.quantity}</td>
                                        <td class="text-right">R$ ${item.price.toFixed(2)}</td>
                                        <td class="text-right">R$ ${(item.price * item.quantity).toFixed(2)}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>

                    <div class="totals">
                        <div class="total-line">
                            <span>Subtotal:</span>
                            <span>R$ ${order.subtotal.toFixed(2)}</span>
                        </div>
                        <div class="total-line">
                            <span>Taxa de Entrega:</span>
                            <span>R$ ${order.deliveryFee.toFixed(2)}</span>
                        </div>
                        <div class="total-line total-final">
                            <span>TOTAL:</span>
                            <span>R$ ${order.total.toFixed(2)}</span>
                        </div>
                    </div>

                    <div class="clear"></div>

                    <div class="info-section" style="margin-top: 20px;">
                        <h3>üí≥ INFORMA√á√ïES DE PAGAMENTO</h3>
                        <p><strong>M√©todo:</strong> ${paymentTexts[order.paymentMethod] || order.paymentMethod}</p>
                        <p><strong>Status:</strong> ${order.paymentConfirmed ? '‚úÖ Confirmado' : '‚è≥ Aguardando'}</p>
                        ${order.paymentDate ? `<p><strong>Data do Pagamento:</strong> ${new Date(order.paymentDate).toLocaleString('pt-BR')}</p>` : ''}
                        
                        ${order.paymentMethod === 'encomenda' ? `
                            <div style="margin-top: 10px; padding: 10px; background-color: #FEF3C7; border-radius: 5px;">
                                <p><strong>üí∞ Pagamento Encomenda:</strong></p>
                                <p>‚Ä¢ Antecipado (50%): R$ ${(order.total * 0.5).toFixed(2)} ${order.advancePaymentConfirmed ? '‚úÖ' : '‚è≥'}</p>
                                <p>‚Ä¢ Na Entrega (50%): R$ ${(order.total * 0.5).toFixed(2)}</p>
                                ${order.advancePaymentMethod ? `<p>‚Ä¢ M√©todo Antecipado: ${order.advancePaymentMethod === 'pix' ? 'PIX' : 'Cart√£o de Cr√©dito'}</p>` : ''}
                            </div>
                        ` : ''}
                        
                        ${order.paymentDetails ? `
                            <div style="margin-top: 10px;">
                                <p><strong>Cart√£o:</strong> **** **** **** ${order.paymentDetails.lastFourDigits}</p>
                                <p><strong>Parcelas:</strong> ${order.paymentDetails.installments}x</p>
                                <p><strong>Portador:</strong> ${order.paymentDetails.cardName}</p>
                            </div>
                        ` : ''}
                    </div>

                    <div class="footer">
                        <p><strong>Data do Pedido:</strong> ${new Date(order.createdAt).toLocaleString('pt-BR')}</p>
                        <p><strong>Impresso em:</strong> ${new Date().toLocaleString('pt-BR')}</p>
                        <br>
                        <p>Obrigado pela prefer√™ncia! üíú</p>
                    </div>

                    <div class="no-print" style="text-align: center; margin-top: 20px;">
                        <button onclick="window.print()" style="background-color: #8B5CF6; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                            üñ®Ô∏è Imprimir
                        </button>
                        <button onclick="window.close()" style="background-color: #6B7280; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                            ‚ùå Fechar
                        </button>
                    </div>
                </body>
                </html>
            `;

            printWindow.document.write(printContent);
            printWindow.document.close();
            
            // Auto-focus the print window
            printWindow.focus();
            
            showNotification('Janela de impress√£o aberta!', 'success');
        }

        // Customer Management Functions
        function renderAdminCustomers() {
            const container = document.getElementById('admin-customers-list');
            container.innerHTML = '';

            const customersList = Object.values(customers);
            const searchTerm = document.getElementById('customerSearch')?.value.toLowerCase() || '';
            const filter = document.getElementById('customerFilter')?.value || 'all';

            let filteredCustomers = customersList;

            // Apply search filter
            if (searchTerm) {
                filteredCustomers = filteredCustomers.filter(customer => 
                    customer.name.toLowerCase().includes(searchTerm) ||
                    customer.phone.toLowerCase().includes(searchTerm) ||
                    customer.email.toLowerCase().includes(searchTerm)
                );
            }

            // Apply status filter
            if (filter !== 'all') {
                const now = new Date();
                const thirtyDaysAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000));

                filteredCustomers = filteredCustomers.filter(customer => {
                    const customerOrders = Object.values(orders).filter(order => 
                        order.customer.email === customer.email
                    );

                    switch (filter) {
                        case 'active':
                            return customerOrders.length > 0;
                        case 'inactive':
                            return customerOrders.length === 0;
                        case 'recent':
                            return customerOrders.some(order => 
                                new Date(order.createdAt) >= thirtyDaysAgo
                            );
                        default:
                            return true;
                    }
                });
            }

            if (filteredCustomers.length === 0) {
                container.innerHTML = '<div class="text-center py-8 text-gray-500">Nenhum cliente encontrado.</div>';
                return;
            }

            filteredCustomers.forEach(customer => {
                const customerOrders = Object.values(orders).filter(order => 
                    order.customer.email === customer.email
                );
                const totalSpent = customerOrders.reduce((sum, order) => sum + order.total, 0);
                const lastOrderDate = customerOrders.length > 0 ? 
                    new Date(Math.max(...customerOrders.map(order => new Date(order.createdAt)))).toLocaleDateString('pt-BR') : 
                    'Nunca';

                const customerCard = document.createElement('div');
                customerCard.className = 'bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow';

                customerCard.innerHTML = `
                    <div class="flex justify-between items-start mb-4">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-user text-blue-600 text-xl"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-800">${customer.name}</h3>
                                <p class="text-sm text-gray-600">üì± ${customer.phone}</p>
                                <p class="text-sm text-gray-600">‚úâÔ∏è ${customer.email}</p>
                                ${customer.cpf ? `<p class="text-sm text-gray-600">üÜî ${customer.cpf}</p>` : ''}
                            </div>
                        </div>
                        <div class="text-right">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${customerOrders.length > 0 ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                                ${customerOrders.length} pedido${customerOrders.length !== 1 ? 's' : ''}
                            </span>
                            <p class="text-sm text-gray-600 mt-1">üí∞ R$ ${totalSpent.toFixed(2)}</p>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <h4 class="text-sm font-medium text-gray-700 mb-2">üìç Endere√ßo:</h4>
                            <p class="text-sm text-gray-600">
                                ${customer.address ? `${customer.address}, ${customer.number || 'S/N'}` : 'N√£o informado'}
                                ${customer.complement ? `<br>${customer.complement}` : ''}
                                ${customer.neighborhood ? `<br>${customer.neighborhood} - ${customer.city || ''}` : ''}
                                ${customer.cep ? `<br>CEP: ${customer.cep}` : ''}
                            </p>
                        </div>
                        <div>
                            <h4 class="text-sm font-medium text-gray-700 mb-2">üìä Estat√≠sticas:</h4>
                            <p class="text-sm text-gray-600">√öltimo pedido: ${lastOrderDate}</p>
                            ${customer.birthDate ? `<p class="text-sm text-gray-600">üéÇ Nascimento: ${new Date(customer.birthDate).toLocaleDateString('pt-BR')}</p>` : ''}
                            <p class="text-sm text-gray-600">üìÖ Cadastro: ${new Date(customer.createdAt).toLocaleDateString('pt-BR')}</p>
                        </div>
                    </div>

                    ${customer.notes ? `
                        <div class="mb-4">
                            <h4 class="text-sm font-medium text-gray-700 mb-2">üìù Observa√ß√µes:</h4>
                            <p class="text-sm text-gray-600 bg-gray-50 p-2 rounded">${customer.notes}</p>
                        </div>
                    ` : ''}

                    <div class="flex space-x-2">
                        <button onclick="editCustomer('${customer.id}')" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-3 rounded text-sm transition-colors">
                            <i class="fas fa-edit mr-1"></i>Editar
                        </button>
                        <button onclick="viewCustomerOrders('${customer.id}')" class="flex-1 bg-purple-500 hover:bg-purple-600 text-white py-2 px-3 rounded text-sm transition-colors">
                            <i class="fas fa-shopping-cart mr-1"></i>Pedidos
                        </button>
                        <button onclick="printCustomer('${customer.id}')" class="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 px-3 rounded text-sm transition-colors">
                            <i class="fas fa-print mr-1"></i>Imprimir
                        </button>
                        <button onclick="deleteCustomer('${customer.id}')" class="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-3 rounded text-sm transition-colors">
                            <i class="fas fa-trash mr-1"></i>Excluir
                        </button>
                    </div>
                `;

                container.appendChild(customerCard);
            });
        }

        function updateCustomersSummary() {
            const customersList = Object.values(customers);
            const totalCustomers = customersList.length;
            
            const activeCustomers = customersList.filter(customer => {
                return Object.values(orders).some(order => order.customer.email === customer.email);
            }).length;

            const now = new Date();
            const currentMonth = now.getMonth();
            const currentYear = now.getFullYear();
            
            const monthlyOrders = Object.values(orders).filter(order => {
                const orderDate = new Date(order.createdAt);
                return orderDate.getMonth() === currentMonth && orderDate.getFullYear() === currentYear;
            }).length;

            const totalRevenue = Object.values(orders).reduce((sum, order) => sum + order.total, 0);

            document.getElementById('totalCustomers').textContent = totalCustomers;
            document.getElementById('activeCustomers').textContent = activeCustomers;
            document.getElementById('monthlyOrders').textContent = monthlyOrders;
            document.getElementById('totalRevenue').textContent = `R$ ${totalRevenue.toFixed(2)}`;
        }

        function showAddCustomerModal() {
            currentEditingCustomer = null;
            document.getElementById('customer-form').reset();
            document.getElementById('customer-modal-title').textContent = 'Novo Cliente';
            document.getElementById('customer-modal').classList.remove('hidden');
        }

        function hideCustomerModal() {
            document.getElementById('customer-modal').classList.add('hidden');
            currentEditingCustomer = null;
        }

        function editCustomer(customerId) {
            currentEditingCustomer = customerId;
            const customer = customers[customerId];
            
            document.getElementById('customerFullName').value = customer.name;
            document.getElementById('customerPhoneNumber').value = customer.phone;
            document.getElementById('customerEmailAddress').value = customer.email;
            document.getElementById('customerCPF').value = customer.cpf || '';
            document.getElementById('customerBirthDate').value = customer.birthDate || '';
            document.getElementById('customerCEP').value = customer.cep || '';
            document.getElementById('customerCity').value = customer.city || '';
            document.getElementById('customerAddress').value = customer.address || '';
            document.getElementById('customerNumber').value = customer.number || '';
            document.getElementById('customerComplement').value = customer.complement || '';
            document.getElementById('customerNeighborhood').value = customer.neighborhood || '';
            document.getElementById('customerNotes').value = customer.notes || '';
            
            document.getElementById('customer-modal-title').textContent = 'Editar Cliente';
            document.getElementById('customer-modal').classList.remove('hidden');
        }

        function deleteCustomer(customerId) {
            const customer = customers[customerId];
            const customerOrders = Object.values(orders).filter(order => 
                order.customer.email === customer.email
            );
            
            let message = `Tem certeza que deseja excluir o cliente "${customer.name}"?`;
            if (customerOrders.length > 0) {
                message += `\n\nEste cliente possui ${customerOrders.length} pedido(s) no hist√≥rico.`;
            }
            message += '\n\nEsta a√ß√£o n√£o pode ser desfeita.';
            
            showConfirmationModal(message, () => {
                delete customers[customerId];
                saveData();
                renderAdminCustomers();
                updateCustomersSummary();
                showNotification('Cliente exclu√≠do com sucesso!', 'success');
            });
        }

        function viewCustomerOrders(customerId) {
            const customer = customers[customerId];
            const customerOrders = Object.values(orders).filter(order => 
                order.customer.email === customer.email
            );

            if (customerOrders.length === 0) {
                showNotification('Este cliente ainda n√£o fez nenhum pedido.', 'info');
                return;
            }

            // Switch to orders tab and filter by customer
            showAdminTab('orders');
            
            // Filter orders by customer email (we'll need to add this functionality)
            showNotification(`Mostrando ${customerOrders.length} pedido(s) de ${customer.name}`, 'info');
        }

        function filterCustomers() {
            renderAdminCustomers();
        }

        function exportCustomers() {
            const customersList = Object.values(customers);
            
            if (customersList.length === 0) {
                showNotification('Nenhum cliente para exportar!', 'info');
                return;
            }

            // Create CSV content
            const headers = ['Nome', 'Telefone', 'Email', 'CPF', 'Data Nascimento', 'CEP', 'Cidade', 'Endere√ßo', 'N√∫mero', 'Complemento', 'Bairro', 'Observa√ß√µes', 'Data Cadastro'];
            const csvContent = [
                headers.join(','),
                ...customersList.map(customer => [
                    `"${customer.name}"`,
                    `"${customer.phone}"`,
                    `"${customer.email}"`,
                    `"${customer.cpf || ''}"`,
                    `"${customer.birthDate || ''}"`,
                    `"${customer.cep || ''}"`,
                    `"${customer.city || ''}"`,
                    `"${customer.address || ''}"`,
                    `"${customer.number || ''}"`,
                    `"${customer.complement || ''}"`,
                    `"${customer.neighborhood || ''}"`,
                    `"${customer.notes || ''}"`,
                    `"${new Date(customer.createdAt).toLocaleDateString('pt-BR')}"`
                ].join(','))
            ].join('\n');

            // Create and download file
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `clientes_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            showNotification('Lista de clientes exportada com sucesso!', 'success');
        }

        function printCustomer(customerId) {
            const customer = customers[customerId];
            
            if (!customer) {
                showNotification('Cliente n√£o encontrado!', 'error');
                return;
            }

            // Get customer orders
            const customerOrders = Object.values(orders).filter(order => 
                order.customer.email === customer.email
            );
            const totalSpent = customerOrders.reduce((sum, order) => sum + order.total, 0);
            const lastOrderDate = customerOrders.length > 0 ? 
                new Date(Math.max(...customerOrders.map(order => new Date(order.createdAt)))).toLocaleDateString('pt-BR') : 
                'Nunca';

            // Create a new window for printing
            const printWindow = window.open('', '_blank', 'width=800,height=600');
            
            const printContent = `
                <!DOCTYPE html>
                <html lang="pt-BR">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Ficha do Cliente - ${customer.name} - ${settings.confeitariaName}</title>
                    <style>
                        * {
                            margin: 0;
                            padding: 0;
                            box-sizing: border-box;
                        }
                        
                        body {
                            font-family: Arial, sans-serif;
                            font-size: 12px;
                            line-height: 1.4;
                            color: #333;
                            max-width: 800px;
                            margin: 0 auto;
                            padding: 20px;
                        }
                        
                        .header {
                            text-align: center;
                            border-bottom: 2px solid #333;
                            padding-bottom: 15px;
                            margin-bottom: 20px;
                        }
                        
                        .header h1 {
                            font-size: 24px;
                            color: #8B5CF6;
                            margin-bottom: 5px;
                        }
                        
                        .header p {
                            font-size: 14px;
                            color: #666;
                        }
                        
                        .customer-info {
                            display: grid;
                            grid-template-columns: 1fr 1fr;
                            gap: 20px;
                            margin-bottom: 20px;
                        }
                        
                        .info-section {
                            border: 1px solid #ddd;
                            padding: 15px;
                            border-radius: 5px;
                        }
                        
                        .info-section h3 {
                            font-size: 14px;
                            font-weight: bold;
                            margin-bottom: 10px;
                            color: #8B5CF6;
                            border-bottom: 1px solid #eee;
                            padding-bottom: 5px;
                        }
                        
                        .info-section p {
                            margin-bottom: 5px;
                        }
                        
                        .stats-section {
                            background-color: #f8f9fa;
                            border: 1px solid #ddd;
                            padding: 15px;
                            border-radius: 5px;
                            margin-bottom: 20px;
                        }
                        
                        .stats-grid {
                            display: grid;
                            grid-template-columns: repeat(4, 1fr);
                            gap: 15px;
                            text-align: center;
                        }
                        
                        .stat-item {
                            padding: 10px;
                            background-color: white;
                            border-radius: 5px;
                            border: 1px solid #e5e7eb;
                        }
                        
                        .stat-number {
                            font-size: 18px;
                            font-weight: bold;
                            color: #8B5CF6;
                        }
                        
                        .stat-label {
                            font-size: 11px;
                            color: #666;
                            margin-top: 5px;
                        }
                        
                        .orders-section {
                            margin: 20px 0;
                        }
                        
                        .orders-table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-bottom: 15px;
                        }
                        
                        .orders-table th,
                        .orders-table td {
                            border: 1px solid #ddd;
                            padding: 8px;
                            text-align: left;
                            font-size: 11px;
                        }
                        
                        .orders-table th {
                            background-color: #f8f9fa;
                            font-weight: bold;
                        }
                        
                        .orders-table .text-center {
                            text-align: center;
                        }
                        
                        .orders-table .text-right {
                            text-align: right;
                        }
                        
                        .status-badge {
                            display: inline-block;
                            padding: 2px 6px;
                            border-radius: 3px;
                            font-size: 9px;
                            font-weight: bold;
                            text-transform: uppercase;
                        }
                        
                        .status-aguardando_pagamento { background-color: #FEF3C7; color: #92400E; }
                        .status-pendente { background-color: #FEF3C7; color: #92400E; }
                        .status-confirmado { background-color: #DBEAFE; color: #1E40AF; }
                        .status-em_producao { background-color: #E9D5FF; color: #7C3AED; }
                        .status-pronto { background-color: #D1FAE5; color: #065F46; }
                        .status-entregue { background-color: #F3F4F6; color: #374151; }
                        .status-cancelado { background-color: #FEE2E2; color: #991B1B; }
                        
                        .footer {
                            margin-top: 30px;
                            padding-top: 15px;
                            border-top: 1px solid #ddd;
                            text-align: center;
                            font-size: 11px;
                            color: #666;
                        }
                        
                        @media print {
                            body {
                                padding: 0;
                            }
                            
                            .no-print {
                                display: none;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>${settings.confeitariaName}</h1>
                        <p>üì± ${settings.phone} | ‚úâÔ∏è ${settings.email}</p>
                        <p>üìç ${settings.address}</p>
                    </div>

                    <div style="text-align: center; margin-bottom: 20px;">
                        <h2>FICHA DO CLIENTE</h2>
                        <p style="font-size: 16px; font-weight: bold; color: #8B5CF6;">${customer.name}</p>
                    </div>

                    <div class="customer-info">
                        <div class="info-section">
                            <h3>üë§ DADOS PESSOAIS</h3>
                            <p><strong>Nome Completo:</strong> ${customer.name}</p>
                            <p><strong>Telefone:</strong> ${customer.phone}</p>
                            <p><strong>Email:</strong> ${customer.email}</p>
                            ${customer.cpf ? `<p><strong>CPF:</strong> ${customer.cpf}</p>` : ''}
                            ${customer.birthDate ? `<p><strong>Data de Nascimento:</strong> ${new Date(customer.birthDate).toLocaleDateString('pt-BR')}</p>` : ''}
                            <p><strong>Data de Cadastro:</strong> ${new Date(customer.createdAt).toLocaleDateString('pt-BR')}</p>
                            ${customer.updatedAt ? `<p><strong>√öltima Atualiza√ß√£o:</strong> ${new Date(customer.updatedAt).toLocaleDateString('pt-BR')}</p>` : ''}
                        </div>

                        <div class="info-section">
                            <h3>üìç ENDERE√áO</h3>
                            ${customer.address ? `
                                <p><strong>Endere√ßo:</strong> ${customer.address}, ${customer.number || 'S/N'}</p>
                                ${customer.complement ? `<p><strong>Complemento:</strong> ${customer.complement}</p>` : ''}
                                <p><strong>Bairro:</strong> ${customer.neighborhood || 'N√£o informado'}</p>
                                <p><strong>Cidade:</strong> ${customer.city || 'N√£o informado'}</p>
                                ${customer.cep ? `<p><strong>CEP:</strong> ${customer.cep}</p>` : ''}
                            ` : '<p style="color: #666; font-style: italic;">Endere√ßo n√£o informado</p>'}
                        </div>
                    </div>

                    ${customer.notes ? `
                        <div class="info-section" style="margin-bottom: 20px;">
                            <h3>üìù OBSERVA√á√ïES</h3>
                            <p style="background-color: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 4px solid #8B5CF6;">${customer.notes}</p>
                        </div>
                    ` : ''}

                    <div class="stats-section">
                        <h3 style="text-align: center; margin-bottom: 15px; color: #8B5CF6;">üìä ESTAT√çSTICAS DO CLIENTE</h3>
                        <div class="stats-grid">
                            <div class="stat-item">
                                <div class="stat-number">${customerOrders.length}</div>
                                <div class="stat-label">Total de Pedidos</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">R$ ${totalSpent.toFixed(2)}</div>
                                <div class="stat-label">Total Gasto</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">R$ ${customerOrders.length > 0 ? (totalSpent / customerOrders.length).toFixed(2) : '0,00'}</div>
                                <div class="stat-label">Ticket M√©dio</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">${lastOrderDate}</div>
                                <div class="stat-label">√öltimo Pedido</div>
                            </div>
                        </div>
                    </div>

                    ${customerOrders.length > 0 ? `
                        <div class="orders-section">
                            <h3 style="margin-bottom: 10px; color: #8B5CF6;">üõçÔ∏è HIST√ìRICO DE PEDIDOS</h3>
                            <table class="orders-table">
                                <thead>
                                    <tr>
                                        <th>Pedido</th>
                                        <th>Data</th>
                                        <th>Tipo</th>
                                        <th>Status</th>
                                        <th class="text-center">Itens</th>
                                        <th class="text-right">Total</th>
                                        <th>Pagamento</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${customerOrders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(order => {
                                        const statusTexts = {
                                            'aguardando_pagamento': 'Aguardando Pagamento',
                                            'pendente': 'Pendente',
                                            'confirmado': 'Confirmado',
                                            'em_producao': 'Em Produ√ß√£o',
                                            'pronto': 'Pronto',
                                            'entregue': 'Entregue',
                                            'cancelado': 'Cancelado'
                                        };
                                        
                                        const typeTexts = {
                                            'pronta_entrega': 'Pronta Entrega',
                                            'encomenda': 'Encomenda'
                                        };
                                        
                                        const paymentTexts = {
                                            'pix': 'PIX',
                                            'credit_card': 'Cart√£o',
                                            'encomenda': 'Encomenda'
                                        };
                                        
                                        return `
                                            <tr>
                                                <td><strong>#${order.id}</strong></td>
                                                <td>${new Date(order.createdAt).toLocaleDateString('pt-BR')}</td>
                                                <td>${typeTexts[order.type] || order.type}</td>
                                                <td>
                                                    <span class="status-badge status-${order.status}">
                                                        ${statusTexts[order.status] || order.status}
                                                    </span>
                                                </td>
                                                <td class="text-center">${order.items.length}</td>
                                                <td class="text-right"><strong>R$ ${order.total.toFixed(2)}</strong></td>
                                                <td>${paymentTexts[order.paymentMethod] || order.paymentMethod}</td>
                                            </tr>
                                        `;
                                    }).join('')}
                                </tbody>
                            </table>
                            
                            <div style="margin-top: 15px;">
                                <h4 style="color: #8B5CF6; margin-bottom: 10px;">üì¶ Produtos Mais Pedidos:</h4>
                                ${(() => {
                                    const productCount = {};
                                    customerOrders.forEach(order => {
                                        order.items.forEach(item => {
                                            productCount[item.name] = (productCount[item.name] || 0) + item.quantity;
                                        });
                                    });
                                    
                                    const sortedProducts = Object.entries(productCount)
                                        .sort(([,a], [,b]) => b - a)
                                        .slice(0, 5);
                                    
                                    return sortedProducts.length > 0 ? 
                                        sortedProducts.map(([product, count]) => 
                                            `<p style="margin-bottom: 3px;">‚Ä¢ ${product}: ${count} unidade${count !== 1 ? 's' : ''}</p>`
                                        ).join('') : 
                                        '<p style="color: #666; font-style: italic;">Nenhum produto encontrado</p>';
                                })()}
                            </div>
                        </div>
                    ` : `
                        <div class="info-section">
                            <h3 style="color: #8B5CF6;">üõçÔ∏è HIST√ìRICO DE PEDIDOS</h3>
                            <p style="text-align: center; color: #666; font-style: italic; padding: 20px;">
                                Este cliente ainda n√£o realizou nenhum pedido.
                            </p>
                        </div>
                    `}

                    <div class="footer">
                        <p><strong>Ficha impressa em:</strong> ${new Date().toLocaleString('pt-BR')}</p>
                        <p>Sistema de Gest√£o - ${settings.confeitariaName}</p>
                    </div>

                    <div class="no-print" style="text-align: center; margin-top: 20px;">
                        <button onclick="window.print()" style="background-color: #8B5CF6; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                            üñ®Ô∏è Imprimir Ficha
                        </button>
                        <button onclick="window.close()" style="background-color: #6B7280; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                            ‚ùå Fechar
                        </button>
                    </div>
                </body>
                </html>
            `;

            printWindow.document.write(printContent);
            printWindow.document.close();
            
            // Auto-focus the print window
            printWindow.focus();
            
            showNotification(`Ficha do cliente ${customer.name} aberta para impress√£o!`, 'success');
        }

        function printCustomers() {
            const customersList = Object.values(customers);
            
            if (customersList.length === 0) {
                showNotification('Nenhum cliente para imprimir!', 'info');
                return;
            }

            // Apply current filters
            const searchTerm = document.getElementById('customerSearch')?.value.toLowerCase() || '';
            const filter = document.getElementById('customerFilter')?.value || 'all';

            let filteredCustomers = customersList;

            // Apply search filter
            if (searchTerm) {
                filteredCustomers = filteredCustomers.filter(customer => 
                    customer.name.toLowerCase().includes(searchTerm) ||
                    customer.phone.toLowerCase().includes(searchTerm) ||
                    customer.email.toLowerCase().includes(searchTerm)
                );
            }

            // Apply status filter
            if (filter !== 'all') {
                const now = new Date();
                const thirtyDaysAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000));

                filteredCustomers = filteredCustomers.filter(customer => {
                    const customerOrders = Object.values(orders).filter(order => 
                        order.customer.email === customer.email
                    );

                    switch (filter) {
                        case 'active':
                            return customerOrders.length > 0;
                        case 'inactive':
                            return customerOrders.length === 0;
                        case 'recent':
                            return customerOrders.some(order => 
                                new Date(order.createdAt) >= thirtyDaysAgo
                            );
                        default:
                            return true;
                    }
                });
            }

            if (filteredCustomers.length === 0) {
                showNotification('Nenhum cliente encontrado com os filtros aplicados!', 'info');
                return;
            }

            // Create a new window for printing
            const printWindow = window.open('', '_blank', 'width=800,height=600');
            
            const printContent = `
                <!DOCTYPE html>
                <html lang="pt-BR">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Lista de Clientes - ${settings.confeitariaName}</title>
                    <style>
                        * {
                            margin: 0;
                            padding: 0;
                            box-sizing: border-box;
                        }
                        
                        body {
                            font-family: Arial, sans-serif;
                            font-size: 11px;
                            line-height: 1.4;
                            color: #333;
                            max-width: 1200px;
                            margin: 0 auto;
                            padding: 20px;
                        }
                        
                        .header {
                            text-align: center;
                            border-bottom: 2px solid #333;
                            padding-bottom: 15px;
                            margin-bottom: 20px;
                        }
                        
                        .header h1 {
                            font-size: 24px;
                            color: #8B5CF6;
                            margin-bottom: 5px;
                        }
                        
                        .header p {
                            font-size: 14px;
                            color: #666;
                        }
                        
                        .summary {
                            display: grid;
                            grid-template-columns: repeat(4, 1fr);
                            gap: 15px;
                            margin-bottom: 20px;
                        }
                        
                        .summary-card {
                            border: 1px solid #ddd;
                            padding: 10px;
                            border-radius: 5px;
                            text-align: center;
                        }
                        
                        .summary-card h3 {
                            font-size: 12px;
                            color: #8B5CF6;
                            margin-bottom: 5px;
                        }
                        
                        .summary-card .number {
                            font-size: 18px;
                            font-weight: bold;
                            color: #333;
                        }
                        
                        .customers-table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-bottom: 15px;
                        }
                        
                        .customers-table th,
                        .customers-table td {
                            border: 1px solid #ddd;
                            padding: 6px;
                            text-align: left;
                            font-size: 10px;
                        }
                        
                        .customers-table th {
                            background-color: #f8f9fa;
                            font-weight: bold;
                            font-size: 11px;
                        }
                        
                        .customers-table .text-center {
                            text-align: center;
                        }
                        
                        .status-badge {
                            display: inline-block;
                            padding: 2px 6px;
                            border-radius: 3px;
                            font-size: 9px;
                            font-weight: bold;
                        }
                        
                        .status-active {
                            background-color: #D1FAE5;
                            color: #065F46;
                        }
                        
                        .status-inactive {
                            background-color: #F3F4F6;
                            color: #374151;
                        }
                        
                        .footer {
                            margin-top: 30px;
                            padding-top: 15px;
                            border-top: 1px solid #ddd;
                            text-align: center;
                            font-size: 10px;
                            color: #666;
                        }
                        
                        @media print {
                            body {
                                padding: 0;
                            }
                            
                            .no-print {
                                display: none;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>${settings.confeitariaName}</h1>
                        <p>üì± ${settings.phone} | ‚úâÔ∏è ${settings.email}</p>
                        <p>üìç ${settings.address}</p>
                    </div>

                    <div style="text-align: center; margin-bottom: 20px;">
                        <h2>LISTA DE CLIENTES</h2>
                        <p>Total de ${filteredCustomers.length} cliente${filteredCustomers.length !== 1 ? 's' : ''}</p>
                    </div>

                    <div class="summary">
                        <div class="summary-card">
                            <h3>Total Clientes</h3>
                            <div class="number">${Object.values(customers).length}</div>
                        </div>
                        <div class="summary-card">
                            <h3>Clientes Ativos</h3>
                            <div class="number">${Object.values(customers).filter(customer => 
                                Object.values(orders).some(order => order.customer.email === customer.email)
                            ).length}</div>
                        </div>
                        <div class="summary-card">
                            <h3>Pedidos Este M√™s</h3>
                            <div class="number">${Object.values(orders).filter(order => {
                                const orderDate = new Date(order.createdAt);
                                const now = new Date();
                                return orderDate.getMonth() === now.getMonth() && orderDate.getFullYear() === now.getFullYear();
                            }).length}</div>
                        </div>
                        <div class="summary-card">
                            <h3>Faturamento Total</h3>
                            <div class="number">R$ ${Object.values(orders).reduce((sum, order) => sum + order.total, 0).toFixed(2)}</div>
                        </div>
                    </div>

                    <table class="customers-table">
                        <thead>
                            <tr>
                                <th>Nome</th>
                                <th>Telefone</th>
                                <th>Email</th>
                                <th>CPF</th>
                                <th>Endere√ßo</th>
                                <th>Cidade</th>
                                <th class="text-center">Pedidos</th>
                                <th class="text-center">Total Gasto</th>
                                <th class="text-center">Status</th>
                                <th class="text-center">Cadastro</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${filteredCustomers.map(customer => {
                                const customerOrders = Object.values(orders).filter(order => 
                                    order.customer.email === customer.email
                                );
                                const totalSpent = customerOrders.reduce((sum, order) => sum + order.total, 0);
                                const isActive = customerOrders.length > 0;
                                
                                return `
                                    <tr>
                                        <td>${customer.name}</td>
                                        <td>${customer.phone}</td>
                                        <td>${customer.email}</td>
                                        <td>${customer.cpf || '-'}</td>
                                        <td>${customer.address ? `${customer.address}, ${customer.number || 'S/N'}` : '-'}</td>
                                        <td>${customer.city || '-'}</td>
                                        <td class="text-center">${customerOrders.length}</td>
                                        <td class="text-center">R$ ${totalSpent.toFixed(2)}</td>
                                        <td class="text-center">
                                            <span class="status-badge ${isActive ? 'status-active' : 'status-inactive'}">
                                                ${isActive ? 'Ativo' : 'Inativo'}
                                            </span>
                                        </td>
                                        <td class="text-center">${new Date(customer.createdAt).toLocaleDateString('pt-BR')}</td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>

                    <div class="footer">
                        <p><strong>Relat√≥rio gerado em:</strong> ${new Date().toLocaleString('pt-BR')}</p>
                        <p>Sistema de Gest√£o - ${settings.confeitariaName}</p>
                    </div>

                    <div class="no-print" style="text-align: center; margin-top: 20px;">
                        <button onclick="window.print()" style="background-color: #8B5CF6; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                            üñ®Ô∏è Imprimir
                        </button>
                        <button onclick="window.close()" style="background-color: #6B7280; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                            ‚ùå Fechar
                        </button>
                    </div>
                </body>
                </html>
            `;

            printWindow.document.write(printContent);
            printWindow.document.close();
            
            // Auto-focus the print window
            printWindow.focus();
            
            showNotification('Relat√≥rio de clientes aberto para impress√£o!', 'success');
        }

        function fillAddressFromCEP(input) {
            const cep = input.value.replace(/\D/g, '');
            
            if (cep.length === 8) {
                // Format CEP
                input.value = formatCEP(cep);
                
                // Try to fetch real CEP data from ViaCEP API
                fetch(`https://viacep.com.br/ws/${cep}/json/`)
                    .then(response => response.json())
                    .then(data => {
                        if (!data.erro) {
                            document.getElementById('customerCity').value = data.localidade;
                            document.getElementById('customerAddress').value = data.logradouro;
                            document.getElementById('customerNeighborhood').value = data.bairro;
                        }
                    })
                    .catch(error => {
                        console.log('Erro ao buscar CEP:', error);
                    });
            }
        }

        function printStock() {
            const productsList = Object.values(products);
            
            if (productsList.length === 0) {
                showNotification('Nenhum produto para imprimir!', 'info');
                return;
            }

            // Create a new window for printing
            const printWindow = window.open('', '_blank', 'width=800,height=600');
            
            const printContent = `
                <!DOCTYPE html>
                <html lang="pt-BR">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Relat√≥rio de Estoque - ${settings.confeitariaName}</title>
                    <style>
                        * {
                            margin: 0;
                            padding: 0;
                            box-sizing: border-box;
                        }
                        
                        body {
                            font-family: Arial, sans-serif;
                            font-size: 11px;
                            line-height: 1.4;
                            color: #333;
                            max-width: 1200px;
                            margin: 0 auto;
                            padding: 20px;
                        }
                        
                        .header {
                            text-align: center;
                            border-bottom: 2px solid #333;
                            padding-bottom: 15px;
                            margin-bottom: 20px;
                        }
                        
                        .header h1 {
                            font-size: 24px;
                            color: #8B5CF6;
                            margin-bottom: 5px;
                        }
                        
                        .header p {
                            font-size: 14px;
                            color: #666;
                        }
                        
                        .summary {
                            display: grid;
                            grid-template-columns: repeat(4, 1fr);
                            gap: 15px;
                            margin-bottom: 20px;
                        }
                        
                        .summary-card {
                            border: 1px solid #ddd;
                            padding: 10px;
                            border-radius: 5px;
                            text-align: center;
                        }
                        
                        .summary-card h3 {
                            font-size: 12px;
                            color: #8B5CF6;
                            margin-bottom: 5px;
                        }
                        
                        .summary-card .number {
                            font-size: 18px;
                            font-weight: bold;
                            color: #333;
                        }
                        
                        .stock-table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-bottom: 15px;
                        }
                        
                        .stock-table th,
                        .stock-table td {
                            border: 1px solid #ddd;
                            padding: 6px;
                            text-align: left;
                            font-size: 10px;
                        }
                        
                        .stock-table th {
                            background-color: #f8f9fa;
                            font-weight: bold;
                            font-size: 11px;
                        }
                        
                        .stock-table .text-center {
                            text-align: center;
                        }
                        
                        .status-badge {
                            display: inline-block;
                            padding: 2px 6px;
                            border-radius: 3px;
                            font-size: 9px;
                            font-weight: bold;
                        }
                        
                        .status-encomenda {
                            background-color: #DBEAFE;
                            color: #1E40AF;
                        }
                        
                        .status-ok {
                            background-color: #D1FAE5;
                            color: #065F46;
                        }
                        
                        .status-low {
                            background-color: #FEF3C7;
                            color: #92400E;
                        }
                        
                        .status-out {
                            background-color: #FEE2E2;
                            color: #991B1B;
                        }
                        
                        .type-badge {
                            display: inline-block;
                            padding: 2px 6px;
                            border-radius: 3px;
                            font-size: 9px;
                            font-weight: bold;
                        }
                        
                        .type-pronta {
                            background-color: #D1FAE5;
                            color: #065F46;
                        }
                        
                        .type-encomenda {
                            background-color: #DBEAFE;
                            color: #1E40AF;
                        }
                        
                        .type-ambos {
                            background-color: #E9D5FF;
                            color: #7C3AED;
                        }
                        
                        .footer {
                            margin-top: 30px;
                            padding-top: 15px;
                            border-top: 1px solid #ddd;
                            text-align: center;
                            font-size: 10px;
                            color: #666;
                        }
                        
                        @media print {
                            body {
                                padding: 0;
                            }
                            
                            .no-print {
                                display: none;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>${settings.confeitariaName}</h1>
                        <p>üì± ${settings.phone} | ‚úâÔ∏è ${settings.email}</p>
                        <p>üìç ${settings.address}</p>
                    </div>

                    <div style="text-align: center; margin-bottom: 20px;">
                        <h2>RELAT√ìRIO DE ESTOQUE</h2>
                        <p>Total de ${productsList.length} produto${productsList.length !== 1 ? 's' : ''}</p>
                    </div>

                    <div class="summary">
                        <div class="summary-card">
                            <h3>Total Produtos</h3>
                            <div class="number">${productsList.length}</div>
                        </div>
                        <div class="summary-card">
                            <h3>Em Estoque</h3>
                            <div class="number">${productsList.filter(p => p.type === 'encomenda' || p.stock > p.minStock).length}</div>
                        </div>
                        <div class="summary-card">
                            <h3>Estoque Baixo</h3>
                            <div class="number">${productsList.filter(p => p.type !== 'encomenda' && p.stock <= p.minStock && p.stock > 0).length}</div>
                        </div>
                        <div class="summary-card">
                            <h3>Sem Estoque</h3>
                            <div class="number">${productsList.filter(p => p.type !== 'encomenda' && p.stock === 0).length}</div>
                        </div>
                    </div>

                    <table class="stock-table">
                        <thead>
                            <tr>
                                <th>Produto</th>
                                <th>Categoria</th>
                                <th class="text-center">Tipo</th>
                                <th class="text-center">Pre√ßo</th>
                                <th class="text-center">Estoque Atual</th>
                                <th class="text-center">Estoque M√≠nimo</th>
                                <th class="text-center">Status</th>
                                <th>Descri√ß√£o</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${productsList.map(product => {
                                const statusClass = product.type === 'encomenda' ? 'status-encomenda' :
                                    product.stock === 0 ? 'status-out' :
                                    product.stock <= product.minStock ? 'status-low' : 'status-ok';
                                
                                const statusText = product.type === 'encomenda' ? 'Sob Encomenda' :
                                    product.stock === 0 ? 'Sem Estoque' :
                                    product.stock <= product.minStock ? 'Estoque Baixo' : 'Em Estoque';
                                
                                const typeClass = product.type === 'pronta_entrega' ? 'type-pronta' :
                                    product.type === 'encomenda' ? 'type-encomenda' : 'type-ambos';
                                
                                const typeText = product.type === 'pronta_entrega' ? 'Pronta' :
                                    product.type === 'encomenda' ? 'Encomenda' : 'Ambos';
                                
                                return `
                                    <tr>
                                        <td>
                                            <div style="display: flex; align-items: center;">
                                                <span style="margin-right: 8px; font-size: 14px;">${product.emoji}</span>
                                                <div>
                                                    <div style="font-weight: bold;">${product.name}</div>
                                                    <div style="font-size: 9px; color: #666;">ID: ${product.id}</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>${product.category}</td>
                                        <td class="text-center">
                                            <span class="type-badge ${typeClass}">${typeText}</span>
                                        </td>
                                        <td class="text-center">R$ ${product.price.toFixed(2)}</td>
                                        <td class="text-center" style="font-weight: bold; ${product.type === 'encomenda' ? 'color: #1E40AF;' : product.stock === 0 ? 'color: #991B1B;' : product.stock <= product.minStock ? 'color: #92400E;' : 'color: #065F46;'}">
                                            ${product.type === 'encomenda' ? '‚àû' : product.stock}
                                        </td>
                                        <td class="text-center">${product.type === 'encomenda' ? 'N/A' : product.minStock}</td>
                                        <td class="text-center">
                                            <span class="status-badge ${statusClass}">${statusText}</span>
                                        </td>
                                        <td>${product.description || '-'}</td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>

                    <div style="margin-top: 20px;">
                        <h3 style="color: #8B5CF6; margin-bottom: 10px;">Legenda:</h3>
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; font-size: 10px;">
                            <div>
                                <strong>Tipos de Produto:</strong><br>
                                <span class="type-badge type-pronta">Pronta</span> - Dispon√≠vel imediatamente<br>
                                <span class="type-badge type-encomenda">Encomenda</span> - Feito sob encomenda<br>
                                <span class="type-badge type-ambos">Ambos</span> - Pronta entrega e encomenda
                            </div>
                            <div>
                                <strong>Status do Estoque:</strong><br>
                                <span class="status-badge status-ok">Em Estoque</span> - Quantidade adequada<br>
                                <span class="status-badge status-low">Estoque Baixo</span> - Abaixo do m√≠nimo<br>
                                <span class="status-badge status-out">Sem Estoque</span> - Esgotado<br>
                                <span class="status-badge status-encomenda">Sob Encomenda</span> - N√£o controla estoque
                            </div>
                        </div>
                    </div>

                    <div class="footer">
                        <p><strong>Relat√≥rio gerado em:</strong> ${new Date().toLocaleString('pt-BR')}</p>
                        <p>Sistema de Gest√£o - ${settings.confeitariaName}</p>
                    </div>

                    <div class="no-print" style="text-align: center; margin-top: 20px;">
                        <button onclick="window.print()" style="background-color: #8B5CF6; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                            üñ®Ô∏è Imprimir
                        </button>
                        <button onclick="window.close()" style="background-color: #6B7280; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                            ‚ùå Fechar
                        </button>
                    </div>
                </body>
                </html>
            `;

            printWindow.document.write(printContent);
            printWindow.document.close();
            
            // Auto-focus the print window
            printWindow.focus();
            
            showNotification('Relat√≥rio de estoque aberto para impress√£o!', 'success');
        }

        // Fake Order Generator for Testing
        function generateFakeOrder() {
            const fakeCustomers = [
                {
                    name: 'Maria Silva Santos',
                    phone: '(11) 98765-4321',
                    email: 'maria.silva@email.com',
                    cpf: '123.456.789-00'
                },
                {
                    name: 'Jo√£o Pedro Oliveira',
                    phone: '(11) 99876-5432',
                    email: 'joao.pedro@email.com',
                    cpf: '987.654.321-00'
                },
                {
                    name: 'Ana Carolina Ferreira',
                    phone: '(11) 97654-3210',
                    email: 'ana.carolina@email.com',
                    cpf: '456.789.123-00'
                },
                {
                    name: 'Carlos Eduardo Lima',
                    phone: '(11) 96543-2109',
                    email: 'carlos.eduardo@email.com',
                    cpf: '789.123.456-00'
                },
                {
                    name: 'Fernanda Costa Alves',
                    phone: '(11) 95432-1098',
                    email: 'fernanda.costa@email.com',
                    cpf: '321.654.987-00'
                }
            ];

            const fakeAddresses = [
                {
                    cep: '01310-100',
                    city: 'S√£o Paulo',
                    address: 'Avenida Paulista',
                    number: '1578',
                    complement: 'Apto 45',
                    neighborhood: 'Bela Vista',
                    reference: 'Pr√≥ximo ao metr√¥ Trianon-MASP'
                },
                {
                    cep: '04038-001',
                    city: 'S√£o Paulo',
                    address: 'Rua Funchal',
                    number: '263',
                    complement: 'Sala 12',
                    neighborhood: 'Vila Ol√≠mpia',
                    reference: 'Em frente ao shopping Vila Ol√≠mpia'
                },
                {
                    cep: '05407-002',
                    city: 'S√£o Paulo',
                    address: 'Rua Teodoro Sampaio',
                    number: '1020',
                    complement: '',
                    neighborhood: 'Pinheiros',
                    reference: 'Pr√≥ximo ao metr√¥ Faria Lima'
                },
                {
                    cep: '01452-000',
                    city: 'S√£o Paulo',
                    address: 'Rua Augusta',
                    number: '2690',
                    complement: 'Cobertura',
                    neighborhood: 'Jardins',
                    reference: 'Pr√≥ximo ao Parque Trianon'
                },
                {
                    cep: '04094-050',
                    city: 'S√£o Paulo',
                    address: 'Rua Verbo Divino',
                    number: '1356',
                    complement: 'Bloco B Apto 78',
                    neighborhood: 'Ch√°cara Santo Ant√¥nio',
                    reference: 'Pr√≥ximo ao Shopping Morumbi'
                }
            ];

            const orderTypes = ['pronta_entrega', 'encomenda'];
            const paymentMethods = ['pix', 'credit_card', 'encomenda'];
            const orderStatuses = ['aguardando_pagamento', 'confirmado', 'em_producao', 'pronto', 'entregue'];
            const eventTypes = ['aniversario', 'casamento', 'batizado', 'formatura', 'corporativo', 'outros'];

            // Select random data
            const customer = fakeCustomers[Math.floor(Math.random() * fakeCustomers.length)];
            const address = fakeAddresses[Math.floor(Math.random() * fakeAddresses.length)];
            const orderType = orderTypes[Math.floor(Math.random() * orderTypes.length)];
            const paymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];
            const status = orderStatuses[Math.floor(Math.random() * orderStatuses.length)];

            // Generate random items from available products
            const availableProducts = Object.values(products);
            const numItems = Math.floor(Math.random() * 4) + 1; // 1 to 4 items
            const orderItems = [];
            
            for (let i = 0; i < numItems; i++) {
                const product = availableProducts[Math.floor(Math.random() * availableProducts.length)];
                const quantity = Math.floor(Math.random() * 3) + 1; // 1 to 3 quantity
                
                // Check if item already exists in order
                const existingItem = orderItems.find(item => item.id === product.id);
                if (existingItem) {
                    existingItem.quantity += quantity;
                } else {
                    orderItems.push({
                        id: product.id,
                        name: product.name,
                        price: product.price,
                        quantity: quantity,
                        type: product.type,
                        image: product.image,
                        emoji: product.emoji
                    });
                }
            }

            // Calculate totals
            const subtotal = orderItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const deliveryFee = Math.random() > 0.3 ? (Math.random() * 15 + 5) : 0; // 70% chance of delivery fee
            const total = subtotal + deliveryFee;

            // Generate delivery date (for encomenda orders)
            const deliveryDate = new Date();
            deliveryDate.setDate(deliveryDate.getDate() + Math.floor(Math.random() * 10) + 3); // 3-13 days from now

            // Generate order creation date (random in last 30 days)
            const createdDate = new Date();
            createdDate.setDate(createdDate.getDate() - Math.floor(Math.random() * 30));

            const orderId = Date.now().toString() + Math.floor(Math.random() * 1000);

            const fakeOrder = {
                id: orderId,
                type: orderType,
                customer: customer,
                delivery: {
                    ...address,
                    fee: deliveryFee,
                    date: orderType === 'encomenda' ? deliveryDate.toISOString().split('T')[0] : '',
                    time: orderType === 'encomenda' ? ['08:00-12:00', '12:00-18:00', '18:00-22:00'][Math.floor(Math.random() * 3)] : ''
                },
                orderData: {
                    eventType: orderType === 'encomenda' ? eventTypes[Math.floor(Math.random() * eventTypes.length)] : '',
                    observations: orderType === 'encomenda' ? [
                        'Bolo com tema de unic√≥rnio, cores rosa e roxo',
                        'Decora√ß√£o simples e elegante',
                        'Sem a√ß√∫car, diab√©tico na fam√≠lia',
                        'Festa surpresa, entregar discretamente',
                        'Tema futebol, time do Corinthians',
                        'Cores azul e branco, tema marinheiro'
                    ][Math.floor(Math.random() * 6)] : ''
                },
                items: orderItems,
                subtotal: subtotal,
                deliveryFee: deliveryFee,
                total: total,
                paymentMethod: paymentMethod,
                status: status,
                paymentConfirmed: status !== 'aguardando_pagamento',
                date: createdDate.toISOString().split('T')[0],
                time: createdDate.toLocaleTimeString('pt-BR'),
                createdAt: createdDate.toISOString()
            };

            // Add advance payment info for encomenda orders
            if (paymentMethod === 'encomenda' && status !== 'aguardando_pagamento') {
                fakeOrder.advancePaymentConfirmed = true;
                fakeOrder.advancePaymentDate = createdDate.toISOString();
                fakeOrder.advancePaymentMethod = Math.random() > 0.5 ? 'pix' : 'credit_card';
            }

            // Add payment details for credit card
            if (paymentMethod === 'credit_card' && status !== 'aguardando_pagamento') {
                fakeOrder.paymentDetails = {
                    method: 'credit_card',
                    installments: Math.floor(Math.random() * 12) + 1,
                    lastFourDigits: Math.floor(Math.random() * 9000) + 1000,
                    cardName: customer.name.toUpperCase()
                };
            }

            // Save the fake order
            orders[orderId] = fakeOrder;
            saveData();
            
            // Refresh the orders list
            renderAdminOrders();
            
            showNotification(`Pedido teste #${orderId} gerado com sucesso!`, 'success');
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96b7c0aac631f1e6',t:'MTc1NDU3OTk2OS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
    ...seu conte√∫do...

    <!-- Seu script do site -->
    ();</script>

    <!-- Script do Firebase -->
    <script type="module">
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-app.js";
      import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-analytics.js";

      const firebaseConfig = {
        apiKey: "AIzaSyBwrAEGSlJL_y6UgLVUAjseT4Os4fZ1Olc",
        authDomain: "minha-loja-hum.firebaseapp.com",
        projectId: "minha-loja-hum",
        storageBucket: "minha-loja-hum.firebasestorage.app",
        messagingSenderId: "66659292101",
        appId: "1:66659292101:web:e061665eff8b32d3d2f1ac",
        measurementId: "G-JFDK9CVV4E"
      };

      const app = initializeApp(firebaseConfig);
      const analytics = getAnalytics(app);
    </script>

  </body>
</html>

</body>
</html>

